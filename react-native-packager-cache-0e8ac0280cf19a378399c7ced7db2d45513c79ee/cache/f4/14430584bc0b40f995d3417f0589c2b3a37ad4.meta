["406669e6deaf3478b513413844a8b9a5ccf415ce","65355d5de75a9467d9548a73c48ee28852b2030d",["React","prop-types","ColorPropType","Platform","processColor","NativeModules"],[57,91,134,175,216,265],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"names":["React","require","PropTypes","ColorPropType","Platform","processColor","StatusBarManager","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","_updatePropsStack","clearImmediate","_updateImmediate","setImmediate","oldProps","_currentValues","mergedProps","_propsStack","_defaultProps","OS","setStyle","setHidden","setNetworkActivityIndicatorVisible","setColor","setTranslucent","push","index","indexOf","splice","animation","style","visible","console","warn","color","Component","currentHeight","HEIGHT","propTypes","bool","oneOf","defaultProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule StatusBar\n * @flow\n */\n'use strict';\n\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\n\nconst processColor = require('processColor');\n\nconst StatusBarManager = require('NativeModules').StatusBarManager;\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Enum<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  'default': string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Enum<{\n  /**\n   * No animation\n   */\n  'none': string,\n  /**\n   * Fade animation\n   */\n  'fade': string,\n  /**\n   * Slide animation\n   */\n  'slide': string,\n}>;\n\ntype DefaultProps = {\n  animated: boolean,\n};\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there is also an imperative\n * API exposed as static functions on the component. It is however not recommended\n * to use the static API and the component for the same prop because any value\n * set by the static API will get overriden by the one set by the component in\n * the next render.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<{\n  hidden?: boolean,\n  animated?: boolean,\n  backgroundColor?: string,\n  translucent?: boolean,\n  barStyle?: 'default' | 'light-content' | 'dark-content',\n  networkActivityIndicatorVisible?: boolean,\n  showHideTransition?: 'fade' | 'slide',\n}> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight = StatusBarManager.HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      StatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      StatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS'\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    StatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n    StatusBarManager.setColor(processColor(color), animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    StatusBarManager.setTranslucent(translucent);\n  }\n\n  static propTypes = {\n    /**\n     * If the status bar is hidden.\n     */\n    hidden: PropTypes.bool,\n    /**\n     * If the transition between status bar property changes should be animated.\n     * Supported for backgroundColor, barStyle and hidden.\n     */\n    animated: PropTypes.bool,\n    /**\n     * The background color of the status bar.\n     * @platform android\n     */\n    backgroundColor: ColorPropType,\n    /**\n     * If the status bar is translucent.\n     * When translucent is set to true, the app will draw under the status bar.\n     * This is useful when using a semi transparent status bar color.\n     *\n     * @platform android\n     */\n    translucent: PropTypes.bool,\n    /**\n     * Sets the color of the status bar text.\n     */\n    barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),\n    /**\n     * If the network activity indicator should be visible.\n     *\n     * @platform ios\n     */\n    networkActivityIndicatorVisible: PropTypes.bool,\n    /**\n     * The transition effect when showing and hiding the status bar using the `hidden`\n     * prop. Defaults to 'fade'.\n     *\n     * @platform ios\n     */\n    showHideTransition: PropTypes.oneOf(['fade', 'slide']),\n  };\n\n  static defaultProps = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierachy will have priority.\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack.push(this._stackEntry);\n    this._updatePropsStack();\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    // $FlowFixMe found when converting React.createClass to ES6\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    StatusBar._propsStack.splice(index, 1);\n\n    this._updatePropsStack();\n  }\n\n  componentDidUpdate() {\n    // $FlowFixMe found when converting React.createClass to ES6\n    const index = StatusBar._propsStack.indexOf(this._stackEntry);\n    this._stackEntry = createStackEntry(this.props);\n    StatusBar._propsStack[index] = this._stackEntry;\n\n    this._updatePropsStack();\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none'\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          StatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          StatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          StatusBarManager.setColor(\n            processColor(mergedProps.backgroundColor.value),\n            mergedProps.backgroundColor.animated\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          StatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          StatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"]}]