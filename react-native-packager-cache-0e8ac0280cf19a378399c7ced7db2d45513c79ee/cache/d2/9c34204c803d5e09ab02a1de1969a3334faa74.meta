["9b5436f958ca82e281377a49cf0908ffef0ad7e2","f823c4192be155ffd6941316621cadacc49c6ed7",["./commons"],[39],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/event-target-shim/lib/custom-event-target.js"],"names":["Commons","require","LISTENERS","ATTRIBUTE","newNode","getAttributeListener","eventTarget","type","node","kind","listener","next","setAttributeListener","prev","exports","defineCustomEventTarget","EventTargetBase","types","EventTarget","call","descripter","constructor","value","configurable","writable","forEach","get","set","enumerable","prototype","Object","create"],"mappings":";;AAMA;;AAMA,IAAIA,UAAUC,QAAQ,WAAR,CAAd;AACA,IAAIC,YAAYF,QAAQE,SAAxB;AACA,IAAIC,YAAYH,QAAQG,SAAxB;AACA,IAAIC,UAAUJ,QAAQI,OAAtB;;AAaA,SAASC,oBAAT,CAA8BC,WAA9B,EAA2CC,IAA3C,EAAiD;AAC7C,QAAIC,OAAOF,YAAYJ,SAAZ,EAAuBK,IAAvB,CAAX;AACA,WAAOC,QAAQ,IAAf,EAAqB;AACjB,YAAIA,KAAKC,IAAL,KAAcN,SAAlB,EAA6B;AACzB,mBAAOK,KAAKE,QAAZ;AACH;AACDF,eAAOA,KAAKG,IAAZ;AACH;AACD,WAAO,IAAP;AACH;;AAUD,SAASC,oBAAT,CAA8BN,WAA9B,EAA2CC,IAA3C,EAAiDG,QAAjD,EAA2D;AACvD,QAAI,OAAOA,QAAP,KAAoB,UAApB,IAAkC,OAAOA,QAAP,KAAoB,QAA1D,EAAoE;AAChEA,mBAAW,IAAX;AACH;;AAED,QAAIG,OAAO,IAAX;AACA,QAAIL,OAAOF,YAAYJ,SAAZ,EAAuBK,IAAvB,CAAX;AACA,WAAOC,QAAQ,IAAf,EAAqB;AACjB,YAAIA,KAAKC,IAAL,KAAcN,SAAlB,EAA6B;AAEzB,gBAAIU,QAAQ,IAAZ,EAAkB;AACdP,4BAAYJ,SAAZ,EAAuBK,IAAvB,IAA+BC,KAAKG,IAApC;AACH,aAFD,MAGK;AACDE,qBAAKF,IAAL,GAAYH,KAAKG,IAAjB;AACH;AACJ,SARD,MASK;AACDE,mBAAOL,IAAP;AACH;;AAEDA,eAAOA,KAAKG,IAAZ;AACH;;AAGD,QAAID,YAAY,IAAhB,EAAsB;AAClB,YAAIG,QAAQ,IAAZ,EAAkB;AACdP,wBAAYJ,SAAZ,EAAuBK,IAAvB,IAA+BH,QAAQM,QAAR,EAAkBP,SAAlB,CAA/B;AACH,SAFD,MAGK;AACDU,iBAAKF,IAAL,GAAYP,QAAQM,QAAR,EAAkBP,SAAlB,CAAZ;AACH;AACJ;AACJ;;AAaDW,QAAQC,uBAAR,GAAkC,UAASC,eAAT,EAA0BC,KAA1B,EAAiC;AAC/D,aAASC,WAAT,GAAuB;AACnBF,wBAAgBG,IAAhB,CAAqB,IAArB;AACH;;AAED,QAAIC,aAAa;AACbC,qBAAa;AACTC,mBAAOJ,WADE;AAETK,0BAAc,IAFL;AAGTC,sBAAU;AAHD;AADA,KAAjB;;AAQAP,UAAMQ,OAAN,CAAc,UAASlB,IAAT,EAAe;AACzBa,mBAAW,OAAOb,IAAlB,IAA0B;AACtBmB,iBAAK,eAAW;AAAE,uBAAOrB,qBAAqB,IAArB,EAA2BE,IAA3B,CAAP;AAA0C,aADtC;AAEtBoB,iBAAK,aAASjB,QAAT,EAAmB;AAAEE,qCAAqB,IAArB,EAA2BL,IAA3B,EAAiCG,QAAjC;AAA6C,aAFjD;AAGtBa,0BAAc,IAHQ;AAItBK,wBAAY;AAJU,SAA1B;AAMH,KAPD;;AASAV,gBAAYW,SAAZ,GAAwBC,OAAOC,MAAP,CAAcf,gBAAgBa,SAA9B,EAAyCT,UAAzC,CAAxB;;AAEA,WAAOF,WAAP;AACH,CAzBD","sourcesContent":["/**\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nvar Commons = require(\"./commons\");\nvar LISTENERS = Commons.LISTENERS;\nvar ATTRIBUTE = Commons.ATTRIBUTE;\nvar newNode = Commons.newNode;\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/**\n * Gets a specified attribute listener from a given EventTarget object.\n *\n * @param {EventTarget} eventTarget - An EventTarget object to get.\n * @param {string} type - An event type to get.\n * @returns {function|null} The found attribute listener.\n */\nfunction getAttributeListener(eventTarget, type) {\n    var node = eventTarget[LISTENERS][type];\n    while (node != null) {\n        if (node.kind === ATTRIBUTE) {\n            return node.listener;\n        }\n        node = node.next;\n    }\n    return null;\n}\n\n/**\n * Sets a specified attribute listener to a given EventTarget object.\n *\n * @param {EventTarget} eventTarget - An EventTarget object to set.\n * @param {string} type - An event type to set.\n * @param {function|null} listener - A listener to be set.\n * @returns {void}\n */\nfunction setAttributeListener(eventTarget, type, listener) {\n    if (typeof listener !== \"function\" && typeof listener !== \"object\") {\n        listener = null; // eslint-disable-line no-param-reassign\n    }\n\n    var prev = null;\n    var node = eventTarget[LISTENERS][type];\n    while (node != null) {\n        if (node.kind === ATTRIBUTE) {\n            // Remove old value.\n            if (prev == null) {\n                eventTarget[LISTENERS][type] = node.next;\n            }\n            else {\n                prev.next = node.next;\n            }\n        }\n        else {\n            prev = node;\n        }\n\n        node = node.next;\n    }\n\n    // Add new value.\n    if (listener != null) {\n        if (prev == null) {\n            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);\n        }\n        else {\n            prev.next = newNode(listener, ATTRIBUTE);\n        }\n    }\n}\n\n//-----------------------------------------------------------------------------\n// Public Interface\n//-----------------------------------------------------------------------------\n\n/**\n * Defines an `EventTarget` implementation which has `onfoobar` attributes.\n *\n * @param {EventTarget} EventTargetBase - A base implementation of EventTarget.\n * @param {string[]} types - A list of event types which are defined as attribute listeners.\n * @returns {EventTarget} The defined `EventTarget` implementation which has attribute listeners.\n */\nexports.defineCustomEventTarget = function(EventTargetBase, types) {\n    function EventTarget() {\n        EventTargetBase.call(this);\n    }\n\n    var descripter = {\n        constructor: {\n            value: EventTarget,\n            configurable: true,\n            writable: true\n        }\n    };\n\n    types.forEach(function(type) {\n        descripter[\"on\" + type] = {\n            get: function() { return getAttributeListener(this, type); },\n            set: function(listener) { setAttributeListener(this, type, listener); },\n            configurable: true,\n            enumerable: true\n        };\n    });\n\n    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);\n\n    return EventTarget;\n};\n"]}]