["e14710e0d45f0807f4251f7b06f5dc0b36b6a072","ea2421f320da5cfdfdf3c12c12fd021691183160",["fbjs/lib/invariant"],[40],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Lists/ViewabilityHelper.js"],"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_lastUpdateTime","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","updateTime","Date","now","updateElapsed","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"mappings":";AAYA;;AAEA,IAAMA,YAAYC,OAAZ,sBAAN;;IAmDMC,iB;AAQJ,+BAEE;AAAA,QADAC,MACA,uEAD4B,EAACC,kCAAkC,CAAnC,EAC5B;AAAA;AAAA,SARFC,cAQE,GARwB,KAQxB;AAAA,SAPFC,eAOE,GAPwB,CAOxB;AAAA,SANFC,OAME,GANqB,IAAIC,GAAJ,EAMrB;AAAA,SALFC,gBAKE,GALgC,EAKhC;AAAA,SAJFC,cAIE,GAJuC,IAAIC,GAAJ,EAIvC;;AACA,SAAKC,OAAL,GAAeT,MAAf;AACD;;;;8BAKS;AACR,WAAKI,OAAL,CAAaM,OAAb,CAAqBC,YAArB;AACD;;;yCAMCC,S,EACAC,Y,EACAC,c,EACAC,e,EACAC,W,EACe;AAAA,oBAIX,KAAKP,OAJM;AAAA,UAEbQ,2BAFa,WAEbA,2BAFa;AAAA,UAGbhB,gCAHa,WAGbA,gCAHa;;AAKf,UAAMiB,eAAejB,oCAAoC,IAAzD;AACA,UAAMkB,2BAA2BD,eAC7BjB,gCAD6B,GAE7BgB,2BAFJ;AAGApB,gBACEsB,4BAA4B,IAA5B,IACEF,+BACE,IADF,MAEGhB,oCAAoC,IAFvC,CAFJ,EAKE,yFALF;AAOA,UAAMmB,kBAAkB,EAAxB;AACA,UAAIR,cAAc,CAAlB,EAAqB;AACnB,eAAOQ,eAAP;AACD;AACD,UAAIC,eAAe,CAAC,CAApB;;AApBe,iBAqBOL,eAAe,EAACM,OAAO,CAAR,EAAWC,MAAMX,YAAY,CAA7B,EArBtB;AAAA,UAqBRU,KArBQ,QAqBRA,KArBQ;AAAA,UAqBDC,IArBC,QAqBDA,IArBC;;AAsBf1B,gBACE0B,OAAOX,SADT,EAEE,0BAA0BY,KAAKC,SAAL,CAAe,EAACT,wBAAD,EAAcJ,oBAAd,EAAf,CAF5B;AAIA,WAAK,IAAIc,MAAMJ,KAAf,EAAsBI,OAAOH,IAA7B,EAAmCG,KAAnC,EAA0C;AACxC,YAAMC,UAAUZ,gBAAgBW,GAAhB,CAAhB;AACA,YAAI,CAACC,OAAL,EAAc;AACZ;AACD;AACD,YAAMC,MAAMD,QAAQE,MAAR,GAAiBhB,YAA7B;AACA,YAAMiB,SAASF,MAAMD,QAAQI,MAA7B;AACA,YAAIH,MAAMd,cAAN,IAAwBgB,SAAS,CAArC,EAAwC;AACtCT,yBAAeK,GAAf;AACA,cACEM,YACEd,YADF,EAEEC,wBAFF,EAGES,GAHF,EAIEE,MAJF,EAKEhB,cALF,EAMEa,QAAQI,MANV,CADF,EASE;AACAX,4BAAgBa,IAAhB,CAAqBP,GAArB;AACD;AACF,SAdD,MAcO,IAAIL,gBAAgB,CAApB,EAAuB;AAC5B;AACD;AACF;AACD,aAAOD,eAAP;AACD;;;6BAOCR,S,EACAC,Y,EACAC,c,EACAC,e,EACAmB,e,EACAC,sB,EAIAnB,W,EACM;AAAA;;AACN,UAAMoB,aAAaC,KAAKC,GAAL,EAAnB;AACA,UAAI,KAAKnC,eAAL,KAAyB,CAAzB,IAA8BS,YAAY,CAA1C,IAA+CG,gBAAgB,CAAhB,CAAnD,EAAuE;AAErE,aAAKZ,eAAL,GAAuBiC,UAAvB;AACD;AACD,UAAMG,gBAAgB,KAAKpC,eAAL,GAClBiC,aAAa,KAAKjC,eADA,GAElB,CAFJ;AAGA,UAAI,KAAKM,OAAL,CAAa+B,kBAAb,IAAmC,CAAC,KAAKtC,cAA7C,EAA6D;AAC3D;AACD;AACD,UAAIkB,kBAAkB,EAAtB;AACA,UAAIR,SAAJ,EAAe;AACbQ,0BAAkB,KAAKqB,oBAAL,CAChB7B,SADgB,EAEhBC,YAFgB,EAGhBC,cAHgB,EAIhBC,eAJgB,EAKhBC,WALgB,CAAlB;AAOD;AACD,UACE,KAAKV,gBAAL,CAAsByB,MAAtB,KAAiCX,gBAAgBW,MAAjD,IACA,KAAKzB,gBAAL,CAAsBoC,KAAtB,CAA4B,UAACC,CAAD,EAAIC,EAAJ;AAAA,eAAWD,MAAMvB,gBAAgBwB,EAAhB,CAAjB;AAAA,OAA5B,CAFF,EAGE;AAGA;AACD;AACD,WAAKtC,gBAAL,GAAwBc,eAAxB;AACA,WAAKjB,eAAL,GAAuBiC,UAAvB;AACA,UACE,KAAK3B,OAAL,CAAaoC,eAAb,IACAN,gBAAgB,KAAK9B,OAAL,CAAaoC,eAF/B,EAGE;AACA,YAAMC,SAASC,WAAW,YAAM;AAC9B,gBAAK3C,OAAL,CAAa4C,MAAb,CAAoBF,MAApB;AACA,gBAAKG,aAAL,CACE7B,eADF,EAEEe,sBAFF,EAGED,eAHF;AAKD,SAPc,EAOZ,KAAKzB,OAAL,CAAaoC,eAPD,CAAf;AAQA,aAAKzC,OAAL,CAAa8C,GAAb,CAAiBJ,MAAjB;AACD,OAbD,MAaO;AACL,aAAKG,aAAL,CACE7B,eADF,EAEEe,sBAFF,EAGED,eAHF;AAKD;AACF;;;wCAKmB;AAClB,WAAKhC,cAAL,GAAsB,IAAtB;AACD;;;kCAGCiD,sB,EACAhB,sB,EACAD,e,EACA;AAAA;;AAEAiB,+BAAyBA,uBAAuBC,MAAvB,CAA8B;AAAA,eACrD,OAAK9C,gBAAL,CAAsB+C,QAAtB,CAA+BT,EAA/B,CADqD;AAAA,OAA9B,CAAzB;AAGA,UAAMU,YAAY,KAAK/C,cAAvB;AACA,UAAMgD,YAAY,IAAI/C,GAAJ,CAChB2C,uBAAuBK,GAAvB,CAA2B,cAAM;AAC/B,YAAMC,WAAWvB,gBAAgBU,EAAhB,EAAoB,IAApB,CAAjB;AACA,eAAO,CAACa,SAASC,GAAV,EAAeD,QAAf,CAAP;AACD,OAHD,CADgB,CAAlB;;AAOA,UAAME,UAAU,EAAhB;AACA,2BAA8BJ,SAA9B,gKAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA,YAA7BG,IAA6B;AAAA,YAAxBD,QAAwB;;AACvC,YAAI,CAACH,UAAUM,GAAV,CAAcF,IAAd,CAAL,EAAyB;AACvBC,kBAAQ1B,IAAR,CAAawB,QAAb;AACD;AACF;AACD,4BAA8BH,SAA9B,uKAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA,YAA7BI,KAA6B;AAAA,YAAxBD,SAAwB;;AACvC,YAAI,CAACF,UAAUK,GAAV,CAAcF,KAAd,CAAL,EAAyB;AACvBC,kBAAQ1B,IAAR,0BAAiBwB,SAAjB,IAA2BI,YAAY,KAAvC;AACD;AACF;AACD,UAAIF,QAAQ5B,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAKxB,cAAL,GAAsBgD,SAAtB;AACApB,+BAAuB;AACrB2B,yBAAeC,MAAMC,IAAN,CAAWT,UAAUU,MAAV,EAAX,CADM;AAErBN;AAFqB,SAAvB;AAID;AACF;;;;;AAGH,SAAS3B,WAAT,CACEd,YADF,EAEEC,wBAFF,EAGES,GAHF,EAIEE,MAJF,EAKEhB,cALF,EAMEoD,UANF,EAOW;AACT,MAAIC,mBAAmBvC,GAAnB,EAAwBE,MAAxB,EAAgChB,cAAhC,CAAJ,EAAqD;AACnD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAMsD,SAASC,kBAAkBzC,GAAlB,EAAuBE,MAAvB,EAA+BhB,cAA/B,CAAf;AACA,QAAMwD,UACJ,OAAOpD,eAAekD,SAAStD,cAAxB,GAAyCsD,SAASF,UAAzD,CADF;AAEA,WAAOI,WAAWnD,wBAAlB;AACD;AACF;;AAED,SAASkD,iBAAT,CACEzC,GADF,EAEEE,MAFF,EAGEhB,cAHF,EAIU;AACR,MAAMyD,gBAAgBC,KAAKC,GAAL,CAAS3C,MAAT,EAAiBhB,cAAjB,IAAmC0D,KAAKE,GAAL,CAAS9C,GAAT,EAAc,CAAd,CAAzD;AACA,SAAO4C,KAAKE,GAAL,CAAS,CAAT,EAAYH,aAAZ,CAAP;AACD;;AAED,SAASJ,kBAAT,CACEvC,GADF,EAEEE,MAFF,EAGEhB,cAHF,EAIW;AACT,SAAOc,OAAO,CAAP,IAAYE,UAAUhB,cAAtB,IAAwCgB,SAASF,GAAxD;AACD;;AAED+C,OAAOC,OAAP,GAAiB7E,iBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ViewabilityHelper\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n* A Utility class for calculating viewable items based on current metrics like scroll position and\n* layout.\n*\n* An item is said to be in a \"viewable\" state when any of the following\n* is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n* is true):\n*\n* - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n*   visible in the view area >= `itemVisiblePercentThreshold`.\n* - Entirely visible on screen\n*/\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  _lastUpdateTime: number = 0;\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        itemVisiblePercentThreshold !=\n          null !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    invariant(\n      last < itemCount,\n      'Invalid render range ' + JSON.stringify({renderRange, itemCount}),\n    );\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    const updateTime = Date.now();\n    if (this._lastUpdateTime === 0 && itemCount > 0 && getFrameMetrics(0)) {\n      // Only count updates after the first item is rendered and has a frame.\n      this._lastUpdateTime = updateTime;\n    }\n    const updateElapsed = this._lastUpdateTime\n      ? updateTime - this._lastUpdateTime\n      : 0;\n    if (this._config.waitForInteraction && !this._hasInteracted) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    this._lastUpdateTime = updateTime;\n    if (\n      this._config.minimumViewTime &&\n      updateElapsed < this._config.minimumViewTime\n    ) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"]}]