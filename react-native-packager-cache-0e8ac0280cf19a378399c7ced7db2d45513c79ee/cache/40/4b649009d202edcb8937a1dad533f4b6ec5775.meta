["69ebeb166411b433d0711ae0d961d00ece3b3681","565073c7cc2a677d4f799b423d349d081518b472",["PixelRatio","Platform","../../local-cli/bundle/assetPathUtils","fbjs/lib/invariant"],[41,79,122,188],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidDrawableFolderName","fileName","getAndroidResourceIdentifier","serverUrl","bundlePath","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetPathInBundle","fromSource","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AssetSourceResolver\n * @flow\n */\n'use strict';\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean,\n  width: ?number,\n  height: ?number,\n  uri: string,\n  scale: number,\n};\n\nimport type { PackagerAsset } from 'AssetRegistry';\n\nconst PixelRatio = require('PixelRatio');\nconst Platform = require('Platform');\n\nconst assetPathUtils = require('../../local-cli/bundle/assetPathUtils');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  var drawbleFolder = assetPathUtils.getAndroidDrawableFolderName(asset, scale);\n  var fileName =  assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n\n  serverUrl: ?string;\n  // where the bundle is being run from\n  bundlePath: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, bundlePath: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.bundlePath = bundlePath;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!this.bundlePath;\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem() ?\n        this.drawableFolderInBundle() :\n        this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetPathInBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl + getScaledAssetPath(this.asset) +\n      '?platform=' + Platform.OS + '&hash=' + this.asset.hash\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. '/sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPathInBundle(): ResolvedAssetSource {\n    const path = this.bundlePath || '';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(Platform.OS === 'android', 'resource identifiers work on Android');\n    return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.bundlePath || '';\n    return this.fromSource(\n      'file://' + path + getAssetPathInDrawableFolder(this.asset)\n    );\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (var i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n\n}\n\n module.exports = AssetSourceResolver;\n"]}]