["ce767b8022221bb5f31f48bdacae0bab8592f62d","a98f81d5a3e2c63bc83cfd9cc7c55e2a90a90350",["Image","ColorPropType","NativeMethodsMixin","ReactNativeViewAttributes","Platform","React","prop-types","StyleSheet","ViewPropTypes","create-react-class","requireNativeComponent"],[36,74,125,188,241,274,308,348,391,441,501],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/Slider/Slider.js"],"names":["Image","require","ColorPropType","NativeMethodsMixin","ReactNativeViewAttributes","Platform","React","PropTypes","StyleSheet","ViewPropTypes","createReactClass","requireNativeComponent","Slider","displayName","mixins","propTypes","style","value","number","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","disabled","bool","trackImage","source","minimumTrackImage","maximumTrackImage","thumbImage","thumbTintColor","onValueChange","func","onSlidingComplete","testID","string","getDefaultProps","viewConfig","uiViewClassName","validAttributes","RCTView","render","props","styles","slider","event","userEvent","OS","nativeEvent","fromUser","onChange","create","height","options","nativeOnly","enabled","RCTSlider","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Slider\n * @flow\n */\n'use strict';\n\nvar Image = require('Image');\nvar ColorPropType = require('ColorPropType');\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nvar Platform = require('Platform');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar createReactClass = require('create-react-class');\nvar requireNativeComponent = require('requireNativeComponent');\n\ntype Event = Object;\n\n/**\n * A component used to select a single value from a range of values.\n */\n// $FlowFixMe(>=0.41.0)\nvar Slider = createReactClass({\n  displayName: 'Slider',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n\n    /**\n     * Used to style and layout the `Slider`.  See `StyleSheet.js` and\n     * `ViewStylePropTypes.js` for more info.\n     */\n    style: ViewPropTypes.style,\n\n    /**\n     * Initial value of the slider. The value should be between minimumValue\n     * and maximumValue, which default to 0 and 1 respectively.\n     * Default value is 0.\n     *\n     * *This is not a controlled component*, you don't need to update the\n     * value during dragging.\n     */\n    value: PropTypes.number,\n\n    /**\n     * Step value of the slider. The value should be\n     * between 0 and (maximumValue - minimumValue).\n     * Default value is 0.\n     */\n    step: PropTypes.number,\n\n    /**\n     * Initial minimum value of the slider. Default value is 0.\n     */\n    minimumValue: PropTypes.number,\n\n    /**\n     * Initial maximum value of the slider. Default value is 1.\n     */\n    maximumValue: PropTypes.number,\n\n    /**\n     * The color used for the track to the left of the button.\n     * Overrides the default blue gradient image on iOS.\n     */\n    minimumTrackTintColor: ColorPropType,\n\n    /**\n     * The color used for the track to the right of the button.\n     * Overrides the default blue gradient image on iOS.\n     */\n    maximumTrackTintColor: ColorPropType,\n\n    /**\n     * If true the user won't be able to move the slider.\n     * Default value is false.\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * Assigns a single image for the track. Only static images are supported.\n     * The center pixel of the image will be stretched to fill the track.\n     * @platform ios\n     */\n    trackImage: Image.propTypes.source,\n\n    /**\n     * Assigns a minimum track image. Only static images are supported. The\n     * rightmost pixel of the image will be stretched to fill the track.\n     * @platform ios\n     */\n    minimumTrackImage: Image.propTypes.source,\n\n    /**\n     * Assigns a maximum track image. Only static images are supported. The\n     * leftmost pixel of the image will be stretched to fill the track.\n     * @platform ios\n     */\n    maximumTrackImage: Image.propTypes.source,\n\n    /**\n     * Sets an image for the thumb. Only static images are supported.\n     * @platform ios\n     */\n    thumbImage: Image.propTypes.source,\n\n    /**\n     * Color of the foreground switch grip.\n     * @platform android\n     */\n    thumbTintColor: ColorPropType,\n\n    /**\n     * Callback continuously called while the user is dragging the slider.\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Callback that is called when the user releases the slider,\n     * regardless if the value has changed. The current value is passed\n     * as an argument to the callback handler.\n     */\n    onSlidingComplete: PropTypes.func,\n\n    /**\n     * Used to locate this view in UI automation tests.\n     */\n    testID: PropTypes.string,\n  },\n\n  getDefaultProps: function() : any {\n    return {\n      disabled: false,\n      value: 0,\n      minimumValue: 0,\n      maximumValue: 1,\n      step: 0\n    };\n  },\n\n  viewConfig: {\n    uiViewClassName: 'RCTSlider',\n    validAttributes: {\n      ...ReactNativeViewAttributes.RCTView,\n      value: true\n    }\n  },\n\n  render: function() {\n    const {style, onValueChange, onSlidingComplete, ...props} = this.props;\n    props.style = [styles.slider, style];\n\n    props.onValueChange = onValueChange && ((event: Event) => {\n      let userEvent = true;\n      if (Platform.OS === 'android') {\n        // On Android there's a special flag telling us the user is\n        // dragging the slider.\n        userEvent = event.nativeEvent.fromUser;\n      }\n      onValueChange && userEvent && onValueChange(event.nativeEvent.value);\n    });\n\n    props.onChange = props.onValueChange;\n\n    props.onSlidingComplete = onSlidingComplete && ((event: Event) => {\n      onSlidingComplete && onSlidingComplete(event.nativeEvent.value);\n    });\n\n    return <RCTSlider\n      {...props}\n      enabled={!this.props.disabled}\n      onStartShouldSetResponder={() => true}\n      onResponderTerminationRequest={() => false}\n    />;\n  }\n});\n\nlet styles;\nif (Platform.OS === 'ios') {\n  styles = StyleSheet.create({\n    slider: {\n      height: 40,\n    },\n  });\n} else {\n  styles = StyleSheet.create({\n    slider: {},\n  });\n}\n\nlet options = {};\nif (Platform.OS === 'android') {\n  options = {\n    nativeOnly: {\n      enabled: true,\n    }\n  };\n}\nconst RCTSlider = requireNativeComponent('RCTSlider', Slider, options);\n\nmodule.exports = Slider;\n"]}]