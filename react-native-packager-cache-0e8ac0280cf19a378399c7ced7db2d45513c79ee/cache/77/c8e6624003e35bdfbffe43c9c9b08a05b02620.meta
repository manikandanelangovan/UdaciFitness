["be49407a69add1bf762a0d0c8632c7f022eb65c9","cd9f9e30638197fadbc2e6506af319e3f39be11c",["AssetRegistry","AssetSourceResolver","NativeModules"],[44,96,148],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Image/resolveAssetSource.js"],"names":["AssetRegistry","require","AssetSourceResolver","NativeModules","_customSourceTransformer","_serverURL","_bundleSourcePath","getDevServerURL","undefined","scriptURL","SourceCode","match","getBundleSourcePath","startsWith","substring","lastIndexOf","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","getAssetByID","resolver","defaultAsset","module","exports","pickScale"],"mappings":";AAaA;;AAEA,IAAMA,gBAAgBC,OAAhB,iBAAN;AACA,IAAMC,sBAAsBD,OAAtB,uBAAN;AACA,IAAME,gBAAgBF,OAAhB,iBAAN;;AAIA,IAAIG,iCAAJ;AAAA,IAA8BC,mBAA9B;AAAA,IAA0CC,0BAA1C;;AAEA,SAASC,eAAT,GAAoC;AAClC,MAAIF,eAAeG,SAAnB,EAA8B;AAC5B,QAAIC,YAAYN,cAAcO,UAAd,CAAyBD,SAAzC;AACA,QAAIE,QAAQF,aAAaA,UAAUE,KAAV,CAAgB,mBAAhB,CAAzB;AACA,QAAIA,KAAJ,EAAW;AAETN,mBAAaM,MAAM,CAAN,CAAb;AACD,KAHD,MAGO;AAELN,mBAAa,IAAb;AACD;AACF;AACD,SAAOA,UAAP;AACD;;AAED,SAASO,mBAAT,GAAwC;AACtC,MAAIN,sBAAsBE,SAA1B,EAAqC;AACnC,QAAMC,YAAYN,cAAcO,UAAd,CAAyBD,SAA3C;AACA,QAAI,CAACA,SAAL,EAAgB;AAEdH,0BAAoB,IAApB;AACA,aAAOA,iBAAP;AACD;AACD,QAAIG,UAAUI,UAAV,CAAqB,WAArB,CAAJ,EAAuC;AAErCP,0BAAoB,IAApB;AACA,aAAOA,iBAAP;AACD;AACD,QAAIG,UAAUI,UAAV,CAAqB,SAArB,CAAJ,EAAqC;AAEnCP,0BAAoBG,UAAUK,SAAV,CAAoB,CAApB,EAAuBL,UAAUM,WAAV,CAAsB,GAAtB,IAA6B,CAApD,CAApB;AACD,KAHD,MAGO;AACLT,0BAAoBG,UAAUK,SAAV,CAAoB,CAApB,EAAuBL,UAAUM,WAAV,CAAsB,GAAtB,IAA6B,CAApD,CAApB;AACD;AACF;;AAED,SAAOT,iBAAP;AACD;;AAED,SAASU,0BAAT,CACEC,WADF,EAEQ;AACNb,6BAA2Ba,WAA3B;AACD;;AAMD,SAASC,kBAAT,CAA4BC,MAA5B,EAA+D;AAC7D,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD;;AAED,MAAIC,QAAQpB,cAAcqB,YAAd,CAA2BF,MAA3B,CAAZ;AACA,MAAI,CAACC,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,MAAME,WAAW,IAAIpB,mBAAJ,CAAwBK,iBAAxB,EAA2CK,qBAA3C,EAAkEQ,KAAlE,CAAjB;AACA,MAAIhB,wBAAJ,EAA8B;AAC5B,WAAOA,yBAAyBkB,QAAzB,CAAP;AACD;AACD,SAAOA,SAASC,YAAT,EAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBP,kBAAjB;AACAM,OAAOC,OAAP,CAAeC,SAAf,GAA2BxB,oBAAoBwB,SAA/C;AACAF,OAAOC,OAAP,CAAeT,0BAAf,GAA4CA,0BAA5C","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule resolveAssetSource\n * @flow\n *\n * Resolves an asset into a `source` for `Image`.\n */\n'use strict';\n\nconst AssetRegistry = require('AssetRegistry');\nconst AssetSourceResolver = require('AssetSourceResolver');\nconst NativeModules = require('NativeModules');\n\nimport type { ResolvedAssetSource } from 'AssetSourceResolver';\n\nlet _customSourceTransformer, _serverURL, _bundleSourcePath;\n\nfunction getDevServerURL(): ?string {\n  if (_serverURL === undefined) {\n    var scriptURL = NativeModules.SourceCode.scriptURL;\n    var match = scriptURL && scriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // Bundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // Bundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction getBundleSourcePath(): ?string {\n  if (_bundleSourcePath === undefined) {\n    const scriptURL = NativeModules.SourceCode.scriptURL;\n    if (!scriptURL) {\n      // scriptURL is falsy, we have nothing to go on here\n      _bundleSourcePath = null;\n      return _bundleSourcePath;\n    }\n    if (scriptURL.startsWith('assets://')) {\n      // running from within assets, no offline path to use\n      _bundleSourcePath = null;\n      return _bundleSourcePath;\n    }\n    if (scriptURL.startsWith('file://')) {\n      // cut off the protocol\n      _bundleSourcePath = scriptURL.substring(7, scriptURL.lastIndexOf('/') + 1);\n    } else {\n      _bundleSourcePath = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    }\n  }\n\n  return _bundleSourcePath;\n}\n\nfunction setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource,\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ?ResolvedAssetSource {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = AssetRegistry.getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), getBundleSourcePath(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nmodule.exports = resolveAssetSource;\nmodule.exports.pickScale = AssetSourceResolver.pickScale;\nmodule.exports.setCustomSourceTransformer = setCustomSourceTransformer;\n"]}]