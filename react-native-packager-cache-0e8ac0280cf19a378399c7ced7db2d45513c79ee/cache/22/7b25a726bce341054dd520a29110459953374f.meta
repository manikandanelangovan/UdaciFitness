["efbe4bdc7289b1aa74ddb25f07539828513d0bdb","a29c963f9296126a0cf5bd164a1baca87fe58ebb",["RCTDeviceEventEmitter","Map","infoLog","dumpReactTree","NativeModules"],[72,116,146,271,3000],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/BugReporting/BugReporting.js"],"names":["RCTDeviceEventEmitter","require","Map","infoLog","defaultExtras","BugReporting","addFileSource","_subscription","addListener","collectExtraData","key","callback","_addSource","_extraSources","_fileSources","source","_maybeInit","has","console","warn","set","remove","delete","extraData","fileData","BugReportingNativeModule","setExtraData","extras","files","module","exports"],"mappings":";AAWA;;;;AAEA,IAAMA,wBAAwBC,OAAxB,yBAAN;AACA,IAAMC,MAAMD,OAAN,OAAN;AACA,IAAME,UAAUF,OAAV,WAAN;;AAQA,SAASG,aAAT,GAAyB;AACvBC,eAAaC,aAAb,CAA2B,qBAA3B,EAAkD;AAAA,WAAML,0BAAN;AAAA,GAAlD;AACD;;IAQKI,Y;;;;;;;iCAKgB;AAClB,UAAI,CAACA,aAAaE,aAAlB,EAAiC;AAC/BF,qBAAaE,aAAb,GAA6BP,sBACxBQ,WADwB,CACZ,qBADY,EACWH,aAAaI,gBADxB,EAC0C,IAD1C,CAA7B;AAEAL;AACD;AACF;;;8BAUgBM,G,EAAaC,Q,EAAgD;AAC5E,aAAO,KAAKC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB,EAA+BN,aAAaQ,aAA5C,CAAP;AACD;;;kCAUoBH,G,EAAaC,Q,EAAgD;AAChF,aAAO,KAAKC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB,EAA+BN,aAAaS,YAA5C,CAAP;AACD;;;+BAEiBJ,G,EAAaC,Q,EAA0BI,M,EAA2D;AAClHV,mBAAaW,UAAb;AACA,UAAID,OAAOE,GAAP,CAAWP,GAAX,CAAJ,EAAqB;AACnBQ,gBAAQC,IAAR,6DAAsET,GAAtE;AACD;AACDK,aAAOK,GAAP,CAAWV,GAAX,EAAgBC,QAAhB;AACA,aAAO,EAACU,QAAQ,kBAAM;AAAEN,iBAAOO,MAAP,CAAcZ,GAAd;AAAqB,SAAtC,EAAP;AACD;;;uCAQoC;AACnC,UAAMa,YAAuB,EAA7B;AACA,2BAA8BlB,aAAaQ,aAA3C,gKAA0D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA,YAA9CH,IAA8C;AAAA,YAAzCC,QAAyC;;AACxDY,kBAAUb,IAAV,IAAiBC,UAAjB;AACD;AACD,UAAMa,WAAsB,EAA5B;AACA,4BAA8BnB,aAAaS,YAA3C,uKAAyD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA,YAA7CJ,KAA6C;AAAA,YAAxCC,SAAwC;;AACvDa,iBAASd,KAAT,IAAgBC,WAAhB;AACD;AACDR,cAAQ,yBAAR,EAAmCoB,SAAnC;AACA,UAAME,2BAA2BxB,yBAAyBI,YAA1D;AACAoB,kCACEA,yBAAyBC,YAD3B,IAEED,yBAAyBC,YAAzB,CAAsCH,SAAtC,EAAiDC,QAAjD,CAFF;;AAIA,aAAO,EAAEG,QAAQJ,SAAV,EAAqBK,OAAOJ,QAA5B,EAAP;AACD;;;YAnEMX,a,GAA6C,IAAIX,GAAJ,E,SAC7CY,Y,GAA4C,IAAIZ,GAAJ,E,SAC5CK,a,GAAsC,I;;;AAoE/CsB,OAAOC,OAAP,GAAiBzB,YAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BugReporting\n * @flow\n */\n'use strict';\n\nconst RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\nconst Map = require('Map');\nconst infoLog = require('infoLog');\n\nimport type EmitterSubscription from 'EmitterSubscription';\n\ntype ExtraData = { [key: string]: string };\ntype SourceCallback = () => string;\ntype DebugData = { extras: ExtraData, files: ExtraData };\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () => require('dumpReactTree')());\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EmitterSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter\n          .addListener('collectBugExtraData', BugReporting.collectExtraData, null);\n      defaultExtras();\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(key: string, callback: SourceCallback): {remove: () => void} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(key: string, callback: SourceCallback): {remove: () => void} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(key: string, callback: SourceCallback, source: Map<string, SourceCallback>): {remove: () => void} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(`BugReporting.add* called multiple times for same key '${key}'`);\n    }\n    source.set(key, callback);\n    return {remove: () => { source.delete(key); }};\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n    infoLog('BugReporting extraData:', extraData);\n    const BugReportingNativeModule = require('NativeModules').BugReporting;\n    BugReportingNativeModule &&\n      BugReportingNativeModule.setExtraData &&\n      BugReportingNativeModule.setExtraData(extraData, fileData);\n\n    return { extras: extraData, files: fileData };\n  }\n}\n\nmodule.exports = BugReporting;\n"]}]