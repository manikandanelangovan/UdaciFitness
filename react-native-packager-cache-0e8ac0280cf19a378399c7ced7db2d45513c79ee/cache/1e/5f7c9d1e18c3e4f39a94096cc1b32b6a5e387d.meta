["8cadd30af56367916a2efadc86ebf069c6607fe6","ce2732a49009b48bbfe66d4612bbb4d7ce7d05e7",["react","react-native","fbemitter","./NativeAdsManager"],[87,184,227,274],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/facebook-ads/withNativeAd.js"],"names":["NativeAdView","Component","state","ad","canRequestAds","subscription","props","adsManager","onAdsLoaded","setState","remove","toJSON","e","nativeEvent"],"mappings":";;;;AAEA;;;;AACA;;AACA;;AACA;;;;AAIA,IAAMA,eAAe,yCAAuB,aAAvB,EAAsC,IAAtC,CAArB;;kBAiBe,UAACC,SAAD;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,sNAKXC,KALW,GAKH;AACNC,YAAI,IADE;AAENC,uBAAe;AAFT,OALG;AAAA;;AAAA;AAAA;AAAA,0CAiBS;AAAA;;AAClB,aAAKC,YAAL,GAAoB,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,WAAtB,CAAkC;AAAA,iBACpD,OAAKC,QAAL,CAAc,EAAEL,eAAe,IAAjB,EAAd,CADoD;AAAA,SAAlC,CAApB;AAGD;AArBU;AAAA;AAAA,6CA0BY;AACrB,aAAKC,YAAL,CAAkBK,MAAlB;AACD;AA5BU;AAAA;AAAA,+BA8BF;AAAA;;AAAA,qBAC0B,KAAKJ,KAD/B;AAAA,YACCC,UADD,UACCA,UADD;AAAA,YACgBD,KADhB;;;AAGP,YAAI,CAAC,KAAKJ,KAAL,CAAWE,aAAhB,EAA+B;AAC7B,iBAAO,IAAP;AACD;;AAED,eACE;AAAC,sBAAD;AAAA;AACE,wBAAYG,WAAWI,MAAX,EADd;AAEE,wBAAY;AAAA,qBAAK,OAAKF,QAAL,CAAc,EAAEN,IAAIS,EAAEC,WAAR,EAAd,CAAL;AAAA,aAFd;AAGG,eAAKX,KAAL,CAAWC,EAAX,IAAiB,8BAAC,SAAD,yBAAW,UAAU,KAAKD,KAAL,CAAWC,EAAhC,IAAwCG,KAAxC;AAHpB,SADF;AAOD;AA5CU;AAAA;AAAA,IACiB,gBAAML,SADvB;AAAA,C","sourcesContent":["/* @flow */\n\nimport React from 'react';\nimport { requireNativeComponent } from 'react-native';\nimport { EmitterSubscription } from 'fbemitter';\nimport AdsManager from './NativeAdsManager';\n// $FlowFixMe: types.js is missing\nimport type { NativeAd } from './types';\n\nconst NativeAdView = requireNativeComponent('CTKNativeAd', null);\n\ntype NativeAdWrapperState = {\n  ad: ?NativeAd,\n  canRequestAds: boolean,\n};\n\ntype NativeAdWrapperProps = {\n  adsManager: AdsManager,\n};\n\n/**\n * Higher order function that wraps given `Component` and provides `nativeAd` as a prop\n *\n * In case of an empty ad or adsManager not yet ready for displaying ads, null will be\n * returned instead of a component provided.\n */\nexport default (Component: Function) =>\n  class NativeAdWrapper extends React.Component<\n    NativeAdWrapperProps,\n    NativeAdWrapperState\n  > {\n    state = {\n      ad: null,\n      canRequestAds: false,\n    };\n\n    /** @{EmitterSubscription} **/\n    subscription: EmitterSubscription;\n\n    /**\n   * On init, register for updates on `adsManager` to know when it becomes\n   * available for accessing\n   */\n    componentDidMount() {\n      this.subscription = this.props.adsManager.onAdsLoaded(() =>\n        this.setState({ canRequestAds: true })\n      );\n    }\n\n    /**\n   * Clear subscription when component goes off screen\n   */\n    componentWillUnmount() {\n      this.subscription.remove();\n    }\n\n    render() {\n      const { adsManager, ...props } = this.props;\n\n      if (!this.state.canRequestAds) {\n        return null;\n      }\n\n      return (\n        <NativeAdView\n          adsManager={adsManager.toJSON()}\n          onAdLoaded={e => this.setState({ ad: e.nativeEvent })}>\n          {this.state.ad && <Component nativeAd={this.state.ad} {...props} />}\n        </NativeAdView>\n      );\n    }\n  };\n"]}]