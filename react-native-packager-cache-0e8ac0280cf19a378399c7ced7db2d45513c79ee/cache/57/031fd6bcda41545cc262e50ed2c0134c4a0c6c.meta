["43493e15187c2d387981d8b7f5ecc605f2e176e5","f9a446fba6f5f8e3c2cd03f09926a3baf3041ba7",["noop-fn","tiny-queue","immediate","./WebSQLResultSet"],[34,66,105,149],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/websql/lib/websql/WebSQLTransaction.js"],"names":["noop","require","Queue","immediate","WebSQLResultSet","errorUnhandled","massageSQLResult","sql","insertId","rowsAffected","rows","test","SQLTask","args","sqlCallback","sqlErrorCallback","runBatch","self","batch","onDone","_running","runAllSql","readOnly","_websqlDatabase","_currentTask","_db","exec","err","results","_error","i","length","res","batchTask","error","_complete","_sqlQueue","_onTransactionComplete","task","shift","push","executeSql","_runningTimeout","WebSQLTransaction","websqlDatabase","prototype","Array","isArray","_checkDone","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar noop = require('noop-fn');\nvar Queue = require('tiny-queue');\nvar immediate = require('immediate');\nvar WebSQLResultSet = require('./WebSQLResultSet');\n\nfunction errorUnhandled() {\n  return true; // a non-truthy return indicates error was handled\n}\n\n// WebSQL has some bizarre behavior regarding insertId/rowsAffected. To try\n// to match the observed behavior of Chrome/Safari as much as possible, we\n// sniff the SQL message to try to massage the returned insertId/rowsAffected.\n// This helps us pass the tests, although it's error-prone and should\n// probably be revised.\nfunction massageSQLResult(sql, insertId, rowsAffected, rows) {\n  if (/^\\s*UPDATE\\b/i.test(sql)) {\n    // insertId is always undefined for \"UPDATE\" statements\n    insertId = void 0;\n  } else if (/^\\s*CREATE\\s+TABLE\\b/i.test(sql)) {\n    // WebSQL always returns an insertId of 0 for \"CREATE TABLE\" statements\n    insertId = 0;\n    rowsAffected = 0;\n  } else if (/^\\s*DROP\\s+TABLE\\b/i.test(sql)) {\n    // WebSQL always returns insertId=undefined and rowsAffected=0\n    // for \"DROP TABLE\" statements. Go figure.\n    insertId = void 0;\n    rowsAffected = 0;\n  } else if (!/^\\s*INSERT\\b/i.test(sql)) {\n    // for all non-inserts (deletes, etc.) insertId is always undefined\n    // ¯\\_(ツ)_/¯\n    insertId = void 0;\n  }\n  return new WebSQLResultSet(insertId, rowsAffected, rows);\n}\n\nfunction SQLTask(sql, args, sqlCallback, sqlErrorCallback) {\n  this.sql = sql;\n  this.args = args;\n  this.sqlCallback = sqlCallback;\n  this.sqlErrorCallback = sqlErrorCallback;\n}\n\nfunction runBatch(self, batch) {\n\n  function onDone() {\n    self._running = false;\n    runAllSql(self);\n  }\n\n  var readOnly = self._websqlDatabase._currentTask.readOnly;\n\n  self._websqlDatabase._db.exec(batch, readOnly, function (err, results) {\n    /* istanbul ignore next */\n    if (err) {\n      self._error = err;\n      return onDone();\n    }\n    for (var i = 0; i < results.length; i++) {\n      var res = results[i];\n      var batchTask = batch[i];\n      if (res.error) {\n        if (batchTask.sqlErrorCallback(self, res.error)) {\n          // user didn't handle the error\n          self._error = res.error;\n          return onDone();\n        }\n      } else {\n        batchTask.sqlCallback(self, massageSQLResult(\n          batch[i].sql, res.insertId, res.rowsAffected, res.rows));\n      }\n    }\n    onDone();\n  });\n}\n\nfunction runAllSql(self) {\n  if (self._running || self._complete) {\n    return;\n  }\n  if (self._error || !self._sqlQueue.length) {\n    self._complete = true;\n    return self._websqlDatabase._onTransactionComplete(self._error);\n  }\n  self._running = true;\n  var batch = [];\n  var task;\n  while ((task = self._sqlQueue.shift())) {\n    batch.push(task);\n  }\n  runBatch(self, batch);\n}\n\nfunction executeSql(self, sql, args, sqlCallback, sqlErrorCallback) {\n  self._sqlQueue.push(new SQLTask(sql, args, sqlCallback, sqlErrorCallback));\n  if (self._runningTimeout) {\n    return;\n  }\n  self._runningTimeout = true;\n  immediate(function () {\n    self._runningTimeout = false;\n    runAllSql(self);\n  });\n}\n\nfunction WebSQLTransaction(websqlDatabase) {\n  this._websqlDatabase = websqlDatabase;\n  this._error = null;\n  this._complete = false;\n  this._runningTimeout = false;\n  this._sqlQueue = new Queue();\n  if (!websqlDatabase._currentTask.readOnly) {\n    // Since we serialize all access to the database, there is no need to\n    // run read-only tasks in a transaction. This is a perf boost.\n    this._sqlQueue.push(new SQLTask('BEGIN;', [], noop, noop));\n  }\n}\n\nWebSQLTransaction.prototype.executeSql = function (sql, args, sqlCallback, sqlErrorCallback) {\n  args = Array.isArray(args) ? args : [];\n  sqlCallback = typeof sqlCallback === 'function' ? sqlCallback : noop;\n  sqlErrorCallback = typeof sqlErrorCallback === 'function' ? sqlErrorCallback : errorUnhandled;\n\n  executeSql(this, sql, args, sqlCallback, sqlErrorCallback);\n};\n\nWebSQLTransaction.prototype._checkDone = function () {\n  runAllSql(this);\n};\n\nmodule.exports = WebSQLTransaction;"]}]