["053b0a57439006e9e701250930cfe101aca731b4","81d59e3e6c4dd3e17a4cf2385240768e669521e6",["NativeModules","NativeEventEmitter","base64-js"],[49,116,161],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/WebSocket/WebSocketInterceptor.js"],"names":["RCTWebSocketModule","require","WebSocketModule","NativeEventEmitter","base64","originalRCTWebSocketConnect","connect","originalRCTWebSocketSend","send","originalRCTWebSocketSendBinary","sendBinary","originalRCTWebSocketClose","close","eventEmitter","subscriptions","closeCallback","sendCallback","connectCallback","onOpenCallback","onMessageCallback","onErrorCallback","onCloseCallback","isInterceptorEnabled","WebSocketInterceptor","setCloseCallback","callback","setSendCallback","setConnectCallback","setOnOpenCallback","setOnMessageCallback","setOnErrorCallback","setOnCloseCallback","_unregisterEvents","forEach","e","remove","_registerEvents","addListener","ev","id","type","_arrayBufferToString","data","code","reason","message","enableInterception","url","protocols","options","socketId","apply","arguments","length","value","toByteArray","buffer","undefined","ArrayBuffer","Uint8Array","String","Array","from","disableInterception","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule WebSocketInterceptor\n */\n 'use strict';\n\nconst RCTWebSocketModule = require('NativeModules').WebSocketModule;\nconst NativeEventEmitter = require('NativeEventEmitter');\n\nconst base64 = require('base64-js');\n\nconst originalRCTWebSocketConnect = RCTWebSocketModule.connect;\nconst originalRCTWebSocketSend = RCTWebSocketModule.send;\nconst originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;\nconst originalRCTWebSocketClose = RCTWebSocketModule.close;\n\nlet eventEmitter: NativeEventEmitter;\nlet subscriptions: Array<EventSubscription>;\n\nlet closeCallback;\nlet sendCallback;\nlet connectCallback;\nlet onOpenCallback;\nlet onMessageCallback;\nlet onErrorCallback;\nlet onCloseCallback;\n\nlet isInterceptorEnabled = false;\n\n/**\n * A network interceptor which monkey-patches RCTWebSocketModule methods\n * to gather all websocket network requests/responses, in order to show\n * their information in the React Native inspector development tool.\n */\n\nconst WebSocketInterceptor = {\n  /**\n   * Invoked when RCTWebSocketModule.close(...) is called.\n   */\n  setCloseCallback(callback) {\n    closeCallback = callback;\n  },\n\n  /**\n   * Invoked when RCTWebSocketModule.send(...) or sendBinary(...) is called.\n   */\n  setSendCallback(callback) {\n    sendCallback = callback;\n  },\n\n  /**\n   * Invoked when RCTWebSocketModule.connect(...) is called.\n   */\n  setConnectCallback(callback) {\n    connectCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketOpen\" happens.\n   */\n  setOnOpenCallback(callback) {\n    onOpenCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketMessage\" happens.\n   */\n  setOnMessageCallback(callback) {\n    onMessageCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketFailed\" happens.\n   */\n  setOnErrorCallback(callback) {\n    onErrorCallback = callback;\n  },\n\n  /**\n   * Invoked when event \"websocketClosed\" happens.\n   */\n  setOnCloseCallback(callback) {\n    onCloseCallback = callback;\n  },\n\n  isInterceptorEnabled() {\n    return isInterceptorEnabled;\n  },\n\n  _unregisterEvents() {\n    subscriptions.forEach(e => e.remove());\n    subscriptions = [];\n  },\n\n  /**\n   * Add listeners to the RCTWebSocketModule events to intercept them.\n   */\n  _registerEvents() {\n    subscriptions = [\n      eventEmitter.addListener('websocketMessage', ev => {\n        if (onMessageCallback) {\n          onMessageCallback(\n            ev.id,\n            (ev.type === 'binary') ?\n            WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data,\n          );\n        }\n      }),\n      eventEmitter.addListener('websocketOpen', ev => {\n        if (onOpenCallback) {\n          onOpenCallback(ev.id);\n        }\n      }),\n      eventEmitter.addListener('websocketClosed', ev => {\n        if (onCloseCallback) {\n          onCloseCallback(ev.id, {code: ev.code, reason: ev.reason});\n        }\n      }),\n      eventEmitter.addListener('websocketFailed', ev => {\n        if (onErrorCallback) {\n          onErrorCallback(ev.id, {message: ev.message});\n        }\n      })\n    ];\n  },\n\n  enableInterception() {\n    if (isInterceptorEnabled) {\n      return;\n    }\n    eventEmitter = new NativeEventEmitter(RCTWebSocketModule);\n    WebSocketInterceptor._registerEvents();\n\n    // Override `connect` method for all RCTWebSocketModule requests\n    // to intercept the request url, protocols, options and socketId,\n    // then pass them through the `connectCallback`.\n    RCTWebSocketModule.connect = function(url, protocols, options, socketId) {\n      if (connectCallback) {\n        connectCallback(url, protocols, options, socketId);\n      }\n      originalRCTWebSocketConnect.apply(this, arguments);\n    };\n\n    // Override `send` method for all RCTWebSocketModule requests to intercept\n    // the data sent, then pass them through the `sendCallback`.\n    RCTWebSocketModule.send = function(data, socketId) {\n      if (sendCallback) {\n        sendCallback(data, socketId);\n      }\n      originalRCTWebSocketSend.apply(this, arguments);\n    };\n\n    // Override `sendBinary` method for all RCTWebSocketModule requests to\n    // intercept the data sent, then pass them through the `sendCallback`.\n    RCTWebSocketModule.sendBinary = function(data, socketId) {\n      if (sendCallback) {\n        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);\n      }\n      originalRCTWebSocketSendBinary.apply(this, arguments);\n    };\n\n    // Override `close` method for all RCTWebSocketModule requests to intercept\n    // the close information, then pass them through the `closeCallback`.\n    RCTWebSocketModule.close = function() {\n      if (closeCallback) {\n        if (arguments.length === 3) {\n          closeCallback(arguments[0], arguments[1], arguments[2]);\n        } else {\n          closeCallback(null, null, arguments[0]);\n        }\n      }\n      originalRCTWebSocketClose.apply(this, arguments);\n    };\n\n    isInterceptorEnabled = true;\n  },\n\n   _arrayBufferToString(data) {\n    const value = base64.toByteArray(data).buffer;\n    if (value === undefined || value === null) {\n      return '(no value)';\n    }\n    if (typeof ArrayBuffer !== 'undefined' &&\n        typeof Uint8Array !== 'undefined' &&\n        value instanceof ArrayBuffer) {\n      return `ArrayBuffer {${String(Array.from(new Uint8Array(value)))}}`;\n    }\n    return value;\n  },\n\n  // Unpatch RCTWebSocketModule methods and remove the callbacks.\n  disableInterception() {\n    if (!isInterceptorEnabled) {\n      return;\n    }\n    isInterceptorEnabled = false;\n    RCTWebSocketModule.send = originalRCTWebSocketSend;\n    RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;\n    RCTWebSocketModule.close = originalRCTWebSocketClose;\n    RCTWebSocketModule.connect = originalRCTWebSocketConnect;\n\n    connectCallback = null;\n    closeCallback = null;\n    sendCallback = null;\n    onOpenCallback = null;\n    onMessageCallback = null;\n    onCloseCallback = null;\n    onErrorCallback = null;\n\n    WebSocketInterceptor._unregisterEvents();\n  },\n};\n\nmodule.exports = WebSocketInterceptor;\n"]}]