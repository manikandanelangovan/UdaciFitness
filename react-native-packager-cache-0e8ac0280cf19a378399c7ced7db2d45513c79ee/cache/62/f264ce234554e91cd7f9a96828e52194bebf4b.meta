["2561868ee907a1b463171c705da13453d08af62f","591304beb39b0ed9020200ee4367d6b6faa72719",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/lib/Queue.js"],"names":["Queue","queue","offset","getLength","length","isEmpty","enqueue","item","push","dequeue","undefined","slice","peek"],"mappings":";;;kBAiBwBA,K;AAAT,SAASA,KAAT,GAAiB;AAE9B,MAAIC,QAAQ,EAAZ;AACA,MAAIC,SAAS,CAAb;;AAGA,OAAKC,SAAL,GAAiB,YAAW;AAC1B,WAAOF,MAAMG,MAAN,GAAeF,MAAtB;AACD,GAFD;;AAKA,OAAKG,OAAL,GAAe,YAAW;AACxB,WAAOJ,MAAMG,MAAN,IAAgB,CAAvB;AACD,GAFD;;AAQA,OAAKE,OAAL,GAAe,UAASC,IAAT,EAAe;AAC5BN,UAAMO,IAAN,CAAWD,IAAX;AACD,GAFD;;AAOA,OAAKE,OAAL,GAAe,YAAW;AAExB,QAAIR,MAAMG,MAAN,IAAgB,CAApB,EAAuB,OAAOM,SAAP;;AAGvB,QAAIH,OAAON,MAAMC,MAAN,CAAX;;AAGA,QAAI,EAAEA,MAAF,GAAW,CAAX,IAAgBD,MAAMG,MAA1B,EAAkC;AAChCH,cAAQA,MAAMU,KAAN,CAAYT,MAAZ,CAAR;AACAA,eAAS,CAAT;AACD;;AAGD,WAAOK,IAAP;AACD,GAfD;;AAoBA,OAAKK,IAAL,GAAY,YAAW;AACrB,WAAOX,MAAMG,MAAN,GAAe,CAAf,GAAmBH,MAAMC,MAAN,CAAnB,GAAmCQ,SAA1C;AACD,GAFD;AAGD","sourcesContent":["/* eslint-disable */\n/*\n\nQueue.js\n\nA function to represent a queue\n\nCreated by Stephen Morley - http://code.stephenmorley.org/ - and released under\nthe terms of the CC0 1.0 Universal legal code:\n\nhttp://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n*/\n\n/* Creates a new queue. A queue is a first-in-first-out (FIFO) data structure -\n * items are added to the end of the queue and removed from the front.\n */\nexport default function Queue() {\n  // initialise the queue and offset\n  var queue = [];\n  var offset = 0;\n\n  // Returns the length of the queue.\n  this.getLength = function() {\n    return queue.length - offset;\n  };\n\n  // Returns true if the queue is empty, and false otherwise.\n  this.isEmpty = function() {\n    return queue.length == 0;\n  };\n\n  /* Enqueues the specified item. The parameter is:\n   *\n   * item - the item to enqueue\n   */\n  this.enqueue = function(item) {\n    queue.push(item);\n  };\n\n  /* Dequeues an item and returns it. If the queue is empty, the value\n   * 'undefined' is returned.\n   */\n  this.dequeue = function() {\n    // if the queue is empty, return immediately\n    if (queue.length == 0) return undefined;\n\n    // store the item at the front of the queue\n    var item = queue[offset];\n\n    // increment the offset and remove the free space if necessary\n    if (++offset * 2 >= queue.length) {\n      queue = queue.slice(offset);\n      offset = 0;\n    }\n\n    // return the dequeued item\n    return item;\n  };\n\n  /* Returns the item at the front of the queue (without dequeuing it). If the\n   * queue is empty then undefined is returned.\n   */\n  this.peek = function() {\n    return queue.length > 0 ? queue[offset] : undefined;\n  };\n}\n"]}]