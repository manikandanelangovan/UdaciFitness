["0c106860784e02c0bc8fc01f38c3ef88edd0db09","94ad664067f8400b331271fbea04e138b3d00620",["BatchedBridge","fbjs/lib/invariant","defineLazyObjectProperty"],[44,87,4081],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/BatchedBridge/NativeModules.js"],"names":["BatchedBridge","require","invariant","genModule","config","moduleID","moduleName","constants","methods","promiseMethods","syncMethods","startsWith","name","module","forEach","methodName","methodID","isPromise","arrayContains","isSync","methodType","genMethod","__DEV__","createDebugLookup","global","__fbGenNativeModule","loadModule","nativeRequireModuleConfig","info","type","fn","args","Promise","resolve","reject","enqueueNativeCall","data","errorData","createErrorFromErrorData","callSyncHook","lastArg","length","secondLastArg","hasSuccessCallback","hasErrorCallback","onSuccess","onFail","callbackCount","slice","array","value","indexOf","message","extraErrorInfo","error","Error","framesToPop","NativeModules","nativeModuleProxy","bridgeConfig","__fbBatchedBridgeConfig","defineLazyObjectProperty","remoteModuleConfig","get","exports"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,OAAhB,iBAAN;;AAEA,IAAMC,YAAYD,OAAZ,sBAAN;;AAcA,SAASE,SAAT,CAAmBC,MAAnB,EAA0CC,QAA1C,EAA8F;AAC5F,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAH2F,2CAKtBA,MALsB;AAAA,MAKrFE,UALqF;AAAA,MAKzEC,SALyE;AAAA,MAK9DC,OAL8D;AAAA,MAKrDC,cALqD;AAAA,MAKrCC,WALqC;;AAM5FR,YAAU,CAACI,WAAWK,UAAX,CAAsB,KAAtB,CAAD,IAAiC,CAACL,WAAWK,UAAX,CAAsB,IAAtB,CAA5C,EACE,sEACA,kBADA,GACqBL,UAFvB;;AAIA,MAAI,CAACC,SAAD,IAAc,CAACC,OAAnB,EAA4B;AAE1B,WAAO,EAAEI,MAAMN,UAAR,EAAP;AACD;;AAED,MAAMO,SAAS,EAAf;AACAL,aAAWA,QAAQM,OAAR,CAAgB,UAACC,UAAD,EAAaC,QAAb,EAA0B;AACnD,QAAMC,YAAYR,kBAAkBS,cAAcT,cAAd,EAA8BO,QAA9B,CAApC;AACA,QAAMG,SAAST,eAAeQ,cAAcR,WAAd,EAA2BM,QAA3B,CAA9B;AACAd,cAAU,CAACe,SAAD,IAAc,CAACE,MAAzB,EAAiC,yDAAjC;AACA,QAAMC,aAAaH,YAAY,SAAZ,GAAwBE,SAAS,MAAT,GAAkB,OAA7D;AACAN,WAAOE,UAAP,IAAqBM,UAAUhB,QAAV,EAAoBW,QAApB,EAA8BI,UAA9B,CAArB;AACD,GANU,CAAX;AAOA,uBAAcP,MAAd,EAAsBN,SAAtB;;AAEA,MAAIe,OAAJ,EAAa;AACXtB,kBAAcuB,iBAAd,CAAgClB,QAAhC,EAA0CC,UAA1C,EAAsDE,OAAtD;AACD;;AAED,SAAO,EAAEI,MAAMN,UAAR,EAAoBO,cAApB,EAAP;AACD;;AAGDW,OAAOC,mBAAP,GAA6BtB,SAA7B;;AAEA,SAASuB,UAAT,CAAoBd,IAApB,EAAkCP,QAAlC,EAA6D;AAC3DH,YAAUsB,OAAOG,yBAAjB,EACE,+DADF;AAEA,MAAMvB,SAASoB,OAAOG,yBAAP,CAAiCf,IAAjC,CAAf;AACA,MAAMgB,OAAOzB,UAAUC,MAAV,EAAkBC,QAAlB,CAAb;AACA,SAAOuB,QAAQA,KAAKf,MAApB;AACD;;AAED,SAASQ,SAAT,CAAmBhB,QAAnB,EAAqCW,QAArC,EAAuDa,IAAvD,EAAyE;AACvE,MAAIC,KAAK,IAAT;AACA,MAAID,SAAS,SAAb,EAAwB;AACtBC,SAAK,cAA8B;AAAA,wCAAlBC,IAAkB;AAAlBA,YAAkB;AAAA;;AACjC,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtClC,sBAAcmC,iBAAd,CAAgC9B,QAAhC,EAA0CW,QAA1C,EAAoDe,IAApD,EACE,UAACK,IAAD;AAAA,iBAAUH,QAAQG,IAAR,CAAV;AAAA,SADF,EAEE,UAACC,SAAD;AAAA,iBAAeH,OAAOI,yBAAyBD,SAAzB,CAAP,CAAf;AAAA,SAFF;AAGD,OAJM,CAAP;AAKD,KAND;AAOD,GARD,MAQO,IAAIR,SAAS,MAAb,EAAqB;AAC1BC,SAAK,cAA8B;AAAA,yCAAlBC,IAAkB;AAAlBA,YAAkB;AAAA;;AACjC,aAAO/B,cAAcuC,YAAd,CAA2BlC,QAA3B,EAAqCW,QAArC,EAA+Ce,IAA/C,CAAP;AACD,KAFD;AAGD,GAJM,MAIA;AACLD,SAAK,cAA8B;AAAA,yCAAlBC,IAAkB;AAAlBA,YAAkB;AAAA;;AACjC,UAAMS,UAAUT,KAAKU,MAAL,GAAc,CAAd,GAAkBV,KAAKA,KAAKU,MAAL,GAAc,CAAnB,CAAlB,GAA0C,IAA1D;AACA,UAAMC,gBAAgBX,KAAKU,MAAL,GAAc,CAAd,GAAkBV,KAAKA,KAAKU,MAAL,GAAc,CAAnB,CAAlB,GAA0C,IAAhE;AACA,UAAME,qBAAqB,OAAOH,OAAP,KAAmB,UAA9C;AACA,UAAMI,mBAAmB,OAAOF,aAAP,KAAyB,UAAlD;AACAE,0BAAoB1C,UAClByC,kBADkB,EAElB,sDAFkB,CAApB;AAIA,UAAME,YAAYF,qBAAqBH,OAArB,GAA+B,IAAjD;AACA,UAAMM,SAASF,mBAAmBF,aAAnB,GAAmC,IAAlD;AACA,UAAMK,gBAAgBJ,qBAAqBC,gBAA3C;AACAb,aAAOA,KAAKiB,KAAL,CAAW,CAAX,EAAcjB,KAAKU,MAAL,GAAcM,aAA5B,CAAP;AACA/C,oBAAcmC,iBAAd,CAAgC9B,QAAhC,EAA0CW,QAA1C,EAAoDe,IAApD,EAA0De,MAA1D,EAAkED,SAAlE;AACD,KAdD;AAeD;AACDf,KAAGD,IAAH,GAAUA,IAAV;AACA,SAAOC,EAAP;AACD;;AAED,SAASZ,aAAT,CAA0B+B,KAA1B,EAA2CC,KAA3C,EAA8D;AAC5D,SAAOD,MAAME,OAAN,CAAcD,KAAd,MAAyB,CAAC,CAAjC;AACD;;AAED,SAASZ,wBAAT,CAAkCD,SAAlC,EAA+E;AAAA,aAIzEA,aAAa,EAJ4D;AAAA,MAE3Ee,OAF2E,QAE3EA,OAF2E;AAAA,MAGxEC,cAHwE;;AAK7E,MAAMC,QAAwB,IAAIC,KAAJ,CAAUH,OAAV,CAA9B;AACAE,QAAME,WAAN,GAAoB,CAApB;AACA,SAAO,qBAAcF,KAAd,EAAqBD,cAArB,CAAP;AACD;;AAED,IAAII,gBAAiD,EAArD;AACA,IAAIjC,OAAOkC,iBAAX,EAA8B;AAC5BD,kBAAgBjC,OAAOkC,iBAAvB;AACD,CAFD,MAEO;AACL,MAAMC,eAAenC,OAAOoC,uBAA5B;AACA1D,YAAUyD,YAAV,EAAwB,kEAAxB;;AAEA,MAAME,2BAA2B5D,OAA3B,4BAAN;AACA,GAAC0D,aAAaG,kBAAb,IAAmC,EAApC,EAAwChD,OAAxC,CAAgD,UAACV,MAAD,EAAuBC,QAAvB,EAA4C;AAG1F,QAAMuB,OAAOzB,UAAUC,MAAV,EAAkBC,QAAlB,CAAb;AACA,QAAI,CAACuB,IAAL,EAAW;AACT;AACD;;AAED,QAAIA,KAAKf,MAAT,EAAiB;AACf4C,oBAAc7B,KAAKhB,IAAnB,IAA2BgB,KAAKf,MAAhC;AACD,KAFD,MAIK;AACHgD,iCAAyBJ,aAAzB,EAAwC7B,KAAKhB,IAA7C,EAAmD;AACjDmD,eAAK;AAAA,mBAAMrC,WAAWE,KAAKhB,IAAhB,EAAsBP,QAAtB,CAAN;AAAA;AAD4C,SAAnD;AAGD;AACF,GAjBD;AAkBD;;AAEDQ,OAAOmD,OAAP,GAAiBP,aAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NativeModules\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {ExtendedError} from 'parseErrorStack';\n\ntype ModuleConfig = [\n  string, /* name */\n  ?Object, /* constants */\n  Array<string>, /* functions */\n  Array<number>, /* promise method IDs */\n  Array<number>, /* sync method IDs */\n];\n\nexport type MethodType = 'async' | 'promise' | 'sync';\n\nfunction genModule(config: ?ModuleConfig, moduleID: number): ?{name: string, module?: Object} {\n  if (!config) {\n    return null;\n  }\n\n  const [moduleName, constants, methods, promiseMethods, syncMethods] = config;\n  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'),\n    'Module name prefixes should\\'ve been stripped by the native side ' +\n    'but wasn\\'t for ' + moduleName);\n\n  if (!constants && !methods) {\n    // Module contents will be filled in lazily later\n    return { name: moduleName };\n  }\n\n  const module = {};\n  methods && methods.forEach((methodName, methodID) => {\n    const isPromise = promiseMethods && arrayContains(promiseMethods, methodID);\n    const isSync = syncMethods && arrayContains(syncMethods, methodID);\n    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');\n    const methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';\n    module[methodName] = genMethod(moduleID, methodID, methodType);\n  });\n  Object.assign(module, constants);\n\n  if (__DEV__) {\n    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);\n  }\n\n  return { name: moduleName, module };\n}\n\n// export this method as a global so we can call it from native\nglobal.__fbGenNativeModule = genModule;\n\nfunction loadModule(name: string, moduleID: number): ?Object {\n  invariant(global.nativeRequireModuleConfig,\n    'Can\\'t lazily create module without nativeRequireModuleConfig');\n  const config = global.nativeRequireModuleConfig(name);\n  const info = genModule(config, moduleID);\n  return info && info.module;\n}\n\nfunction genMethod(moduleID: number, methodID: number, type: MethodType) {\n  let fn = null;\n  if (type === 'promise') {\n    fn = function(...args: Array<any>) {\n      return new Promise((resolve, reject) => {\n        BatchedBridge.enqueueNativeCall(moduleID, methodID, args,\n          (data) => resolve(data),\n          (errorData) => reject(createErrorFromErrorData(errorData)));\n      });\n    };\n  } else if (type === 'sync') {\n    fn = function(...args: Array<any>) {\n      return BatchedBridge.callSyncHook(moduleID, methodID, args);\n    };\n  } else {\n    fn = function(...args: Array<any>) {\n      const lastArg = args.length > 0 ? args[args.length - 1] : null;\n      const secondLastArg = args.length > 1 ? args[args.length - 2] : null;\n      const hasSuccessCallback = typeof lastArg === 'function';\n      const hasErrorCallback = typeof secondLastArg === 'function';\n      hasErrorCallback && invariant(\n        hasSuccessCallback,\n        'Cannot have a non-function arg after a function arg.'\n      );\n      const onSuccess = hasSuccessCallback ? lastArg : null;\n      const onFail = hasErrorCallback ? secondLastArg : null;\n      const callbackCount = hasSuccessCallback + hasErrorCallback;\n      args = args.slice(0, args.length - callbackCount);\n      BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);\n    };\n  }\n  fn.type = type;\n  return fn;\n}\n\nfunction arrayContains<T>(array: Array<T>, value: T): boolean {\n  return array.indexOf(value) !== -1;\n}\n\nfunction createErrorFromErrorData(errorData: {message: string}): ExtendedError {\n  const {\n    message,\n    ...extraErrorInfo\n  } = errorData || {};\n  const error : ExtendedError = new Error(message);\n  error.framesToPop = 1;\n  return Object.assign(error, extraErrorInfo);\n}\n\nlet NativeModules : {[moduleName: string]: Object} = {};\nif (global.nativeModuleProxy) {\n  NativeModules = global.nativeModuleProxy;\n} else {\n  const bridgeConfig = global.__fbBatchedBridgeConfig;\n  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');\n\n  const defineLazyObjectProperty = require('defineLazyObjectProperty');\n  (bridgeConfig.remoteModuleConfig || []).forEach((config: ModuleConfig, moduleID: number) => {\n    // Initially this config will only contain the module name when running in JSC. The actual\n    // configuration of the module will be lazily loaded.\n    const info = genModule(config, moduleID);\n    if (!info) {\n      return;\n    }\n\n    if (info.module) {\n      NativeModules[info.name] = info.module;\n    }\n    // If there's no module config, define a lazy getter\n    else {\n      defineLazyObjectProperty(NativeModules, info.name, {\n        get: () => loadModule(info.name, moduleID)\n      });\n    }\n  });\n}\n\nmodule.exports = NativeModules;\n"]}]