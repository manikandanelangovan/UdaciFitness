["09a940d38d1133d27150b7e8ed95150b722a78a8","1dfbda4cee653a7df3ee6c111638e191c0f50242",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/local-cli/bundle/assetPathUtils.js"],"names":["getAndroidAssetSuffix","scale","Error","getAndroidDrawableFolderName","asset","suffix","JSON","stringify","androidFolder","getAndroidResourceIdentifier","folderPath","getBasePath","name","toLowerCase","replace","basePath","httpServerLocation","substr","module","exports"],"mappings":";;AAWA;;AAQA,SAASA,qBAAT,CAA+BC,KAA/B,EAAsD;AACpD,UAAQA,KAAR;AACE,SAAK,IAAL;AAAW,aAAO,MAAP;AACX,SAAK,CAAL;AAAQ,aAAO,MAAP;AACR,SAAK,GAAL;AAAU,aAAO,MAAP;AACV,SAAK,CAAL;AAAQ,aAAO,OAAP;AACR,SAAK,CAAL;AAAQ,aAAO,QAAP;AACR,SAAK,CAAL;AAAQ,aAAO,SAAP;AANV;AAQA,QAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,SAASC,4BAAT,CAAsCC,KAAtC,EAA4DH,KAA5D,EAA2E;AACzE,MAAII,SAASL,sBAAsBC,KAAtB,CAAb;AACA,MAAI,CAACI,MAAL,EAAa;AACX,UAAM,IAAIH,KAAJ,CACJ,iEACAI,KAAKC,SAAL,CAAeH,KAAf,CAFI,CAAN;AAID;AACD,MAAMI,gBAAgB,cAAcH,MAApC;AACA,SAAOG,aAAP;AACD;;AAED,SAASC,4BAAT,CAAsCL,KAAtC,EAA4D;AAC1D,MAAIM,aAAaC,YAAYP,KAAZ,CAAjB;AACA,SAAO,CAACM,aAAa,GAAb,GAAmBN,MAAMQ,IAA1B,EACJC,WADI,GAEJC,OAFI,CAEI,KAFJ,EAEW,GAFX,EAGJA,OAHI,CAGI,eAHJ,EAGqB,EAHrB,EAIJA,OAJI,CAII,UAJJ,EAIgB,EAJhB,CAAP;AAKD;;AAED,SAASH,WAAT,CAAqBP,KAArB,EAA2C;AACzC,MAAIW,WAAWX,MAAMY,kBAArB;AACA,MAAID,SAAS,CAAT,MAAgB,GAApB,EAAyB;AACvBA,eAAWA,SAASE,MAAT,CAAgB,CAAhB,CAAX;AACD;AACD,SAAOF,QAAP;AACD;;AAEDG,OAAOC,OAAP,GAAiB;AACfnB,yBAAuBA,qBADR;AAEfG,gCAA8BA,4BAFf;AAGfM,gCAA8BA,4BAHf;AAIfE,eAAaA;AAJE,CAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n'use strict';\n\nimport type {PackagerAsset} from '../../Libraries/Image/AssetRegistry';\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale: number): string {\n  switch (scale) {\n    case 0.75: return 'ldpi';\n    case 1: return 'mdpi';\n    case 1.5: return 'hdpi';\n    case 2: return 'xhdpi';\n    case 3: return 'xxhdpi';\n    case 4: return 'xxxhdpi';\n  }\n  throw new Error('no such scale');\n}\n\nfunction getAndroidDrawableFolderName(asset: PackagerAsset, scale: number) {\n  var suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(\n      'Don\\'t know which android drawable suffix to use for asset: ' +\n      JSON.stringify(asset)\n    );\n  }\n  const androidFolder = 'drawable-' + suffix;\n  return androidFolder;\n}\n\nfunction getAndroidResourceIdentifier(asset: PackagerAsset) {\n  var folderPath = getBasePath(asset);\n  return (folderPath + '/' + asset.name)\n    .toLowerCase()\n    .replace(/\\//g, '_')           // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '')  // Remove illegal chars\n    .replace(/^assets_/, '');      // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset: PackagerAsset) {\n  var basePath = asset.httpServerLocation;\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n  return basePath;\n}\n\nmodule.exports = {\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\n  getAndroidDrawableFolderName: getAndroidDrawableFolderName,\n  getAndroidResourceIdentifier: getAndroidResourceIdentifier,\n  getBasePath: getBasePath\n};\n"]}]