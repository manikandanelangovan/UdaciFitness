["77b825c5917cfa25ee93d4e42ee3a9a09cf58688","0722087318de9a4f09424cf99b5f2c38d04dc11d",["fbjs/lib/invariant"],[40],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Utilities/RCTLog.js"],"names":["invariant","require","levelsMap","log","info","warn","error","fatal","warningHandler","RCTLog","logIfNoNativeHook","level","args","global","nativeLoggingHook","logToConsole","logFn","Object","keys","toString","setWarningHandler","handler","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,YAAYC,OAAZ,sBAAN;;AAEA,IAAMC,YAAY;AAChBC,OAAK,KADW;AAEhBC,QAAM,MAFU;AAGhBC,QAAM,MAHU;AAIhBC,SAAO,OAJS;AAKhBC,SAAO;AALS,CAAlB;;AAQA,IAAIC,iBAAwC,IAA5C;;AAEA,IAAMC,SAAS;AAEbC,mBAFa,6BAEKC,KAFL,EAE+C;AAAA,sCAAxBC,IAAwB;AAAxBA,UAAwB;AAAA;;AAE1D,QAAI,OAAOC,OAAOC,iBAAd,KAAoC,WAAxC,EAAqD;AACnDL,aAAOM,YAAP,gBAAoBJ,KAApB,wCAA8BC,IAA9B;AACD,KAFD,MAEO;AAEL,UAAIJ,kBAAkBG,UAAU,MAAhC,EAAwC;AACtCH,uEAAkBI,IAAlB;AACD;AACF;AACF,GAZY;AAebG,cAfa,wBAeAJ,KAfA,EAe0C;AAAA;;AACrD,QAAMK,QAAQd,UAAUS,KAAV,CAAd;AACAX,cACEgB,KADF,EAEE,YAAYL,KAAZ,GAAoB,eAApB,GAAsCM,OAAOC,IAAP,CAAYhB,SAAZ,EAAuBiB,QAAvB,EAFxC;;AAFqD,uCAAxBP,IAAwB;AAAxBA,UAAwB;AAAA;;AAOrD,yBAAQI,KAAR,iDAAkBJ,IAAlB;AACD,GAvBY;AAyBbQ,mBAzBa,6BAyBKC,OAzBL,EAyB2C;AACtDb,qBAAiBa,OAAjB;AACD;AA3BY,CAAf;;AA8BAC,OAAOC,OAAP,GAAiBd,MAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTLog\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error',\n};\n\nlet warningHandler: ?(Array<any> => void) = null;\n\nconst RCTLog = {\n  // level one of log, info, warn, error, mustfix\n  logIfNoNativeHook(level: string, ...args: Array<any>): void {\n    // We already printed in the native console, so only log here if using a js debugger\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      // Report native warnings to YellowBox\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n\n  // Log to console regardless of nativeLoggingHook\n  logToConsole(level: string, ...args: Array<any>): void {\n    const logFn = levelsMap[level];\n    invariant(\n      logFn,\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString()\n    );\n\n    console[logFn](...args);\n  },\n\n  setWarningHandler(handler: typeof warningHandler): void {\n    warningHandler = handler;\n  }\n}\n\nmodule.exports = RCTLog;\n"]}]