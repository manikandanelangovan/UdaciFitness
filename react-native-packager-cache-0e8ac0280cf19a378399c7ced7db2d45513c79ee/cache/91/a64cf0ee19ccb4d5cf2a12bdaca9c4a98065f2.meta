["6f5a4fc5172dfbc798cd6215e4222600499fabc5","fc35674ba7deefb1d2fb534b1fdbf3489581f84e",["Map","NativeEventEmitter","NativeModules","Platform"],[34,75,126,167],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Network/NetInfo.js"],"names":["Map","require","NativeEventEmitter","NativeModules","Platform","RCTNetInfo","NetInfo","NetInfoEventEmitter","DEVICE_CONNECTIVITY_EVENT","_subscriptions","_isConnectedDeprecated","OS","reachability","connectionType","_isConnected","connection","type","_isConnectedSubscriptions","addEventListener","eventName","handler","listener","addListener","appStateData","effectiveType","effectiveConnectionType","console","warn","network_info","remove","set","removeEventListener","get","delete","fetch","getCurrentConnectivity","then","resp","getConnectionInfo","isConnected","isConnectionExpensive","isConnectionMetered","Promise","reject","Error","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NetInfo\n * @flow\n */\n'use strict';\n\nconst Map = require('Map');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\nconst RCTNetInfo = NativeModules.NetInfo;\n\nconst NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);\n\nconst DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';\n\ntype ChangeEventName = $Enum<{\n  connectionChange: string,\n  change: string,\n}>;\n\ntype ReachabilityStateIOS = $Enum<{\n  cell: string,\n  none: string,\n  unknown: string,\n  wifi: string,\n}>;\n\ntype ConnectivityStateAndroid = $Enum<{\n  NONE: string,\n  MOBILE: string,\n  WIFI: string,\n  MOBILE_MMS: string,\n  MOBILE_SUPL: string,\n  MOBILE_DUN: string,\n  MOBILE_HIPRI: string,\n  WIMAX: string,\n  BLUETOOTH: string,\n  DUMMY: string,\n  ETHERNET: string,\n  MOBILE_FOTA: string,\n  MOBILE_IMS: string,\n  MOBILE_CBS: string,\n  WIFI_P2P: string,\n  MOBILE_IA: string,\n  MOBILE_EMERGENCY: string,\n  PROXY: string,\n  VPN: string,\n  UNKNOWN: string,\n}>;\n\n\nconst _subscriptions = new Map();\n\nlet _isConnectedDeprecated;\nif (Platform.OS === 'ios') {\n  _isConnectedDeprecated = function(\n    reachability: ReachabilityStateIOS,\n  ): bool {\n    return reachability !== 'none' && reachability !== 'unknown';\n  };\n} else if (Platform.OS === 'android') {\n  _isConnectedDeprecated = function(\n      connectionType: ConnectivityStateAndroid,\n    ): bool {\n    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';\n  };\n}\n\nfunction _isConnected(connection) {\n  return connection.type !== 'none' && connection.type !== 'unknown';\n}\n\nconst _isConnectedSubscriptions = new Map();\n\n/**\n * NetInfo exposes info about online/offline status\n *\n * ```\n * NetInfo.getConnectionInfo().then((connectionInfo) => {\n *   console.log('Initial, type: ' + connectionInfo.type + ', effectiveType: ' + connectionInfo.effectiveType);\n * });\n * function handleFirstConnectivityChange(connectionInfo) {\n *   console.log('First change, type: ' + connectionInfo.type + ', effectiveType: ' + connectionInfo.effectiveType);\n *   NetInfo.removeEventListener(\n *     'connectionChange',\n *     handleFirstConnectivityChange\n *   );\n * }\n * NetInfo.addEventListener(\n *   'connectionChange',\n *   handleFirstConnectivityChange\n * );\n * ```\n *\n * ### ConnectionType enum\n *\n * `ConnectionType` describes the type of connection the device is using to communicate with the network.\n *\n * Cross platform values for `ConnectionType`:\n * - `none` - device is offline\n * - `wifi` - device is online and connected via wifi, or is the iOS simulator\n * - `cellular` - device is connected via Edge, 3G, WiMax, or LTE\n * - `unknown` - error case and the network status is unknown\n *\n * Android-only values for `ConnectionType`:\n * - `bluetooth` - device is connected via Bluetooth\n * - `ethernet` - device is connected via Ethernet\n * - `wimax` - device is connected via WiMAX\n *\n * ### EffectiveConnectionType enum\n *\n * Cross platform values for `EffectiveConnectionType`:\n * - `2g`\n * - `3g`\n * - `4g`\n * - `unknown`\n *\n * ### Android\n *\n * To request network info, you need to add the following line to your\n * app's `AndroidManifest.xml`:\n *\n * `<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />`\n *\n * ### isConnectionExpensive\n *\n * Available on Android. Detect if the current active connection is metered or not. A network is\n * classified as metered when the user is sensitive to heavy data usage on that connection due to\n * monetary costs, data limitations or battery/performance issues.\n *\n * ```\n * NetInfo.isConnectionExpensive()\n * .then(isConnectionExpensive => {\n *   console.log('Connection is ' + (isConnectionExpensive ? 'Expensive' : 'Not Expensive'));\n * })\n * .catch(error => {\n *   console.error(error);\n * });\n * ```\n *\n * ### isConnected\n *\n * Available on all platforms. Asynchronously fetch a boolean to determine\n * internet connectivity.\n *\n * ```\n * NetInfo.isConnected.fetch().then(isConnected => {\n *   console.log('First, is ' + (isConnected ? 'online' : 'offline'));\n * });\n * function handleFirstConnectivityChange(isConnected) {\n *   console.log('Then, is ' + (isConnected ? 'online' : 'offline'));\n *   NetInfo.isConnected.removeEventListener(\n *     'change',\n *     handleFirstConnectivityChange\n *   );\n * }\n * NetInfo.isConnected.addEventListener(\n *   'change',\n *   handleFirstConnectivityChange\n * );\n * ```\n *\n * ### Connectivity Types (deprecated)\n *\n * The following connectivity types are deprecated. They're used by the deprecated APIs `fetch` and the `change` event.\n *\n * iOS connectivity types (deprecated):\n * - `none` - device is offline\n * - `wifi` - device is online and connected via wifi, or is the iOS simulator\n * - `cell` - device is connected via Edge, 3G, WiMax, or LTE\n * - `unknown` - error case and the network status is unknown\n *\n * Android connectivity types (deprecated).\n * - `NONE` - device is offline\n * - `BLUETOOTH` - The Bluetooth data connection.\n * - `DUMMY` -  Dummy data connection.\n * - `ETHERNET` - The Ethernet data connection.\n * - `MOBILE` - The Mobile data connection.\n * - `MOBILE_DUN` - A DUN-specific Mobile data connection.\n * - `MOBILE_HIPRI` - A High Priority Mobile data connection.\n * - `MOBILE_MMS` - An MMS-specific Mobile data connection.\n * - `MOBILE_SUPL` -  A SUPL-specific Mobile data connection.\n * - `VPN` -  A virtual network using one or more native bearers. Requires API Level 21\n * - `WIFI` - The WIFI data connection.\n * - `WIMAX` -  The WiMAX data connection.\n * - `UNKNOWN` - Unknown data connection.\n *\n * The rest of the connectivity types are hidden by the Android API, but can be used if necessary.\n */\nconst NetInfo = {\n  /**\n   * Adds an event handler. Supported events:\n   *\n   * - `connectionChange`: Fires when the network status changes. The argument to the event\n   *   handler is an object with keys:\n   *   - `type`: A `ConnectionType` (listed above)\n   *   - `effectiveType`: An `EffectiveConnectionType` (listed above)\n   * - `change`: This event is deprecated. Listen to `connectionChange` instead. Fires when\n   *   the network status changes. The argument to the event handler is one of the deprecated\n   *   connectivity types listed above.\n   */\n  addEventListener(\n    eventName: ChangeEventName,\n    handler: Function\n  ): {remove: () => void} {\n    let listener;\n    if (eventName === 'connectionChange') {\n      listener = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        (appStateData) => {\n          handler({\n            type: appStateData.connectionType,\n            effectiveType: appStateData.effectiveConnectionType\n          });\n        }\n      );\n    } else if (eventName === 'change') {\n      console.warn('NetInfo\\'s \"change\" event is deprecated. Listen to the \"connectionChange\" event instead.');\n\n      listener = NetInfoEventEmitter.addListener(\n        DEVICE_CONNECTIVITY_EVENT,\n        (appStateData) => {\n          handler(appStateData.network_info);\n        }\n      );\n    } else {\n      console.warn('Trying to subscribe to unknown event: \"' + eventName + '\"');\n      return {\n        remove: () => {}\n      };\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: () => NetInfo.removeEventListener(eventName, handler)\n    };\n  },\n\n  /**\n   * Removes the listener for network status changes.\n   */\n  removeEventListener(\n    eventName: ChangeEventName,\n    handler: Function\n  ): void {\n    const listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n  /**\n   * This function is deprecated. Use `getConnectionInfo` instead. Returns a promise that\n   * resolves with one of the deprecated connectivity types listed above.\n   */\n  fetch(): Promise<any> {\n    console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');\n    return RCTNetInfo.getCurrentConnectivity().then(resp => resp.network_info);\n  },\n\n  /**\n   * Returns a promise that resolves to an object with `type` and `effectiveType` keys\n   * whose values are a `ConnectionType` and an `EffectiveConnectionType`, (described above),\n   * respectively.\n   */\n  getConnectionInfo(): Promise<any> {\n    return RCTNetInfo.getCurrentConnectivity().then(resp => {\n      return {\n        type: resp.connectionType,\n        effectiveType: resp.effectiveConnectionType,\n      };\n    });\n  },\n\n  /**\n   * An object with the same methods as above but the listener receives a\n   * boolean which represents the internet connectivity.\n   * Use this if you are only interested with whether the device has internet\n   * connectivity.\n   */\n  isConnected: {\n    addEventListener(\n      eventName: ChangeEventName,\n      handler: Function\n    ): {remove: () => void} {\n      const listener = (connection) => {\n        if (eventName === 'change') {\n          handler(_isConnectedDeprecated(connection));\n        } else if (eventName === 'connectionChange') {\n          handler(_isConnected(connection));\n        }\n      };\n      _isConnectedSubscriptions.set(handler, listener);\n      NetInfo.addEventListener(\n        eventName,\n        listener\n      );\n      return {\n        remove: () => NetInfo.isConnected.removeEventListener(eventName, handler)\n      };\n    },\n\n    removeEventListener(\n      eventName: ChangeEventName,\n      handler: Function\n    ): void {\n      const listener = _isConnectedSubscriptions.get(handler);\n      NetInfo.removeEventListener(\n        eventName,\n        /* $FlowFixMe(>=0.36.0 site=react_native_fb,react_native_oss) Flow error\n         * detected during the deploy of Flow v0.36.0. To see the error, remove\n         * this comment and run Flow */\n        listener\n      );\n      _isConnectedSubscriptions.delete(handler);\n    },\n\n    fetch(): Promise<any> {\n      return NetInfo.getConnectionInfo().then(_isConnected);\n    },\n  },\n\n  isConnectionExpensive(): Promise<boolean> {\n    return (\n      Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'))\n    );\n  },\n};\n\nmodule.exports = NetInfo;\n"]}]