["5ec4e55a1fe4fd542b8699808e6fffef9c69ab42","e977924b160b4f08bf2c6efe7b3abf7fe3b331d2",["./lib/rng","./lib/bytesToUuid"],[18,58],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/uuid/v1.js"],"names":["rng","require","bytesToUuid","_seedBytes","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","clockseq","undefined","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","node","n","module","exports"],"mappings":"AAAA,IAAIA,MAAMC,QAAQ,WAAR,CAAV;AACA,IAAIC,cAAcD,QAAQ,mBAAR,CAAlB;;AAQA,IAAIE,aAAaH,KAAjB;;AAGA,IAAII,UAAU,CACZD,WAAW,CAAX,IAAgB,IADJ,EAEZA,WAAW,CAAX,CAFY,EAEGA,WAAW,CAAX,CAFH,EAEkBA,WAAW,CAAX,CAFlB,EAEiCA,WAAW,CAAX,CAFjC,EAEgDA,WAAW,CAAX,CAFhD,CAAd;;AAMA,IAAIE,YAAY,CAACF,WAAW,CAAX,KAAiB,CAAjB,GAAqBA,WAAW,CAAX,CAAtB,IAAuC,MAAvD;;AAGA,IAAIG,aAAa,CAAjB;AAAA,IAAoBC,aAAa,CAAjC;;AAGA,SAASC,EAAT,CAAYC,OAAZ,EAAqBC,GAArB,EAA0BC,MAA1B,EAAkC;AAChC,MAAIC,IAAIF,OAAOC,MAAP,IAAiB,CAAzB;AACA,MAAIE,IAAIH,OAAO,EAAf;;AAEAD,YAAUA,WAAW,EAArB;;AAEA,MAAIK,WAAWL,QAAQK,QAAR,KAAqBC,SAArB,GAAiCN,QAAQK,QAAzC,GAAoDT,SAAnE;;AAMA,MAAIW,QAAQP,QAAQO,KAAR,KAAkBD,SAAlB,GAA8BN,QAAQO,KAAtC,GAA8C,IAAIC,IAAJ,GAAWC,OAAX,EAA1D;;AAIA,MAAIC,QAAQV,QAAQU,KAAR,KAAkBJ,SAAlB,GAA8BN,QAAQU,KAAtC,GAA8CZ,aAAa,CAAvE;;AAGA,MAAIa,KAAMJ,QAAQV,UAAT,GAAuB,CAACa,QAAQZ,UAAT,IAAqB,KAArD;;AAGA,MAAIa,KAAK,CAAL,IAAUX,QAAQK,QAAR,KAAqBC,SAAnC,EAA8C;AAC5CD,eAAWA,WAAW,CAAX,GAAe,MAA1B;AACD;;AAID,MAAI,CAACM,KAAK,CAAL,IAAUJ,QAAQV,UAAnB,KAAkCG,QAAQU,KAAR,KAAkBJ,SAAxD,EAAmE;AACjEI,YAAQ,CAAR;AACD;;AAGD,MAAIA,SAAS,KAAb,EAAoB;AAClB,UAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAEDf,eAAaU,KAAb;AACAT,eAAaY,KAAb;AACAd,cAAYS,QAAZ;;AAGAE,WAAS,cAAT;;AAGA,MAAIM,KAAK,CAAC,CAACN,QAAQ,SAAT,IAAsB,KAAtB,GAA8BG,KAA/B,IAAwC,WAAjD;AACAN,IAAED,GAAF,IAASU,OAAO,EAAP,GAAY,IAArB;AACAT,IAAED,GAAF,IAASU,OAAO,EAAP,GAAY,IAArB;AACAT,IAAED,GAAF,IAASU,OAAO,CAAP,GAAW,IAApB;AACAT,IAAED,GAAF,IAASU,KAAK,IAAd;;AAGA,MAAIC,MAAOP,QAAQ,WAAR,GAAsB,KAAvB,GAAgC,SAA1C;AACAH,IAAED,GAAF,IAASW,QAAQ,CAAR,GAAY,IAArB;AACAV,IAAED,GAAF,IAASW,MAAM,IAAf;;AAGAV,IAAED,GAAF,IAASW,QAAQ,EAAR,GAAa,GAAb,GAAmB,IAA5B;AACAV,IAAED,GAAF,IAASW,QAAQ,EAAR,GAAa,IAAtB;;AAGAV,IAAED,GAAF,IAASE,aAAa,CAAb,GAAiB,IAA1B;;AAGAD,IAAED,GAAF,IAASE,WAAW,IAApB;;AAGA,MAAIU,OAAOf,QAAQe,IAAR,IAAgBpB,OAA3B;AACA,OAAK,IAAIqB,IAAI,CAAb,EAAgBA,IAAI,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1BZ,MAAED,IAAIa,CAAN,IAAWD,KAAKC,CAAL,CAAX;AACD;;AAED,SAAOf,MAAMA,GAAN,GAAYR,YAAYW,CAAZ,CAAnB;AACD;;AAEDa,OAAOC,OAAP,GAAiBnB,EAAjB","sourcesContent":["var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n"]}]