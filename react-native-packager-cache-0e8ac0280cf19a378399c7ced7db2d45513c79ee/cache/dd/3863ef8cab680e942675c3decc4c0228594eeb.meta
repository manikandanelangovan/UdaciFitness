["b42f4e39d1d4828243b5434445e6f05cb1e9bb35","c1f29b609a5369928d6a1db4b9847584673e3e27",["NativeModules","Promise","RCTDeviceEventEmitter"],[44,84,132],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.ios.js"],"names":["NativeModules","require","Promise","RCTDeviceEventEmitter","AccessibilityManager","VOICE_OVER_EVENT","ANNOUNCEMENT_DID_FINISH_EVENT","_subscriptions","Map","AccessibilityInfo","fetch","resolve","reject","getCurrentVoiceOverState","addEventListener","eventName","handler","listener","addListener","set","remove","removeEventListener","bind","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","get","delete","module","exports"],"mappings":";AAWA;;AAEA,IAAIA,gBAAgBC,OAAhB,iBAAJ;AACA,IAAIC,UAAUD,OAAV,WAAJ;AACA,IAAIE,wBAAwBF,OAAxB,yBAAJ;;AAEA,IAAIG,uBAAuBJ,cAAcI,oBAAzC;;AAEA,IAAIC,mBAAmB,oBAAvB;AACA,IAAIC,gCAAgC,uBAApC;;AAOA,IAAIC,iBAAiB,IAAIC,GAAJ,EAArB;;AAoDA,IAAIC,oBAAoB;AAOtBC,SAAO,iBAAoB;AACzB,WAAO,IAAIR,OAAJ,CAAY,UAACS,OAAD,EAAUC,MAAV,EAAqB;AACtCR,2BAAqBS,wBAArB,CACEF,OADF,EAEEC,MAFF;AAID,KALM,CAAP;AAMD,GAdqB;;AA4BtBE,oBAAkB,0BAChBC,SADgB,EAEhBC,OAFgB,EAGR;AACR,QAAIC,QAAJ;;AAEA,QAAIF,cAAc,QAAlB,EAA4B;AAC1BE,iBAAWd,sBAAsBe,WAAtB,CACTb,gBADS,EAETW,OAFS,CAAX;AAID,KALD,MAKO,IAAID,cAAc,sBAAlB,EAA0C;AAC/CE,iBAAWd,sBAAsBe,WAAtB,CACTZ,6BADS,EAETU,OAFS,CAAX;AAID;;AAEDT,mBAAeY,GAAf,CAAmBH,OAAnB,EAA4BC,QAA5B;AACA,WAAO;AACLG,cAAQX,kBAAkBY,mBAAlB,CAAsCC,IAAtC,CAA2C,IAA3C,EAAiDP,SAAjD,EAA4DC,OAA5D;AADH,KAAP;AAGD,GAlDqB;;AAuDtBO,yBAAuB,+BACrBC,QADqB,EAEf;AACNpB,yBAAqBmB,qBAArB,CAA2CC,QAA3C;AACD,GA3DqB;;AAgEtBC,4BAA0B,kCACxBC,YADwB,EAElB;AACNtB,yBAAqBqB,wBAArB,CAA8CC,YAA9C;AACD,GApEqB;;AAyEtBL,uBAAqB,6BACnBN,SADmB,EAEnBC,OAFmB,EAGb;AACN,QAAIC,WAAWV,eAAeoB,GAAf,CAAmBX,OAAnB,CAAf;AACA,QAAI,CAACC,QAAL,EAAe;AACb;AACD;AACDA,aAASG,MAAT;AACAb,mBAAeqB,MAAf,CAAsBZ,OAAtB;AACD;;AAnFqB,CAAxB;;AAuFAa,OAAOC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AccessibilityInfo\n * @flow\n */\n'use strict';\n\nvar NativeModules = require('NativeModules');\nvar Promise = require('Promise');\nvar RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nvar AccessibilityManager = NativeModules.AccessibilityManager;\n\nvar VOICE_OVER_EVENT = 'voiceOverDidChange';\nvar ANNOUNCEMENT_DID_FINISH_EVENT = 'announcementDidFinish';\n\ntype ChangeEventName = $Enum<{\n  change: string,\n  announcementFinished: string\n}>;\n\nvar _subscriptions = new Map();\n\n/**\n * Sometimes it's useful to know whether or not the device has a screen reader that is currently active. The\n * `AccessibilityInfo` API is designed for this purpose. You can use it to query the current state of the\n * screen reader as well as to register to be notified when the state of the screen reader changes.\n *\n * Here's a small example illustrating how to use `AccessibilityInfo`:\n *\n * ```javascript\n * class ScreenReaderStatusExample extends React.Component {\n *   state = {\n *     screenReaderEnabled: false,\n *   }\n *\n *   componentDidMount() {\n *     AccessibilityInfo.addEventListener(\n *       'change',\n *       this._handleScreenReaderToggled\n *     );\n *     AccessibilityInfo.fetch().done((isEnabled) => {\n *       this.setState({\n *         screenReaderEnabled: isEnabled\n *       });\n *     });\n *   }\n *\n *   componentWillUnmount() {\n *     AccessibilityInfo.removeEventListener(\n *       'change',\n *       this._handleScreenReaderToggled\n *     );\n *   }\n *\n *   _handleScreenReaderToggled = (isEnabled) => {\n *     this.setState({\n *       screenReaderEnabled: isEnabled,\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <View>\n *         <Text>\n *           The screen reader is {this.state.screenReaderEnabled ? 'enabled' : 'disabled'}.\n *         </Text>\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nvar AccessibilityInfo = {\n\n  /**\n   * Query whether a screen reader is currently enabled. Returns a promise which\n   * resolves to a boolean. The result is `true` when a screen reader is enabled\n   * and `false` otherwise.\n   */\n  fetch: function(): Promise {\n    return new Promise((resolve, reject) => {\n      AccessibilityManager.getCurrentVoiceOverState(\n        resolve,\n        reject\n      );\n    });\n  },\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when the state of the screen reader changes. The argument\n   *   to the event handler is a boolean. The boolean is `true` when a screen\n   *   reader is enabled and `false` otherwise.\n   * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n   *   finished making an announcement. The argument to the event handler is a dictionary\n   *   with these keys:\n   *     - `announcement`: The string announced by the screen reader.\n   *     - `success`: A boolean indicating whether the announcement was successfully made.\n   */\n  addEventListener: function (\n    eventName: ChangeEventName,\n    handler: Function\n  ): Object {\n    var listener;\n\n    if (eventName === 'change') {\n      listener = RCTDeviceEventEmitter.addListener(\n        VOICE_OVER_EVENT,\n        handler\n      );\n    } else if (eventName === 'announcementFinished') {\n      listener = RCTDeviceEventEmitter.addListener(\n        ANNOUNCEMENT_DID_FINISH_EVENT,\n        handler\n      );\n    }\n\n    _subscriptions.set(handler, listener);\n    return {\n      remove: AccessibilityInfo.removeEventListener.bind(null, eventName, handler),\n    };\n  },\n\n  /**\n   * iOS-Only. Set accessibility focus to a react component.\n   */\n  setAccessibilityFocus: function(\n    reactTag: number\n  ): void {\n    AccessibilityManager.setAccessibilityFocus(reactTag);\n  },\n\n  /**\n   * iOS-Only. Post a string to be announced by the screen reader.\n   */\n  announceForAccessibility: function(\n    announcement: string\n  ): void {\n    AccessibilityManager.announceForAccessibility(announcement);\n  },\n\n  /**\n   * Remove an event handler.\n   */\n  removeEventListener: function(\n    eventName: ChangeEventName,\n    handler: Function\n  ): void {\n    var listener = _subscriptions.get(handler);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _subscriptions.delete(handler);\n  },\n\n};\n\nmodule.exports = AccessibilityInfo;\n"]}]