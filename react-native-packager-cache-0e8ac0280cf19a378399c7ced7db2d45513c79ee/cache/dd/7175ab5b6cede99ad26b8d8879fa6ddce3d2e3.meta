["d1f710050bd0df648bdc9a315a9d3b129ea7d161","fc18d6ce668be410122cd1ded0e9f9e4c6cc3612",["ColorPropType","PickerIOS","PickerAndroid","Platform","React","prop-types","StyleSheetPropType","TextStylePropTypes","UnimplementedView","ViewPropTypes","ViewStylePropTypes"],[82,124,166,207,240,274,322,378,433,483,534],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/Picker/Picker.js"],"names":["ColorPropType","require","PickerIOS","PickerAndroid","Platform","React","PropTypes","StyleSheetPropType","TextStylePropTypes","UnimplementedView","ViewPropTypes","ViewStylePropTypes","itemStylePropType","pickerStyleType","color","MODE_DIALOG","MODE_DROPDOWN","PickerItem","Component","propTypes","label","string","isRequired","value","any","testID","Picker","OS","props","children","Item","defaultProps","mode","style","selectedValue","onValueChange","func","enabled","bool","oneOf","itemStyle","prompt","module","exports"],"mappings":";;AAYA;;;;AAEA,IAAIA,gBAAgBC,OAAhB,iBAAJ;AACA,IAAIC,YAAYD,OAAZ,aAAJ;AACA,IAAIE,gBAAgBF,OAAhB,iBAAJ;AACA,IAAIG,WAAWH,OAAX,YAAJ;AACA,IAAII,QAAQJ,OAAR,SAAJ;AACA,IAAMK,YAAYL,OAAZ,cAAN;AACA,IAAIM,qBAAqBN,OAArB,sBAAJ;AACA,IAAIO,qBAAqBP,OAArB,sBAAJ;AACA,IAAIQ,oBAAoBR,OAApB,qBAAJ;AACA,IAAMS,gBAAgBT,OAAhB,iBAAN;AACA,IAAIU,qBAAqBV,OAArB,sBAAJ;;AAEA,IAAIW,oBAAoBL,mBAAmBC,kBAAnB,CAAxB;;AAEA,IAAIK,kBAAkBN,4CACjBI,kBADiB;AAEpBG,SAAOd;AAFa,GAAtB;;AAKA,IAAIe,cAAc,QAAlB;AACA,IAAIC,gBAAgB,UAApB;;IAKMC,U;;;;;;;;;;6BA2BI;AAEP,YAAM,IAAN;AACD;;;EA9BuBZ,MAAMa,S,UAMvBC,S,GAAY;AAIjBC,SAAOd,UAAUe,MAAV,CAAiBC,UAJP;;AASjBC,SAAOjB,UAAUkB,GATA;;AAcjBV,SAAOd,aAdU;;AAkBjByB,UAAQnB,UAAUe;AAlBD,C;IAqCdK,M;;;;;;;;;;6BAuEI;AACL,UAAItB,SAASuB,EAAT,KAAgB,KAApB,EAA2B;AAEzB,eAAO;AAAC,mBAAD;AAAe,eAAKC,KAApB;AAA4B,eAAKA,KAAL,CAAWC;AAAvC,SAAP;AACD,OAHD,MAGO,IAAIzB,SAASuB,EAAT,KAAgB,SAApB,EAA+B;AAEpC,eAAO;AAAC,uBAAD;AAAmB,eAAKC,KAAxB;AAAgC,eAAKA,KAAL,CAAWC;AAA3C,SAAP;AACD,OAHM,MAGA;AACL,eAAO,oBAAC,iBAAD,OAAP;AACD;AACJ;;;EAjFmBxB,MAAMa,S,WAanBH,W,GAAcA,W,UAKdC,a,GAAgBA,a,UAEhBc,I,GAAOb,U,UAEPc,Y,GAAe;AACpBC,QAAMjB;AADc,C,UAKfI,S,4BACFT,a;AACHuB,SAAOpB,e;;AAIPqB,iBAAe5B,UAAUkB,G;;AAMzBW,iBAAe7B,UAAU8B,I;;AAMzBC,WAAS/B,UAAUgC,I;;AASnBN,QAAM1B,UAAUiC,KAAV,CAAgB,CAAC,QAAD,EAAW,UAAX,CAAhB,C;;AAKNC,aAAW5B,iB;;AAKX6B,UAAQnC,UAAUe,M;;AAIlBI,UAAQnB,UAAUe;;;;AAgBrBqB,OAAOC,OAAP,GAAiBjB,MAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Picker\n * @flow\n */\n\n'use strict';\n\nvar ColorPropType = require('ColorPropType');\nvar PickerIOS = require('PickerIOS');\nvar PickerAndroid = require('PickerAndroid');\nvar Platform = require('Platform');\nvar React = require('React');\nconst PropTypes = require('prop-types');\nvar StyleSheetPropType = require('StyleSheetPropType');\nvar TextStylePropTypes = require('TextStylePropTypes');\nvar UnimplementedView = require('UnimplementedView');\nconst ViewPropTypes = require('ViewPropTypes');\nvar ViewStylePropTypes = require('ViewStylePropTypes');\n\nvar itemStylePropType = StyleSheetPropType(TextStylePropTypes);\n\nvar pickerStyleType = StyleSheetPropType({\n  ...ViewStylePropTypes,\n  color: ColorPropType,\n});\n\nvar MODE_DIALOG = 'dialog';\nvar MODE_DROPDOWN = 'dropdown';\n\n/**\n * Individual selectable item in a Picker.\n */\nclass PickerItem extends React.Component<{\n label: string,\n value?: any,\n color?: ColorPropType,\n testID?: string,\n}> {\n static propTypes = {\n   /**\n    * Text to display for this item.\n    */\n   label: PropTypes.string.isRequired,\n   /**\n    * The value to be passed to picker's `onValueChange` callback when\n    * this item is selected. Can be a string or an integer.\n    */\n   value: PropTypes.any,\n   /**\n    * Color of this item's text.\n    * @platform android\n    */\n   color: ColorPropType,\n   /**\n    * Used to locate the item in end-to-end tests.\n    */\n   testID: PropTypes.string,\n };\n\n render() {\n   // The items are not rendered directly\n   throw null;\n }\n}\n\n/**\n * Renders the native picker component on iOS and Android. Example:\n *\n *     <Picker\n *       selectedValue={this.state.language}\n *       onValueChange={(itemValue, itemIndex) => this.setState({language: itemValue})}>\n *       <Picker.Item label=\"Java\" value=\"java\" />\n *       <Picker.Item label=\"JavaScript\" value=\"js\" />\n *     </Picker>\n */\nclass Picker extends React.Component<{\n style?: $FlowFixMe,\n selectedValue?: any,\n onValueChange?: Function,\n enabled?: boolean,\n mode?: 'dialog' | 'dropdown',\n itemStyle?: $FlowFixMe,\n prompt?: string,\n testID?: string,\n}> {\n /**\n  * On Android, display the options in a dialog.\n  */\n static MODE_DIALOG = MODE_DIALOG;\n\n /**\n  * On Android, display the options in a dropdown (this is the default).\n  */\n static MODE_DROPDOWN = MODE_DROPDOWN;\n\n static Item = PickerItem;\n\n static defaultProps = {\n   mode: MODE_DIALOG,\n };\n\n // $FlowFixMe(>=0.41.0)\n static propTypes = {\n   ...ViewPropTypes,\n   style: pickerStyleType,\n   /**\n    * Value matching value of one of the items. Can be a string or an integer.\n    */\n   selectedValue: PropTypes.any,\n   /**\n    * Callback for when an item is selected. This is called with the following parameters:\n    *   - `itemValue`: the `value` prop of the item that was selected\n    *   - `itemPosition`: the index of the selected item in this picker\n    */\n   onValueChange: PropTypes.func,\n   /**\n    * If set to false, the picker will be disabled, i.e. the user will not be able to make a\n    * selection.\n    * @platform android\n    */\n   enabled: PropTypes.bool,\n   /**\n    * On Android, specifies how to display the selection items when the user taps on the picker:\n    *\n    *   - 'dialog': Show a modal dialog. This is the default.\n    *   - 'dropdown': Shows a dropdown anchored to the picker view\n    *\n    * @platform android\n    */\n   mode: PropTypes.oneOf(['dialog', 'dropdown']),\n   /**\n    * Style to apply to each of the item labels.\n    * @platform ios\n    */\n   itemStyle: itemStylePropType,\n   /**\n    * Prompt string for this picker, used on Android in dialog mode as the title of the dialog.\n    * @platform android\n    */\n   prompt: PropTypes.string,\n   /**\n    * Used to locate this view in end-to-end tests.\n    */\n   testID: PropTypes.string,\n };\n\n render() {\n     if (Platform.OS === 'ios') {\n       // $FlowFixMe found when converting React.createClass to ES6\n       return <PickerIOS {...this.props}>{this.props.children}</PickerIOS>;\n     } else if (Platform.OS === 'android') {\n       // $FlowFixMe found when converting React.createClass to ES6\n       return <PickerAndroid {...this.props}>{this.props.children}</PickerAndroid>;\n     } else {\n       return <UnimplementedView />;\n     }\n }\n}\n\nmodule.exports = Picker;\n"]}]