["dd1330d04294bf9053d6e5f1859de9b28aa312c7","219dafe995816cecec86b926c18b8379e621da75",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/stacktrace-parser/lib/stacktrace-parser.js"],"names":["UNKNOWN_FUNCTION","StackTraceParser","parse","stackString","chrome","gecko","node","lines","split","stack","parts","element","i","j","length","exec","push","module","exports"],"mappings":";;AAEA,IAAIA,mBAAmB,WAAvB;;AAEA,IAAIC,mBAAmB;AAKrBC,WAAO,eAASC,WAAT,EAAsB;AAC3B,YAAIC,SAAS,2IAAb;AAAA,YACIC,QAAQ,8DADZ;AAAA,YAEIC,OAAQ,2FAFZ;AAAA,YAGIC,QAAQJ,YAAYK,KAAZ,CAAkB,IAAlB,CAHZ;AAAA,YAIIC,QAAQ,EAJZ;AAAA,YAKIC,KALJ;AAAA,YAMIC,OANJ;;AAQA,aAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIN,MAAMO,MAA1B,EAAkCF,IAAIC,CAAtC,EAAyC,EAAED,CAA3C,EAA8C;AAC1C,gBAAKF,QAAQL,MAAMU,IAAN,CAAWR,MAAMK,CAAN,CAAX,CAAb,EAAoC;AAChCD,0BAAU;AACN,4BAAQD,MAAM,CAAN,CADF;AAEN,kCAAcA,MAAM,CAAN,KAAYV,gBAFpB;AAGN,kCAAc,CAACU,MAAM,CAAN,CAHT;AAIN,8BAAUA,MAAM,CAAN,IAAW,CAACA,MAAM,CAAN,CAAZ,GAAuB;AAJ3B,iBAAV;AAMH,aAPD,MAOO,IAAKA,QAAQN,OAAOW,IAAP,CAAYR,MAAMK,CAAN,CAAZ,CAAb,EAAqC;AACxCD,0BAAU;AACN,4BAAQD,MAAM,CAAN,CADF;AAEN,kCAAcA,MAAM,CAAN,KAAYV,gBAFpB;AAGN,kCAAc,CAACU,MAAM,CAAN,CAHT;AAIN,8BAAUA,MAAM,CAAN,IAAW,CAACA,MAAM,CAAN,CAAZ,GAAuB;AAJ3B,iBAAV;AAMH,aAPM,MAOA,IAAKA,QAAQJ,KAAKS,IAAL,CAAUR,MAAMK,CAAN,CAAV,CAAb,EAAmC;AACtCD,0BAAU;AACN,4BAAQD,MAAM,CAAN,CADF;AAEN,kCAAcA,MAAM,CAAN,KAAYV,gBAFpB;AAGN,kCAAc,CAACU,MAAM,CAAN,CAHT;AAIN,8BAAUA,MAAM,CAAN,IAAW,CAACA,MAAM,CAAN,CAAZ,GAAuB;AAJ3B,iBAAV;AAMH,aAPM,MAOA;AACH;AACH;;AAEDD,kBAAMO,IAAN,CAAWL,OAAX;AACH;;AAED,eAAOF,KAAP;AACD;AA5CoB,CAAvB;;AAgDAQ,OAAOC,OAAP,GAAiBjB,gBAAjB","sourcesContent":["\n\nvar UNKNOWN_FUNCTION = '<unknown>';\n\nvar StackTraceParser = {\n  /**\n   * This parses the different stack traces and puts them into one format\n   * This borrows heavily from TraceKit (https://github.com/occ/TraceKit)\n   */\n  parse: function(stackString) {\n    var chrome = /^\\s*at (?:(?:(?:Anonymous function)?|((?:\\[object object\\])?\\S+(?: \\[as \\S+\\])?)) )?\\(?((?:file|http|https):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n        gecko = /^(?:\\s*([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i,\n        node  = /^\\s*at (?:((?:\\[object object\\])?\\S+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n        lines = stackString.split('\\n'),\n        stack = [],\n        parts,\n        element;\n\n    for (var i = 0, j = lines.length; i < j; ++i) {\n        if ((parts = gecko.exec(lines[i]))) {\n            element = {\n                'file': parts[3],\n                'methodName': parts[1] || UNKNOWN_FUNCTION,\n                'lineNumber': +parts[4],\n                'column': parts[5] ? +parts[5] : null\n            };\n        } else if ((parts = chrome.exec(lines[i]))) {\n            element = {\n                'file': parts[2],\n                'methodName': parts[1] || UNKNOWN_FUNCTION,\n                'lineNumber': +parts[3],\n                'column': parts[4] ? +parts[4] : null\n            };\n        } else if ((parts = node.exec(lines[i]))) {\n            element = {\n                'file': parts[2],\n                'methodName': parts[1] || UNKNOWN_FUNCTION,\n                'lineNumber': +parts[3],\n                'column': parts[4] ? +parts[4] : null\n            };\n        } else {\n            continue;\n        }\n\n        stack.push(element);\n    }\n\n    return stack;\n  }\n};\n\n\nmodule.exports = StackTraceParser;\n"]}]