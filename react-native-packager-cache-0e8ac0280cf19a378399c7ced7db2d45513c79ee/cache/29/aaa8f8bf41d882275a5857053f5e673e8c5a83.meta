["628173d4ace18f8c29408dadf198a027fa95f934","5bfbb9732f923cf2b118103c7d1ebbfc446b8bd5",["NativeMethodsMixin","React","prop-types","StyleSheet","ViewPropTypes","create-react-class","requireNativeComponent"],[49,92,126,166,209,259,319],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js"],"names":["NativeMethodsMixin","require","React","PropTypes","StyleSheet","ViewPropTypes","createReactClass","requireNativeComponent","SEGMENTED_CONTROL_REFERENCE","SegmentedControlIOS","displayName","mixins","propTypes","values","arrayOf","string","selectedIndex","number","onValueChange","func","onChange","enabled","bool","tintColor","momentary","getDefaultProps","_onChange","event","props","nativeEvent","value","render","styles","segmentedControl","style","create","height","RCTSegmentedControl","module","exports"],"mappings":";AAWA;;AAEA,IAAIA,qBAAqBC,OAArB,sBAAJ;AACA,IAAIC,QAAQD,OAAR,SAAJ;AACA,IAAIE,YAAYF,OAAZ,cAAJ;AACA,IAAIG,aAAaH,OAAb,cAAJ;AACA,IAAII,gBAAgBJ,OAAhB,iBAAJ;;AAEA,IAAIK,mBAAmBL,OAAnB,sBAAJ;AACA,IAAIM,yBAAyBN,OAAzB,0BAAJ;;AAOA,IAAIO,8BAA8B,kBAAlC;;AAyBA,IAAIC,sBAAsBH,iBAAiB;AACzCI,eAAa,qBAD4B;AAEzCC,UAAQ,CAACX,kBAAD,CAFiC;;AAIzCY,sCACKP,aADL;AAKEQ,YAAQV,UAAUW,OAAV,CAAkBX,UAAUY,MAA5B,CALV;;AAUEC,mBAAeb,UAAUc,MAV3B;;AAgBEC,mBAAef,UAAUgB,IAhB3B;;AAsBEC,cAAUjB,UAAUgB,IAtBtB;;AA4BEE,aAASlB,UAAUmB,IA5BrB;;AAiCEC,eAAWpB,UAAUY,MAjCvB;;AAuCES,eAAWrB,UAAUmB;AAvCvB,IAJyC;;AA8CzCG,mBAAiB,2BAAyB;AACxC,WAAO;AACLZ,cAAQ,EADH;AAELQ,eAAS;AAFJ,KAAP;AAID,GAnDwC;;AAqDzCK,aAAW,mBAASC,KAAT,EAAuB;AAChC,SAAKC,KAAL,CAAWR,QAAX,IAAuB,KAAKQ,KAAL,CAAWR,QAAX,CAAoBO,KAApB,CAAvB;AACA,SAAKC,KAAL,CAAWV,aAAX,IAA4B,KAAKU,KAAL,CAAWV,aAAX,CAAyBS,MAAME,WAAN,CAAkBC,KAA3C,CAA5B;AACD,GAxDwC;;AA0DzCC,UAAQ,kBAAW;AACjB,WACE,oBAAC,mBAAD,2BACM,KAAKH,KADX;AAEE,WAAKpB,2BAFP;AAGE,aAAO,CAACwB,OAAOC,gBAAR,EAA0B,KAAKL,KAAL,CAAWM,KAArC,CAHT;AAIE,gBAAU,KAAKR;AAJjB,OADF;AAQD;AAnEwC,CAAjB,CAA1B;;AAsEA,IAAIM,SAAS5B,WAAW+B,MAAX,CAAkB;AAC7BF,oBAAkB;AAChBG,YAAQ;AADQ;AADW,CAAlB,CAAb;;AAMA,IAAIC,sBAAsB9B,uBACxB,qBADwB,EAExBE,mBAFwB,CAA1B;;AAKA6B,OAAOC,OAAP,GAAiB9B,mBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SegmentedControlIOS\n * @flow\n */\n'use strict';\n\nvar NativeMethodsMixin = require('NativeMethodsMixin');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar StyleSheet = require('StyleSheet');\nvar ViewPropTypes = require('ViewPropTypes');\n\nvar createReactClass = require('create-react-class');\nvar requireNativeComponent = require('requireNativeComponent');\n\ntype DefaultProps = {\n  values: Array<string>,\n  enabled: boolean,\n};\n\nvar SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';\n\ntype Event = Object;\n\n/**\n * Use `SegmentedControlIOS` to render a UISegmentedControl iOS.\n *\n * #### Programmatically changing selected index\n *\n * The selected index can be changed on the fly by assigning the\n * selectIndex prop to a state variable, then changing that variable.\n * Note that the state variable would need to be updated as the user\n * selects a value and changes the index, as shown in the example below.\n *\n * ````\n * <SegmentedControlIOS\n *   values={['One', 'Two']}\n *   selectedIndex={this.state.selectedIndex}\n *   onChange={(event) => {\n *     this.setState({selectedIndex: event.nativeEvent.selectedSegmentIndex});\n *   }}\n * />\n * ````\n */\n// $FlowFixMe(>=0.41.0)\nvar SegmentedControlIOS = createReactClass({\n  displayName: 'SegmentedControlIOS',\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * The labels for the control's segment buttons, in order.\n     */\n    values: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * The index in `props.values` of the segment to be (pre)selected.\n     */\n    selectedIndex: PropTypes.number,\n\n    /**\n     * Callback that is called when the user taps a segment;\n     * passes the segment's value as an argument\n     */\n    onValueChange: PropTypes.func,\n\n    /**\n     * Callback that is called when the user taps a segment;\n     * passes the event as an argument\n     */\n    onChange: PropTypes.func,\n\n    /**\n     * If false the user won't be able to interact with the control.\n     * Default value is true.\n     */\n    enabled: PropTypes.bool,\n\n    /**\n     * Accent color of the control.\n     */\n    tintColor: PropTypes.string,\n\n    /**\n     * If true, then selecting a segment won't persist visually.\n     * The `onValueChange` callback will still work as expected.\n     */\n    momentary: PropTypes.bool\n  },\n\n  getDefaultProps: function(): DefaultProps {\n    return {\n      values: [],\n      enabled: true\n    };\n  },\n\n  _onChange: function(event: Event) {\n    this.props.onChange && this.props.onChange(event);\n    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);\n  },\n\n  render: function() {\n    return (\n      <RCTSegmentedControl\n        {...this.props}\n        ref={SEGMENTED_CONTROL_REFERENCE}\n        style={[styles.segmentedControl, this.props.style]}\n        onChange={this._onChange}\n      />\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  segmentedControl: {\n    height: 28,\n  },\n});\n\nvar RCTSegmentedControl = requireNativeComponent(\n  'RCTSegmentedControl',\n  SegmentedControlIOS\n);\n\nmodule.exports = SegmentedControlIOS;\n"]}]