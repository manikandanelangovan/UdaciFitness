["a6003db56ec573c7359f2a18dc98e23ef3740ba1","64c89e6d8924595856a080eed6aa98e2038dd24b",["NativeEventEmitter","NativeModules","Platform","fbjs/lib/invariant"],[49,100,141,179],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Linking/Linking.js"],"names":["NativeEventEmitter","require","NativeModules","Platform","invariant","LinkingManager","OS","IntentAndroid","Linking","type","handler","addListener","removeListener","url","_validateURL","openURL","canOpenURL","getInitialURL","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,qBAAqBC,OAArB,sBAAN;AACA,IAAMC,gBAAgBD,OAAhB,iBAAN;AACA,IAAME,WAAWF,OAAX,YAAN;;AAEA,IAAMG,YAAYH,OAAZ,sBAAN;;AAEA,IAAMI,iBAAiBF,SAASG,EAAT,KAAgB,SAAhB,GACrBJ,cAAcK,aADO,GACSL,cAAcG,cAD9C;;IA+HMG,O;;;AAEJ,qBAAc;AAAA;AAAA,yHACNH,cADM;AAEb;;;;qCAMgBI,I,EAAcC,O,EAAmB;AAChD,WAAKC,WAAL,CAAiBF,IAAjB,EAAuBC,OAAvB;AACD;;;wCAKmBD,I,EAAcC,O,EAAoB;AACpD,WAAKE,cAAL,CAAoBH,IAApB,EAA0BC,OAA1B;AACD;;;4BAkBOG,G,EAA2B;AACjC,WAAKC,YAAL,CAAkBD,GAAlB;AACA,aAAOR,eAAeU,OAAf,CAAuBF,GAAvB,CAAP;AACD;;;+BAYUA,G,EAA+B;AACxC,WAAKC,YAAL,CAAkBD,GAAlB;AACA,aAAOR,eAAeW,UAAf,CAA0BH,GAA1B,CAAP;AACD;;;oCAQiC;AAChC,aAAOR,eAAeY,aAAf,EAAP;AACD;;;iCAEYJ,G,EAAa;AACxBT,gBACE,OAAOS,GAAP,KAAe,QADjB,EAEE,2CAA2CA,GAF7C;AAIAT,gBACES,GADF,EAEE,8BAFF;AAID;;;EA5EmBb,kB;;AA+EtBkB,OAAOC,OAAP,GAAiB,IAAIX,OAAJ,EAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Linking\n * @flow\n */\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nconst invariant = require('fbjs/lib/invariant');\n\nconst LinkingManager = Platform.OS === 'android' ?\n  NativeModules.IntentAndroid : NativeModules.LinkingManager;\n\n/**\n * <div class=\"banner-crna-ejected\">\n *   <h3>Projects with Native Code Only</h3>\n *   <p>\n *     This section only applies to projects made with <code>react-native init</code>\n *     or to those made with Create React Native App which have since ejected. For\n *     more information about ejecting, please see\n *     the <a href=\"https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md\" target=\"_blank\">guide</a> on\n *     the Create React Native App repository.\n *   </p>\n * </div>\n *\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * ### Basic Usage\n *\n * #### Handling deep links\n *\n * If your app was launched from an external url registered to your app you can\n * access and handle it from any component you want with\n *\n * ```\n * componentDidMount() {\n *   Linking.getInitialURL().then((url) => {\n *     if (url) {\n *       console.log('Initial url is: ' + url);\n *     }\n *   }).catch(err => console.error('An error occurred', err));\n * }\n * ```\n *\n * NOTE: For instructions on how to add support for deep linking on Android,\n * refer to [Enabling Deep Links for App Content - Add Intent Filters for Your Deep Links](http://developer.android.com/training/app-indexing/deep-linking.html#adding-filters).\n *\n * If you wish to receive the intent in an existing instance of MainActivity,\n * you may set the `launchMode` of MainActivity to `singleTask` in\n * `AndroidManifest.xml`. See [`<activity>`](http://developer.android.com/guide/topics/manifest/activity-element.html)\n * documentation for more information.\n *\n * ```\n * <activity\n *   android:name=\".MainActivity\"\n *   android:launchMode=\"singleTask\">\n * ```\n *\n * NOTE: On iOS, you'll need to link `RCTLinking` to your project by following\n * the steps described [here](docs/linking-libraries-ios.html#manual-linking).\n * If you also want to listen to incoming app links during your app's\n * execution, you'll need to add the following lines to your `*AppDelegate.m`:\n *\n * ```\n * // iOS 9.x or newer\n * #import <React/RCTLinkingManager.h>\n *\n * - (BOOL)application:(UIApplication *)application\n *    openURL:(NSURL *)url\n *    options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n * {\n *   return [RCTLinkingManager application:application openURL:url options:options];\n * }\n * ```\n * \n * If you're targeting iOS 8.x or older, you can use the following code instead:\n *\n * ```\n * // iOS 8.x or older\n * #import <React/RCTLinkingManager.h>\n *\n * - (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n *   sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n * {\n *   return [RCTLinkingManager application:application openURL:url\n *                       sourceApplication:sourceApplication annotation:annotation];\n * }\n * ```\n *\n *\n * // If your app is using [Universal Links](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html),\n * you'll need to add the following code as well:\n *\n * ```\n * - (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity\n *  restorationHandler:(void (^)(NSArray * _Nullable))restorationHandler\n * {\n *  return [RCTLinkingManager application:application\n *                   continueUserActivity:userActivity\n *                     restorationHandler:restorationHandler];\n * }\n * ```\n *\n * And then on your React component you'll be able to listen to the events on\n * `Linking` as follows\n *\n * ```\n * componentDidMount() {\n *   Linking.addEventListener('url', this._handleOpenURL);\n * },\n * componentWillUnmount() {\n *   Linking.removeEventListener('url', this._handleOpenURL);\n * },\n * _handleOpenURL(event) {\n *   console.log(event.url);\n * }\n * ```\n * #### Opening external links\n *\n * To start the corresponding activity for a link (web URL, email, contact etc.), call\n *\n * ```\n * Linking.openURL(url).catch(err => console.error('An error occurred', err));\n * ```\n *\n * If you want to check if any installed app can handle a given URL beforehand you can call\n * ```\n * Linking.canOpenURL(url).then(supported => {\n *   if (!supported) {\n *     console.log('Can\\'t handle url: ' + url);\n *   } else {\n *     return Linking.openURL(url);\n *   }\n * }).catch(err => console.error('An error occurred', err));\n * ```\n */\nclass Linking extends NativeEventEmitter {\n\n  constructor() {\n    super(LinkingManager);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   */\n  addEventListener(type: string, handler: Function) {\n    this.addListener(type, handler);\n  }\n\n  /**\n   * Remove a handler by passing the `url` event type and the handler\n   */\n  removeEventListener(type: string, handler: Function ) {\n    this.removeListener(type, handler);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * You can use other URLs, like a location (e.g. \"geo:37.484847,-122.148386\" on Android\n   * or \"http://maps.apple.com/?ll=37.484847,-122.148386\" on iOS), a contact,\n   * or any other URL that can be opened with the installed apps.\n   *\n   * The method returns a `Promise` object. If the user confirms the open dialog or the\n   * url automatically opens, the promise is resolved.  If the user cancels the open dialog\n   * or there are no registered applications for the url, the promise is rejected.\n   *\n   * NOTE: This method will fail if the system doesn't know how to open the specified URL.\n   * If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first.\n   *\n   * NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!\n   */\n  openURL(url: string): Promise<any> {\n    this._validateURL(url);\n    return LinkingManager.openURL(url);\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * NOTE: For web URLs, the protocol (\"http://\", \"https://\") must be set accordingly!\n   *\n   * NOTE: As of iOS 9, your app needs to provide the `LSApplicationQueriesSchemes` key\n   * inside `Info.plist` or canOpenURL will always return false.\n   *\n   * @param URL the URL to open\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    return LinkingManager.canOpenURL(url);\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * NOTE: To support deep linking on Android, refer http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents\n   */\n  getInitialURL(): Promise<?string> {\n    return LinkingManager.getInitialURL();\n  }\n\n  _validateURL(url: string) {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url\n    );\n    invariant(\n      url,\n      'Invalid URL: cannot be empty'\n    );\n  }\n}\n\nmodule.exports = new Linking();\n"]}]