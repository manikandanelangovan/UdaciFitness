["a5e3de6a4718417737c0cdb2a7136d20a10d329e","0a57d25d9bf93737a6cb320e9ef50abc24696597",["create-react-class","Keyboard","LayoutAnimation","Platform","prop-types","React","react-timer-mixin","View","ViewPropTypes"],[47,93,136,179,216,251,286,327,364],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js"],"names":["createReactClass","require","Keyboard","LayoutAnimation","Platform","PropTypes","React","TimerMixin","View","ViewPropTypes","viewRef","KeyboardAvoidingView","displayName","mixins","propTypes","behavior","oneOf","contentContainerStyle","style","keyboardVerticalOffset","number","isRequired","getDefaultProps","getInitialState","bottom","subscriptions","frame","relativeKeyboardHeight","keyboardFrame","keyboardY","screenY","props","Math","max","y","height","onKeyboardChange","event","setState","duration","easing","endCoordinates","configureNext","update","type","Types","onLayout","nativeEvent","layout","componentWillUpdate","nextProps","nextState","nextContext","state","componentWillMount","OS","addListener","componentWillUnmount","forEach","sub","remove","render","children","heightStyle","flex","positionStyle","paddingStyle","paddingBottom","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule KeyboardAvoidingView\n * @flow\n */\n'use strict';\n\nconst createReactClass = require('create-react-class');\nconst Keyboard = require('Keyboard');\nconst LayoutAnimation = require('LayoutAnimation');\nconst Platform = require('Platform');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst TimerMixin = require('react-timer-mixin');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\n\nimport type EmitterSubscription from 'EmitterSubscription';\nimport type {ViewLayout, ViewLayoutEvent} from 'ViewPropTypes';\n\ntype ScreenRect = {\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n};\ntype KeyboardChangeEvent = {\n  startCoordinates?: ScreenRect,\n  endCoordinates: ScreenRect,\n  duration?: number,\n  easing?: string,\n};\n\nconst viewRef = 'VIEW';\n\n/**\n * It is a component to solve the common problem of views that need to move out of the way of the virtual keyboard.\n * It can automatically adjust either its position or bottom padding based on the position of the keyboard.\n */\n// $FlowFixMe(>=0.41.0)\nconst KeyboardAvoidingView = createReactClass({\n  displayName: 'KeyboardAvoidingView',\n  mixins: [TimerMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    behavior: PropTypes.oneOf(['height', 'position', 'padding']),\n\n    /**\n     * The style of the content container(View) when behavior is 'position'.\n     */\n    contentContainerStyle: ViewPropTypes.style,\n\n    /**\n     * This is the distance between the top of the user screen and the react native view,\n     * may be non-zero in some use cases.\n     */\n    keyboardVerticalOffset: PropTypes.number.isRequired,\n  },\n\n  getDefaultProps() {\n    return {\n      keyboardVerticalOffset: 0,\n    };\n  },\n\n  getInitialState() {\n    return {\n      bottom: 0,\n    };\n  },\n\n  subscriptions: ([]: Array<EmitterSubscription>),\n  frame: (null: ?ViewLayout),\n\n  relativeKeyboardHeight(keyboardFrame: ScreenRect): number {\n    const frame = this.frame;\n    if (!frame || !keyboardFrame) {\n      return 0;\n    }\n\n    const keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;\n\n    // Calculate the displacement needed for the view such that it\n    // no longer overlaps with the keyboard\n    return Math.max(frame.y + frame.height - keyboardY, 0);\n  },\n\n  onKeyboardChange(event: ?KeyboardChangeEvent) {\n    if (!event) {\n      this.setState({bottom: 0});\n      return;\n    }\n\n    const {duration, easing, endCoordinates} = event;\n    const height = this.relativeKeyboardHeight(endCoordinates);\n\n    if (duration && easing) {\n      LayoutAnimation.configureNext({\n        duration: duration,\n        update: {\n          duration: duration,\n          type: LayoutAnimation.Types[easing] || 'keyboard',\n        },\n      });\n    }\n    this.setState({bottom: height});\n  },\n\n  onLayout(event: ViewLayoutEvent) {\n    this.frame = event.nativeEvent.layout;\n  },\n\n  componentWillUpdate(nextProps: Object, nextState: Object, nextContext?: Object): void {\n    if (nextState.bottom === this.state.bottom &&\n        this.props.behavior === 'height' &&\n        nextProps.behavior === 'height') {\n      // If the component rerenders without an internal state change, e.g.\n      // triggered by parent component re-rendering, no need for bottom to change.\n      nextState.bottom = 0;\n    }\n  },\n\n  componentWillMount() {\n    if (Platform.OS === 'ios') {\n      this.subscriptions = [\n        Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange),\n      ];\n    } else {\n      this.subscriptions = [\n        Keyboard.addListener('keyboardDidHide', this.onKeyboardChange),\n        Keyboard.addListener('keyboardDidShow', this.onKeyboardChange),\n      ];\n    }\n  },\n\n  componentWillUnmount() {\n    this.subscriptions.forEach((sub) => sub.remove());\n  },\n\n  render(): React.Element<any> {\n    // $FlowFixMe(>=0.41.0)\n    const {behavior, children, style, ...props} = this.props;\n\n    switch (behavior) {\n      case 'height':\n        let heightStyle;\n        if (this.frame) {\n          // Note that we only apply a height change when there is keyboard present,\n          // i.e. this.state.bottom is greater than 0. If we remove that condition,\n          // this.frame.height will never go back to its original value.\n          // When height changes, we need to disable flex.\n          heightStyle = {height: this.frame.height - this.state.bottom, flex: 0};\n        }\n        return (\n          <View ref={viewRef} style={[style, heightStyle]} onLayout={this.onLayout} {...props}>\n            {children}\n          </View>\n        );\n\n      case 'position':\n        const positionStyle = {bottom: this.state.bottom};\n        const { contentContainerStyle } = this.props;\n\n        return (\n          <View ref={viewRef} style={style} onLayout={this.onLayout} {...props}>\n            <View style={[contentContainerStyle, positionStyle]}>\n              {children}\n            </View>\n          </View>\n        );\n\n      case 'padding':\n        const paddingStyle = {paddingBottom: this.state.bottom};\n        return (\n          <View ref={viewRef} style={[style, paddingStyle]} onLayout={this.onLayout} {...props}>\n            {children}\n          </View>\n        );\n\n      default:\n        return (\n          <View ref={viewRef} onLayout={this.onLayout} style={style} {...props}>\n            {children}\n          </View>\n        );\n    }\n  },\n});\n\nmodule.exports = KeyboardAvoidingView;\n"]}]