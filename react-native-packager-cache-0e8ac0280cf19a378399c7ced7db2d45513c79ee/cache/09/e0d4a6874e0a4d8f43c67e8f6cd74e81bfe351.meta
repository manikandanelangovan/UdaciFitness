["2595628749e310b00973719a0447ce227c518737","12feb9365d603590a332580137031459b11100dd",["lodash","react","../../elements/TSpan"],[1704,1798,1889],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-svg/lib/extract/extractText.js"],"names":["props","container","x","y","dx","dy","textAnchor","startOffset","deltaX","parseDelta","deltaY","children","content","childrenString","toString","count","Array","isArray","map","child","anchors","font","extractFont","positionX","isNil","positionY","fontRegExp","fontFamilyPrefix","fontFamilySuffix","spaceReg","commaReg","auto","start","middle","end","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","hasOwnProperty","match","exec","fontFamily","fontSize","isBold","isItalic","fontWeight","fontStyle","ownedFont","isNaN","pickBy","prop","defaults","delta","trim","d"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React, {Children} from 'react';\nimport TSpan from '../../elements/TSpan';\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?)[ptexm%]*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst spaceReg = /\\s+/;\nconst commaReg = /,/g;\n\nconst anchors = {\n    auto: 0,\n    start: 1,\n    middle: 2,\n    end: 3\n};\n\nlet cachedFontObjectsFromString = {};\n\nfunction extractSingleFontFamily(fontFamilyString) {\n    // SVG on the web allows for multiple font-families to be specified.\n    // For compatibility, we extract the first font-family, hoping\n    // we'll get a match.\n    return fontFamilyString ? fontFamilyString.split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '') : null;\n}\n\nfunction parseFontString(font) {\n    if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n        return cachedFontObjectsFromString[font];\n    }\n    let match = fontRegExp.exec(font);\n    if (!match) {\n        return null;\n    }\n    let fontFamily = extractSingleFontFamily(match[3]);\n    let fontSize = +match[2] || 12;\n    let isBold = /bold/.exec(match[1]);\n    let isItalic = /italic/.exec(match[1]);\n    cachedFontObjectsFromString[font] = {\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: isBold ? 'bold' : 'normal',\n        fontStyle: isItalic ? 'italic' : 'normal'\n    };\n    return cachedFontObjectsFromString[font];\n}\n\nfunction extractFont(props) {\n    let font = props.font;\n    let fontSize = +props.fontSize;\n\n    let ownedFont = {\n        fontFamily: extractSingleFontFamily(props.fontFamily),\n        fontSize: isNaN(fontSize) ? null : fontSize,\n        fontWeight: props.fontWeight,\n        fontStyle: props.fontStyle\n    };\n\n    if (typeof props.font === 'string') {\n        font = parseFontString(props.font);\n    }\n    ownedFont = _.pickBy(ownedFont, prop => !_.isNil(prop));\n\n    return _.defaults(ownedFont, font);\n}\n\nfunction parseDelta(delta) {\n    if (typeof delta === 'string') {\n        if (isNaN(+delta)) {\n            return delta.trim().replace(commaReg, ' ').split(spaceReg).map(d => +d || 0);\n        } else {\n            return [+delta];\n        }\n    } else if (typeof delta === 'number') {\n        return [delta];\n    } else {\n        return [];\n    }\n}\n\nexport default function(props, container) {\n    const {\n        x,\n        y,\n        dx,\n        dy,\n        textAnchor,\n        startOffset\n    } = props;\n\n\n    const deltaX = parseDelta(dx);\n    const deltaY = parseDelta(dy);\n    let { children } = props;\n    let content = null;\n\n\n    if (typeof children === 'string' || typeof children === 'number') {\n        const childrenString = children.toString();\n        if (container) {\n            children = <TSpan>{childrenString}</TSpan>;\n        } else {\n            content = childrenString;\n            children = null;\n        }\n    } else if (Children.count(children) > 1 || Array.isArray(children)) {\n        children = Children.map(children, child => {\n            if (typeof child === 'string' || typeof child === 'number') {\n                return <TSpan>{child.toString()}</TSpan>;\n            } else {\n                return child;\n            }\n        });\n    }\n\n    return {\n        textAnchor: anchors[textAnchor] || 0,\n        font: extractFont(props),\n        children,\n        content,\n        deltaX,\n        deltaY,\n        startOffset: (startOffset || 0).toString(),\n        positionX: _.isNil(x) ? null : x.toString(),\n        positionY: _.isNil(y) ? null : y.toString()\n    };\n}\n"]}]