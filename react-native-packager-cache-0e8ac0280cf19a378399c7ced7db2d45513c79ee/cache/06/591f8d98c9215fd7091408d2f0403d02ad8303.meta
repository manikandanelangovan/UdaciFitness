["13dcf3d25270b60c6a98857c6ca4e15754faaf37","cac8e077d06997002c1f29085790bcbf51e31057",["NativeModules"],[46],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Alert/AlertIOS.js"],"names":["RCTAlertManager","require","AlertManager","AlertIOS","title","message","callbackOrButtons","type","console","warn","prompt","defaultValue","keyboardType","callback","alertWithArgs","id","value","callbacks","buttons","cancelButtonKey","destructiveButtonKey","Array","forEach","btn","index","onPress","style","String","text","length","btnDef","push","undefined","cb","module","exports"],"mappings":";AAYA;;AAEA,IAAIA,kBAAkBC,yBAAyBC,YAA/C;;IA4FMC,Q;;;;;;;0BA+BFC,K,EACAC,O,EACAC,iB,EACAC,I,EACM;AACN,UAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/BC,gBAAQC,IAAR,CAAa,gHAAb;AACA,aAAKC,MAAL,CAAYN,KAAZ,EAAmBC,OAAnB,EAA4BC,iBAA5B,EAA+CC,IAA/C;AACA;AACD;AACD,WAAKG,MAAL,CAAYN,KAAZ,EAAmBC,OAAnB,EAA4BC,iBAA5B,EAA+C,SAA/C;AACD;;;2BAgDCF,K,EACAC,O,EACAC,iB,EAIM;AAAA,UAHNC,IAGM,uEAHc,YAGd;AAAA,UAFNI,YAEM;AAAA,UADNC,YACM;;AACN,UAAI,OAAOL,IAAP,KAAgB,UAApB,EAAgC;AAC9BC,gBAAQC,IAAR,CACE,iGACA,mGADA,GAEA,6GAFA,GAGA,uEAJF;;AAMA,YAAII,WAAWN,IAAf;AACA,YAAII,eAAeN,OAAnB;AACAL,wBAAgBc,aAAhB,CAA8B;AAC5BV,iBAAOA,KADqB;AAE5BG,gBAAM,YAFsB;AAG5BI;AAH4B,SAA9B,EAIG,UAACI,EAAD,EAAKC,KAAL,EAAe;AAChBH,mBAASG,KAAT;AACD,SAND;AAOA;AACD;;AAED,UAAIC,YAAY,EAAhB;AACA,UAAIC,UAAU,EAAd;AACA,UAAIC,eAAJ;AACA,UAAIC,oBAAJ;AACA,UAAI,OAAOd,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CW,oBAAY,CAACX,iBAAD,CAAZ;AACD,OAFD,MAGK,IAAIA,6BAA6Be,KAAjC,EAAwC;AAC3Cf,0BAAkBgB,OAAlB,CAA0B,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACxCP,oBAAUO,KAAV,IAAmBD,IAAIE,OAAvB;AACA,cAAIF,IAAIG,KAAJ,KAAc,QAAlB,EAA4B;AAC1BP,8BAAkBQ,OAAOH,KAAP,CAAlB;AACD,WAFD,MAEO,IAAID,IAAIG,KAAJ,KAAc,aAAlB,EAAiC;AACtCN,mCAAuBO,OAAOH,KAAP,CAAvB;AACD;AACD,cAAID,IAAIK,IAAJ,IAAYJ,QAAQ,CAAClB,qBAAqB,EAAtB,EAA0BuB,MAA1B,GAAmC,CAA3D,EAA8D;AAC5D,gBAAIC,SAAS,EAAb;AACAA,mBAAON,KAAP,IAAgBD,IAAIK,IAAJ,IAAY,EAA5B;AACAV,oBAAQa,IAAR,CAAaD,MAAb;AACD;AACF,SAZD;AAaD;;AAED9B,sBAAgBc,aAAhB,CAA8B;AAC5BV,eAAOA,KADqB;AAE5BC,iBAASA,WAAW2B,SAFQ;AAG5Bd,wBAH4B;AAI5BX,cAAMA,QAAQyB,SAJc;AAK5BrB,kCAL4B;AAM5BQ,wCAN4B;AAO5BC,kDAP4B;AAQ5BR;AAR4B,OAA9B,EASG,UAACG,EAAD,EAAKC,KAAL,EAAe;AAChB,YAAIiB,KAAKhB,UAAUF,EAAV,CAAT;AACAkB,cAAMA,GAAGjB,KAAH,CAAN;AACD,OAZD;AAaD;;;;;AAGHkB,OAAOC,OAAP,GAAiBhC,QAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AlertIOS\n * @flow\n * @jsdoc\n */\n'use strict';\n\nvar RCTAlertManager = require('NativeModules').AlertManager;\n\n/**\n * An Alert button type\n */\nexport type AlertType = $Enum<{\n  /**\n   * Default alert with no inputs\n   */\n  'default': string,\n  /**\n   * Plain text input alert\n   */\n  'plain-text': string,\n  /**\n   * Secure text input alert\n   */\n  'secure-text': string,\n  /**\n   * Login and password alert\n   */\n  'login-password': string,\n}>;\n\n/**\n * An Alert button style\n */\nexport type AlertButtonStyle = $Enum<{\n  /**\n   * Default button style\n   */\n  'default': string,\n  /**\n   * Cancel button style\n   */\n  'cancel': string,\n  /**\n   * Destructive button style\n   */\n  'destructive': string,\n}>;\n\n/**\n * Array or buttons\n * @typedef {Array} ButtonsArray\n * @property {string=} text Button label\n * @property {Function=} onPress Callback function when button pressed\n * @property {AlertButtonStyle=} style Button style\n */\nexport type ButtonsArray = Array<{\n  /**\n   * Button label\n   */\n  text?: string,\n  /**\n   * Callback function when button pressed\n   */\n  onPress?: ?Function,\n  /**\n   * Button style\n   */\n  style?: AlertButtonStyle,\n}>;\n\n/**\n * @description\n * `AlertIOS` provides functionality to create an iOS alert dialog with a\n * message or create a prompt for user input.\n *\n * Creating an iOS alert:\n *\n * ```\n * AlertIOS.alert(\n *  'Sync Complete',\n *  'All your data are belong to us.'\n * );\n * ```\n *\n * Creating an iOS prompt:\n *\n * ```\n * AlertIOS.prompt(\n *   'Enter a value',\n *   null,\n *   text => console.log(\"You entered \"+text)\n * );\n * ```\n *\n * We recommend using the [`Alert.alert`](docs/alert.html) method for\n * cross-platform support if you don't need to create iOS-only prompts.\n *\n */\nclass AlertIOS {\n  /**\n   * Create and display a popup alert.\n   * @static\n   * @method alert\n   * @param title The dialog's title.\n   *\n   *    An empty string hides the title.\n   * @param message An optional message that appears below\n   *     the dialog's title.\n   * @param callbackOrButtons This optional argument should\n   *    be either a single-argument function or an array of buttons. If passed\n   *    a function, it will be called when the user taps 'OK'.\n   *\n   *    If passed an array of button configurations, each button should include\n   *    a `text` key, as well as optional `onPress` and `style` keys. `style`\n   *    should be one of 'default', 'cancel' or 'destructive'.\n   * @param type Deprecated, do not use.\n   *\n   * @example <caption>Example with custom buttons</caption>\n   *\n   * AlertIOS.alert(\n   *  'Update available',\n   *  'Keep your app up to date to enjoy the latest features',\n   *  [\n   *    {text: 'Cancel', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},\n   *    {text: 'Install', onPress: () => console.log('Install Pressed')},\n   *  ],\n   * );\n   */\n  static alert(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(() => void) | ButtonsArray,\n    type?: AlertType,\n  ): void {\n    if (typeof type !== 'undefined') {\n      console.warn('AlertIOS.alert() with a 4th \"type\" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');\n      this.prompt(title, message, callbackOrButtons, type);\n      return;\n    }\n    this.prompt(title, message, callbackOrButtons, 'default');\n  }\n\n  /**\n   * Create and display a prompt to enter some text.\n   * @static\n   * @method prompt\n   * @param title The dialog's title.\n   * @param message An optional message that appears above the text\n   *    input.\n   * @param callbackOrButtons This optional argument should\n   *    be either a single-argument function or an array of buttons. If passed\n   *    a function, it will be called with the prompt's value when the user\n   *    taps 'OK'.\n   *\n   *    If passed an array of button configurations, each button should include\n   *    a `text` key, as well as optional `onPress` and `style` keys (see\n   *    example). `style` should be one of 'default', 'cancel' or 'destructive'.\n   * @param type This configures the text input. One of 'plain-text',\n   *    'secure-text' or 'login-password'.\n   * @param defaultValue The default text in text input.\n   * @param keyboardType The keyboard type of first text field(if exists).\n   *    One of 'default', 'email-address', 'numeric', 'phone-pad',\n   *    'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad',\n   *    'name-phone-pad', 'decimal-pad', 'twitter' or 'web-search'.\n   *\n   * @example <caption>Example with custom buttons</caption>\n   *\n   * AlertIOS.prompt(\n   *   'Enter password',\n   *   'Enter your password to claim your $1.5B in lottery winnings',\n   *   [\n   *     {text: 'Cancel', onPress: () => console.log('Cancel Pressed'), style: 'cancel'},\n   *     {text: 'OK', onPress: password => console.log('OK Pressed, password: ' + password)},\n   *   ],\n   *   'secure-text'\n   * );\n   *\n   * @example <caption>Example with the default button and a custom callback</caption>\n   *\n   * AlertIOS.prompt(\n   *   'Update username',\n   *   null,\n   *   text => console.log(\"Your username is \"+text),\n   *   null,\n   *   'default'\n   * );\n   */\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?((text: string) => void) | ButtonsArray,\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string\n  ): void {\n    if (typeof type === 'function') {\n      console.warn(\n        'You passed a callback function as the \"type\" argument to AlertIOS.prompt(). React Native is ' +\n        'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' +\n        'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' +\n        'keyboardType) and the old syntax will be removed in a future version.');\n\n      var callback = type;\n      var defaultValue = message;\n      RCTAlertManager.alertWithArgs({\n        title: title,\n        type: 'plain-text',\n        defaultValue,\n      }, (id, value) => {\n        callback(value);\n      });\n      return;\n    }\n\n    var callbacks = [];\n    var buttons = [];\n    var cancelButtonKey;\n    var destructiveButtonKey;\n    if (typeof callbackOrButtons === 'function') {\n      callbacks = [callbackOrButtons];\n    }\n    else if (callbackOrButtons instanceof Array) {\n      callbackOrButtons.forEach((btn, index) => {\n        callbacks[index] = btn.onPress;\n        if (btn.style === 'cancel') {\n          cancelButtonKey = String(index);\n        } else if (btn.style === 'destructive') {\n          destructiveButtonKey = String(index);\n        }\n        if (btn.text || index < (callbackOrButtons || []).length - 1) {\n          var btnDef = {};\n          btnDef[index] = btn.text || '';\n          buttons.push(btnDef);\n        }\n      });\n    }\n\n    RCTAlertManager.alertWithArgs({\n      title: title,\n      message: message || undefined,\n      buttons,\n      type: type || undefined,\n      defaultValue,\n      cancelButtonKey,\n      destructiveButtonKey,\n      keyboardType,\n    }, (id, value) => {\n      var cb = callbacks[id];\n      cb && cb(value);\n    });\n  }\n}\n\nmodule.exports = AlertIOS;\n"]}]