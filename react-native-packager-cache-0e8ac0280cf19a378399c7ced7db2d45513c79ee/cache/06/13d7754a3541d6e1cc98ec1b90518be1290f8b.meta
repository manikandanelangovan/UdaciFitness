["744d648b496b41574ade7744fe68d79148c27a08","56bf158fdc8e1ce2a343a42e82ed0c5722250b66",["react-native","./Constants","regenerator-runtime"],[126,169,286],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Google.js"],"names":["logInAsync","Google","ExponentGoogle","config","behavior","appOwnership","scopes","androidClientId","androidStandaloneAppClientId","iosClientId","iosStandaloneAppClientId","webClientId","logInResult","fetch","headers","Authorization","accessToken","userInfoResponse","json","user","id","name","givenName","given_name","familyName","family_name","photoUrl","picture","email"],"mappings":";;;QAsCsBA,U,GAAAA,U;;AApCtB;;AAEA;;;;;;AAEA,IAAMC,SAAS,2BAAcC,cAA7B;;AAgCO,SAAeF,UAAf,CAA0BG,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,kBADC,GACUD,OAAOC,QADjB;;AAEL,cAAI,CAACA,QAAL,EAAe;AACbA,uBAAW,QAAX;AACD;;AAGD,cAAIA,aAAa,QAAb,IAAyB,oBAAUC,YAAV,KAA2B,YAAxD,EAAsE;AACpED,uBAAW,KAAX;AACD;;AAEGE,gBAXC,GAWQH,OAAOG,MAXf;;AAYL,cAAI,CAACA,MAAL,EAAa;AACXA,qBAAS,CAAC,SAAD,EAAY,OAAZ,CAAT;AACD;;AAEKC,yBAhBD,GAiBH,oBAAUF,YAAV,KAA2B,YAA3B,GACIF,OAAOK,4BADX,GAEIL,OAAOI,eAnBR;AAoBCE,qBApBD,GAqBH,oBAAUJ,YAAV,KAA2B,YAA3B,GACIF,OAAOO,wBADX,GAEIP,OAAOM,WAvBR;AAAA;AAAA,0CAyBqBR,OAAOD,UAAP,CAAkB;AAC1CO,4CAD0C;AAE1CE,oCAF0C;AAG1CE,yBAAaR,OAAOQ,WAHsB;AAI1CP,8BAJ0C;AAK1CE;AAL0C,WAAlB,CAzBrB;;AAAA;AAyBCM,qBAzBD;;AAAA,gBAiCDR,aAAa,KAjCZ;AAAA;AAAA;AAAA;;AAAA;AAAA,0CAoC0BS,MAC3B,2CAD2B,EAE3B;AACEC,qBAAS,EAAEC,2BAAyBH,YAAYI,WAAvC;AADX,WAF2B,CApC1B;;AAAA;AAoCCC,0BApCD;AAAA;AAAA,0CA0CsBA,iBAAiBC,IAAjB,EA1CtB;;AAAA;AA0CHD,0BA1CG;AAAA,oEA4CEL,WA5CF;AA6CDO,kBAAM;AACJC,kBAAIH,iBAAiBG,EADjB;AAEJC,oBAAMJ,iBAAiBI,IAFnB;AAGJC,yBAAWL,iBAAiBM,UAHxB;AAIJC,0BAAYP,iBAAiBQ,WAJzB;AAKJC,wBAAUT,iBAAiBU,OALvB;AAMJC,qBAAOX,iBAAiBW;AANpB;AA7CL;;AAAA;AAAA,2CAuDIhB,WAvDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// @flow\n\nimport { NativeModules } from 'react-native';\n\nimport Constants from './Constants';\n\nconst Google = NativeModules.ExponentGoogle;\n\ntype LogInConfig = {\n  androidClientId?: string,\n  androidStandaloneAppClientId?: string,\n  iosClientId?: string,\n  iosStandaloneAppClientId?: string,\n  webClientId?: string,\n  behavior?: 'system' | 'web',\n  scopes?: Array<string>,\n};\n\ntype LogInResult =\n  | {\n      type: 'cancel',\n    }\n  | {\n      type: 'success',\n      accessToken?: ?string,\n      idToken: ?string,\n      refreshToken: ?string,\n      serverAuthCode: ?string,\n      user: {\n        id: string,\n        name: string,\n        givenName: string,\n        familyName: string,\n        photoUrl?: ?string,\n        email?: ?string,\n      },\n    };\n\nexport async function logInAsync(config: LogInConfig): Promise<LogInResult> {\n  let behavior = config.behavior;\n  if (!behavior) {\n    behavior = 'system';\n  }\n\n  // Only standalone apps can use system login.\n  if (behavior === 'system' && Constants.appOwnership !== 'standalone') {\n    behavior = 'web';\n  }\n\n  let scopes = config.scopes;\n  if (!scopes) {\n    scopes = ['profile', 'email'];\n  }\n\n  const androidClientId =\n    Constants.appOwnership === 'standalone'\n      ? config.androidStandaloneAppClientId\n      : config.androidClientId;\n  const iosClientId =\n    Constants.appOwnership === 'standalone'\n      ? config.iosStandaloneAppClientId\n      : config.iosClientId;\n\n  const logInResult = await Google.logInAsync({\n    androidClientId,\n    iosClientId,\n    webClientId: config.webClientId,\n    behavior,\n    scopes,\n  });\n\n  if (behavior === 'web') {\n    // Web login only returns an accessToken so use it to fetch the same info\n    // as the native login does.\n    let userInfoResponse = await fetch(\n      'https://www.googleapis.com/userinfo/v2/me',\n      {\n        headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n      }\n    );\n    userInfoResponse = await userInfoResponse.json();\n    return {\n      ...logInResult,\n      user: {\n        id: userInfoResponse.id,\n        name: userInfoResponse.name,\n        givenName: userInfoResponse.given_name,\n        familyName: userInfoResponse.family_name,\n        photoUrl: userInfoResponse.picture,\n        email: userInfoResponse.email,\n      },\n    };\n  } else {\n    return logInResult;\n  }\n}\n"]}]