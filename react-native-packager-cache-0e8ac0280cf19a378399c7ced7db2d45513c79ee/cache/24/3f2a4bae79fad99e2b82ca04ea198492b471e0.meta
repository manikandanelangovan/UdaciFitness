["652183ad88e456ccbd565adc29a31396dd8f48f6","fbe8ef31f1d0c34ec515755c63be042b67135bc0",["fbemitter","react-native"],[378,420],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Util.js"],"names":["getCurrentDeviceCountryAsync","getCurrentLocaleAsync","getCurrentTimeZoneAsync","reload","addNewVersionListenerExperimental","ExponentUtil","_emitter","_maybeInitEmitter","addListener","_emitNewVersionAvailable","newVersionEvent","JSON","parse","emit","listener"],"mappings":";;;QAOgBA,4B,GAAAA,4B;QAIAC,qB,GAAAA,qB;QAIAC,uB,GAAAA,uB;QAIAC,M,GAAAA,M;QAwBAC,iC,GAAAA,iC;;AAzChB;;AACA;;IAEQC,Y,8BAAAA,Y;AAED,SAASL,4BAAT,GAAyD;AAC9D,SAAOK,aAAaL,4BAAb,EAAP;AACD;;AAEM,SAASC,qBAAT,GAAkD;AACvD,SAAOI,aAAaJ,qBAAb,EAAP;AACD;;AAEM,SAASC,uBAAT,GAAoD;AACzD,SAAOG,aAAaH,uBAAb,EAAP;AACD;;AAEM,SAASC,MAAT,GAAkB;AACvBE,eAAaF,MAAb;AACD;;AAED,IAAIG,iBAAJ;;AAEA,SAASC,iBAAT,GAA6B;AAC3B,MAAI,CAACD,QAAL,EAAe;AACbA,eAAW,6BAAX;AACA,oCAAmBE,WAAnB,CACE,8BADF,EAEEC,wBAFF;AAID;AACF;;AAED,SAASA,wBAAT,CAAkCC,eAAlC,EAAmD;AACjD,MAAI,OAAOA,eAAP,KAA2B,QAA/B,EAAyC;AACvCA,sBAAkBC,KAAKC,KAAL,CAAWF,eAAX,CAAlB;AACD;;AAEDJ,WAASO,IAAT,CAAc,qBAAd,EAAqCH,eAArC;AACD;;AAEM,SAASN,iCAAT,CACLU,QADK,EAEc;AACnBP;;AAEA,SAAOD,SAASE,WAAT,CAAqB,qBAArB,EAA4CM,QAA5C,CAAP;AACD","sourcesContent":["/* @flow */\n\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { DeviceEventEmitter, NativeModules } from 'react-native';\n\nconst { ExponentUtil } = NativeModules;\n\nexport function getCurrentDeviceCountryAsync(): Promise<string> {\n  return ExponentUtil.getCurrentDeviceCountryAsync();\n}\n\nexport function getCurrentLocaleAsync(): Promise<string> {\n  return ExponentUtil.getCurrentLocaleAsync();\n}\n\nexport function getCurrentTimeZoneAsync(): Promise<string> {\n  return ExponentUtil.getCurrentTimeZoneAsync();\n}\n\nexport function reload() {\n  ExponentUtil.reload();\n}\n\nlet _emitter;\n\nfunction _maybeInitEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener(\n      'Exponent.newVersionAvailable',\n      _emitNewVersionAvailable\n    );\n  }\n}\n\nfunction _emitNewVersionAvailable(newVersionEvent) {\n  if (typeof newVersionEvent === 'string') {\n    newVersionEvent = JSON.parse(newVersionEvent);\n  }\n\n  _emitter.emit('newVersionAvailable', newVersionEvent);\n}\n\nexport function addNewVersionListenerExperimental(\n  listener: Function\n): EventSubscription {\n  _maybeInitEmitter();\n\n  return _emitter.addListener('newVersionAvailable', listener);\n}\n"]}]