["cfafa4ee164fab4e2903c80439e4dc7218c23165","5c0eec9204472fdcf1a8d4e00dfbddecd449467c",["NativeMethodsMixin","Platform","prop-types","React","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","create-react-class","fbjs/lib/invariant","requireNativeComponent","UIManager"],[49,95,132,167,218,289,347,397,444,504,1242],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/View/View.js"],"names":["NativeMethodsMixin","require","Platform","PropTypes","React","ReactNativeStyleAttributes","ReactNativeViewAttributes","ViewPropTypes","createReactClass","invariant","requireNativeComponent","View","displayName","mixins","propTypes","viewConfig","uiViewClassName","validAttributes","RCTView","contextTypes","isInAParentText","bool","render","context","OS","props","nativeOnly","nativeBackgroundAndroid","nativeForegroundAndroid","__DEV__","UIManager","viewConfigs","prop","nativeProps","viewAny","Error","ViewToExport","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,qBAAqBC,OAArB,sBAAN;AACA,IAAMC,WAAWD,OAAX,YAAN;AACA,IAAME,YAAYF,OAAZ,cAAN;AACA,IAAMG,QAAQH,OAAR,SAAN;AACA,IAAMI,6BAA6BJ,OAA7B,8BAAN;AACA,IAAMK,4BAA4BL,OAA5B,6BAAN;AACA,IAAMM,gBAAgBN,OAAhB,iBAAN;;AAEA,IAAMO,mBAAmBP,OAAnB,sBAAN;AACA,IAAMQ,YAAYR,OAAZ,sBAAN;AACA,IAAMS,yBAAyBT,OAAzB,0BAAN;;AAqDA,IAAMU,OAAOH,iBAAiB;AAC5BI,eAAa,MADe;;AAM5BC,UAAQ,CAACb,kBAAD,CANoB;;AAY5Bc,aAAWP,aAZiB;;AAkB5BQ,cAAY;AACVC,qBAAiB,SADP;AAEVC,qBAAiBX,0BAA0BY;AAFjC,GAlBgB;;AAuB5BC,gBAAc;AACZC,qBAAiBjB,UAAUkB;AADf,GAvBc;;AA2B5BC,UAAQ,kBAAW;AACjBb,cACE,EAAE,KAAKc,OAAL,CAAaH,eAAb,IAAgClB,SAASsB,EAAT,KAAgB,SAAlD,CADF,EAEE,8DAFF;;AAQA,WAAO,oBAAC,OAAD,EAAa,KAAKC,KAAlB,CAAP;AACD;AArC2B,CAAjB,CAAb;;AAwCA,IAAMP,UAAUR,uBAAuB,SAAvB,EAAkCC,IAAlC,EAAwC;AACtDe,cAAY;AACVC,6BAAyB,IADf;AAEVC,6BAAyB;AAFf;AAD0C,CAAxC,CAAhB;;AAOA,IAAIC,OAAJ,EAAa;AACX,MAAMC,YAAY7B,OAAZ,aAAN;AACA,MAAMc,aAAae,UAAUC,WAAV,IAAyBD,UAAUC,WAAV,CAAsBb,OAA/C,IAA0D,EAA7E;AACA,OAAK,IAAMc,IAAX,IAAmBjB,WAAWkB,WAA9B,EAA2C;AACzC,QAAMC,UAAevB,IAArB;AACA,QAAI,CAACuB,QAAQpB,SAAR,CAAkBkB,IAAlB,CAAD,IAA4B,CAAC3B,2BAA2B2B,IAA3B,CAAjC,EAAmE;AACjE,YAAM,IAAIG,KAAJ,CACJ,+CAA+CH,IAA/C,GAAsD,GADlD,CAAN;AAGD;AACF;AACF;;AAED,IAAII,eAAelB,OAAnB;AACA,IAAIW,OAAJ,EAAa;AACXO,iBAAezB,IAAf;AACD;;AAGD0B,OAAOC,OAAP,GAAmBF,YAAnB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule View\n * @flow\n */\n'use strict';\n\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst ReactNativeViewAttributes = require('ReactNativeViewAttributes');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\n\nimport type {ViewProps} from 'ViewPropTypes';\n\nexport type Props = ViewProps;\n\n/**\n * The most fundamental component for building a UI, `View` is a container that supports layout with\n * [flexbox](docs/flexbox.html), [style](docs/style.html),\n * [some touch handling](docs/handling-touches.html), and\n * [accessibility](docs/accessibility.html) controls. `View` maps directly to the\n * native view equivalent on whatever platform React Native is running on, whether that is a\n * `UIView`, `<div>`, `android.view`, etc.\n *\n * `View` is designed to be nested inside other views and can have 0 to many children of any type.\n *\n * This example creates a `View` that wraps two colored boxes and a text component in a row with\n * padding.\n *\n * ```javascript\n * class ViewColoredBoxesWithText extends Component {\n *   render() {\n *     return (\n *       <View style={{flexDirection: 'row', height: 100, padding: 20}}>\n *         <View style={{backgroundColor: 'blue', flex: 0.3}} />\n *         <View style={{backgroundColor: 'red', flex: 0.5}} />\n *         <Text>Hello World!</Text>\n *       </View>\n *     );\n *   }\n * }\n * ```\n *\n * > `View`s are designed to be used with [`StyleSheet`](docs/style.html) for clarity\n * > and performance, although inline styles are also supported.\n *\n * ### Synthetic Touch Events\n *\n * For `View` responder props (e.g., `onResponderMove`), the synthetic touch event passed to them\n * are of the following form:\n *\n * - `nativeEvent`\n *   - `changedTouches` - Array of all touch events that have changed since the last event.\n *   - `identifier` - The ID of the touch.\n *   - `locationX` - The X position of the touch, relative to the element.\n *   - `locationY` - The Y position of the touch, relative to the element.\n *   - `pageX` - The X position of the touch, relative to the root element.\n *   - `pageY` - The Y position of the touch, relative to the root element.\n *   - `target` - The node id of the element receiving the touch event.\n *   - `timestamp` - A time identifier for the touch, useful for velocity calculation.\n *   - `touches` - Array of all current touches on the screen.\n */\n// $FlowFixMe(>=0.41.0)\nconst View = createReactClass({\n  displayName: 'View',\n  // TODO: We should probably expose the mixins, viewConfig, and statics publicly. For example,\n  // one of the props is of type AccessibilityComponentType. That is defined as a const[] above,\n  // but it is not rendered by the docs, since `statics` below is not rendered. So its Possible\n  // values had to be hardcoded.\n  mixins: [NativeMethodsMixin],\n\n  // `propTypes` should not be accessed directly on View since this wrapper only\n  // exists for DEV mode. However it's important for them to be declared.\n  // If the object passed to `createClass` specifies `propTypes`, Flow will\n  // create a static type from it.\n  propTypes: ViewPropTypes,\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  viewConfig: {\n    uiViewClassName: 'RCTView',\n    validAttributes: ReactNativeViewAttributes.RCTView\n  },\n\n  contextTypes: {\n    isInAParentText: PropTypes.bool,\n  },\n\n  render: function() {\n    invariant(\n      !(this.context.isInAParentText && Platform.OS === 'android'),\n      'Nesting of <View> within <Text> is not supported on Android.');\n\n    // WARNING: This method will not be used in production mode as in that mode we\n    // replace wrapper component View with generated native wrapper RCTView. Avoid\n    // adding functionality this component that you'd want to be available in both\n    // dev and prod modes.\n    return <RCTView {...this.props} />;\n  },\n});\n\nconst RCTView = requireNativeComponent('RCTView', View, {\n  nativeOnly: {\n    nativeBackgroundAndroid: true,\n    nativeForegroundAndroid: true,\n  }\n});\n\nif (__DEV__) {\n  const UIManager = require('UIManager');\n  const viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};\n  for (const prop in viewConfig.nativeProps) {\n    const viewAny: any = View; // Appease flow\n    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {\n      throw new Error(\n        'View is missing propType for native prop `' + prop + '`'\n      );\n    }\n  }\n}\n\nlet ViewToExport = RCTView;\nif (__DEV__) {\n  ViewToExport = View;\n}\n\n// No one should depend on the DEV-mode createClass View wrapper.\nmodule.exports = ((ViewToExport : any) : typeof RCTView);\n"]}]