["65eecd93243dc4c00b9e32e979b0fb2ae4691faf","aaaf298c333e1338f7b2cad700380f587ac09b1a",["ListView","React","ScrollView","StyleSheet","Text","TouchableHighlight","View","WebSocketInterceptor","XHRInterceptor"],[39,72,107,147,181,223,265,309,363],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js"],"names":["ListView","require","React","ScrollView","StyleSheet","Text","TouchableHighlight","View","WebSocketInterceptor","XHRInterceptor","LISTVIEW_CELL_HEIGHT","SEPARATOR_THICKNESS","nextXHRId","NetworkOverlay","props","_requests","_detailViewItems","_listViewDataSource","DataSource","rowHasChanged","r1","r2","state","dataSource","cloneWithRows","newDetailInfo","detailRowID","_listViewHighlighted","_listViewHeight","_captureRequestListView","bind","_captureDetailScrollView","_listViewOnLayout","_renderRow","_closeButtonClicked","_socketIdMap","_xhrIdMap","isInterceptorEnabled","setOpenCallback","method","url","xhr","_index","xhrIndex","length","_xhr","push","_genDetailViewItem","setState","_scrollToBottom","setRequestHeaderCallback","header","value","_getRequestIndexByXHRID","networkInfo","requestHeaders","setSendCallback","data","dataSent","setHeaderReceivedCallback","type","size","responseHeaders","responseContentType","responseSize","setResponseCallback","status","timeout","response","responseURL","responseType","enableInterception","setConnectCallback","protocols","options","socketId","socketIndex","_webSocket","setCloseCallback","statusCode","closeReason","undefined","messages","JSON","stringify","setOnMessageCallback","message","setOnCloseCallback","serverClose","setOnErrorCallback","serverError","_enableXHRInterception","_enableWebSocketInterception","disableInterception","rowData","sectionID","rowID","highlightRow","urlCellViewStyle","styles","urlEvenCellView","methodCellViewStyle","methodEvenCellView","urlOddCellView","methodOddCellView","_pressRow","tableRow","cellText","_getTypeShortName","adjacentRowHighlighted","height","backgroundColor","_listView","scrollResponder","getScrollResponder","scrollY","Math","max","scrollResponderScrollTo","x","y","animated","listRef","event","nativeEvent","layout","_scrollToTop","_scrollView","scrollTo","scrollRef","String","substr","concat","index","detailViewItem","requestItem","key","detailViewRow","detailViewText","detailKeyCellView","detailValueCellView","_getStringByValue","Number","container","closeButton","clostButtonText","detailScrollView","listViewTitle","urlTitleCellView","methodTitleCellView","listView","_renderSeperator","Component","create","paddingTop","paddingBottom","paddingLeft","paddingRight","flex","flexDirection","color","fontSize","borderColor","borderTopWidth","borderBottomWidth","borderRightWidth","alignItems","justifyContent","borderLeftWidth","marginTop","marginBottom","paddingHorizontal","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NetworkOverlay\n * @flow\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst React = require('React');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableHighlight = require('TouchableHighlight');\nconst View = require('View');\nconst WebSocketInterceptor = require('WebSocketInterceptor');\nconst XHRInterceptor = require('XHRInterceptor');\n\nconst LISTVIEW_CELL_HEIGHT = 15;\nconst SEPARATOR_THICKNESS = 2;\n\n// Global id for the intercepted XMLHttpRequest objects.\nlet nextXHRId = 0;\n\ntype NetworkRequestInfo = {\n  type?: string,\n  url?: string,\n  method?: string,\n  status?: number,\n  dataSent?: any,\n  responseContentType?: string,\n  responseSize?: number,\n  requestHeaders?: Object,\n  responseHeaders?: string,\n  response?: Object | string,\n  responseURL?: string,\n  responseType?: string,\n  timeout?: number,\n  closeReason?: string,\n  messages?: string,\n  serverClose?: Object,\n  serverError?: Object,\n};\n\n/**\n * Show all the intercepted network requests over the InspectorPanel.\n */\nclass NetworkOverlay extends React.Component<Object, {\n  dataSource: ListView.DataSource,\n  newDetailInfo: bool,\n  detailRowID: ?number,\n}> {\n  _requests: Array<NetworkRequestInfo>;\n  _listViewDataSource: ListView.DataSource;\n  _listView: ?ListView;\n  _listViewHighlighted: bool;\n  _listViewHeight: number;\n  _scrollView: ?ScrollView;\n  _detailViewItems: Array<Array<React.Element<any>>>;\n  _listViewOnLayout: (event: Event) => void;\n  _captureRequestListView: (listRef: ?ListView) => void;\n  _captureDetailScrollView: (scrollRef: ?ScrollView) => void;\n  _renderRow: (\n    rowData: NetworkRequestInfo,\n    sectionID: number,\n    rowID: number,\n    highlightRow: (sectionID: number, rowID: number) => void,\n  ) => React.Element<any>;\n  _closeButtonClicked: () => void;\n  // Map of `socketId` -> `index in `_requests``.\n  _socketIdMap: Object;\n  // Map of `xhr._index` -> `index in `_requests``.\n  _xhrIdMap: {[key: number]: number};\n\n  constructor(props: Object) {\n    super(props);\n    this._requests = [];\n    this._detailViewItems = [];\n    this._listViewDataSource =\n      new ListView.DataSource({rowHasChanged: (r1, r2) => r1 !== r2});\n    this.state = {\n      dataSource: this._listViewDataSource.cloneWithRows([]),\n      newDetailInfo: false,\n      detailRowID: null,\n    };\n    this._listViewHighlighted = false;\n    this._listViewHeight = 0;\n    this._captureRequestListView = this._captureRequestListView.bind(this);\n    this._captureDetailScrollView = this._captureDetailScrollView.bind(this);\n    this._listViewOnLayout = this._listViewOnLayout.bind(this);\n    this._renderRow = this._renderRow.bind(this);\n    this._closeButtonClicked = this._closeButtonClicked.bind(this);\n    this._socketIdMap = {};\n    this._xhrIdMap = {};\n  }\n\n  _enableXHRInterception(): void {\n    if (XHRInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    // Show the XHR request item in listView as soon as it was opened.\n    XHRInterceptor.setOpenCallback((method, url, xhr) => {\n      // Generate a global id for each intercepted xhr object, add this id\n      // to the xhr object as a private `_index` property to identify it,\n      // so that we can distinguish different xhr objects in callbacks.\n      xhr._index = nextXHRId++;\n      const xhrIndex = this._requests.length;\n      this._xhrIdMap[xhr._index] = xhrIndex;\n\n      const _xhr: NetworkRequestInfo = {\n        'type': 'XMLHttpRequest',\n        'method': method,\n        'url': url\n      };\n      this._requests.push(_xhr);\n      this._detailViewItems.push([]);\n      this._genDetailViewItem(xhrIndex);\n      this.setState(\n        {dataSource: this._listViewDataSource.cloneWithRows(this._requests)},\n        this._scrollToBottom(),\n      );\n    });\n\n    XHRInterceptor.setRequestHeaderCallback((header, value, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      const networkInfo = this._requests[xhrIndex];\n      if (!networkInfo.requestHeaders) {\n        networkInfo.requestHeaders = {};\n      }\n      networkInfo.requestHeaders[header] = value;\n      this._genDetailViewItem(xhrIndex);\n    });\n\n    XHRInterceptor.setSendCallback((data, xhr) => {\n      const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n      if (xhrIndex === -1) {\n        return;\n      }\n      this._requests[xhrIndex].dataSent = data;\n      this._genDetailViewItem(xhrIndex);\n    });\n\n    XHRInterceptor.setHeaderReceivedCallback(\n      (type, size, responseHeaders, xhr) => {\n        const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n        if (xhrIndex === -1) {\n          return;\n        }\n        const networkInfo = this._requests[xhrIndex];\n        networkInfo.responseContentType = type;\n        networkInfo.responseSize = size;\n        networkInfo.responseHeaders = responseHeaders;\n        this._genDetailViewItem(xhrIndex);\n      }\n    );\n\n    XHRInterceptor.setResponseCallback((\n        status,\n        timeout,\n        response,\n        responseURL,\n        responseType,\n        xhr,\n      ) => {\n        const xhrIndex = this._getRequestIndexByXHRID(xhr._index);\n        if (xhrIndex === -1) {\n          return;\n        }\n        const networkInfo = this._requests[xhrIndex];\n        networkInfo.status = status;\n        networkInfo.timeout = timeout;\n        networkInfo.response = response;\n        networkInfo.responseURL = responseURL;\n        networkInfo.responseType = responseType;\n        this._genDetailViewItem(xhrIndex);\n      }\n    );\n\n    // Fire above callbacks.\n    XHRInterceptor.enableInterception();\n  }\n\n  _enableWebSocketInterception(): void {\n    if (WebSocketInterceptor.isInterceptorEnabled()) {\n      return;\n    }\n    // Show the WebSocket request item in listView when 'connect' is called.\n    WebSocketInterceptor.setConnectCallback(\n      (url, protocols, options, socketId) => {\n        const socketIndex = this._requests.length;\n        this._socketIdMap[socketId] = socketIndex;\n        const _webSocket: NetworkRequestInfo = {\n          'type': 'WebSocket',\n          'url': url,\n          'protocols': protocols,\n        };\n        this._requests.push(_webSocket);\n        this._detailViewItems.push([]);\n        this._genDetailViewItem(socketIndex);\n        this.setState(\n          {dataSource: this._listViewDataSource.cloneWithRows(this._requests)},\n          this._scrollToBottom(),\n        );\n      }\n    );\n\n    WebSocketInterceptor.setCloseCallback(\n      (statusCode, closeReason, socketId) => {\n        const socketIndex = this._socketIdMap[socketId];\n        if (socketIndex === undefined) {\n          return;\n        }\n        if (statusCode !== null && closeReason !== null) {\n          this._requests[socketIndex].status = statusCode;\n          this._requests[socketIndex].closeReason = closeReason;\n        }\n        this._genDetailViewItem(socketIndex);\n      }\n    );\n\n    WebSocketInterceptor.setSendCallback((data, socketId) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      if (!this._requests[socketIndex].messages) {\n        this._requests[socketIndex].messages = '';\n      }\n      this._requests[socketIndex].messages +=\n        'Sent: ' + JSON.stringify(data) + '\\n';\n      this._genDetailViewItem(socketIndex);\n    });\n\n    WebSocketInterceptor.setOnMessageCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      if (!this._requests[socketIndex].messages) {\n        this._requests[socketIndex].messages = '';\n      }\n      this._requests[socketIndex].messages +=\n        'Received: ' + JSON.stringify(message) + '\\n';\n      this._genDetailViewItem(socketIndex);\n    });\n\n    WebSocketInterceptor.setOnCloseCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this._requests[socketIndex].serverClose = message;\n      this._genDetailViewItem(socketIndex);\n    });\n\n    WebSocketInterceptor.setOnErrorCallback((socketId, message) => {\n      const socketIndex = this._socketIdMap[socketId];\n      if (socketIndex === undefined) {\n        return;\n      }\n      this._requests[socketIndex].serverError = message;\n      this._genDetailViewItem(socketIndex);\n    });\n\n    // Fire above callbacks.\n    WebSocketInterceptor.enableInterception();\n  }\n\n  componentDidMount() {\n    this._enableXHRInterception();\n    this._enableWebSocketInterception();\n  }\n\n  componentWillUnmount() {\n    XHRInterceptor.disableInterception();\n    WebSocketInterceptor.disableInterception();\n  }\n\n  _renderRow(\n    rowData: NetworkRequestInfo,\n    sectionID: number,\n    rowID: number,\n    highlightRow: (sectionID: number, rowID: number) => void,\n  ): React.Element<any> {\n    let urlCellViewStyle = styles.urlEvenCellView;\n    let methodCellViewStyle = styles.methodEvenCellView;\n    if (rowID % 2 === 1) {\n      urlCellViewStyle = styles.urlOddCellView;\n      methodCellViewStyle = styles.methodOddCellView;\n    }\n    return (\n      <TouchableHighlight onPress={() => {\n          this._pressRow(rowID);\n          highlightRow(sectionID, rowID);\n        }}>\n        <View>\n          <View style={styles.tableRow}>\n            <View style={urlCellViewStyle}>\n              <Text style={styles.cellText} numberOfLines={1}>\n                {rowData.url}\n              </Text>\n            </View>\n            <View style={methodCellViewStyle}>\n              <Text style={styles.cellText} numberOfLines={1}>\n                {this._getTypeShortName(rowData.type)}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </TouchableHighlight>\n    );\n  }\n\n  _renderSeperator(\n    sectionID: number,\n    rowID: number,\n    adjacentRowHighlighted: bool): React.Element<any> {\n    return (\n      <View\n        key={`${sectionID}-${rowID}`}\n        style={{\n          height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,\n          backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC',\n        }}\n      />\n    );\n  }\n\n  _scrollToBottom(): void {\n    if (this._listView) {\n      const scrollResponder = this._listView.getScrollResponder();\n      if (scrollResponder) {\n        const scrollY = Math.max(\n          this._requests.length * LISTVIEW_CELL_HEIGHT +\n          (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) -\n          this._listViewHeight,\n          0,\n        );\n        scrollResponder.scrollResponderScrollTo({\n          x: 0,\n          y: scrollY,\n          animated: true\n        });\n      }\n    }\n  }\n\n  _captureRequestListView(listRef: ?ListView): void {\n    this._listView = listRef;\n  }\n\n  _listViewOnLayout(event: any): void {\n    const {height} = event.nativeEvent.layout;\n    this._listViewHeight = height;\n  }\n\n  /**\n   * Popup a scrollView to dynamically show detailed information of\n   * the request, when pressing a row in the network flow listView.\n   */\n  _pressRow(rowID: number): void {\n    this._listViewHighlighted = true;\n    this.setState(\n      {detailRowID: rowID},\n      this._scrollToTop(),\n    );\n  }\n\n  _scrollToTop(): void {\n    if (this._scrollView) {\n      this._scrollView.scrollTo({\n        y: 0,\n        animated: false,\n      });\n    }\n  }\n\n  _captureDetailScrollView(scrollRef: ?ScrollView): void {\n    this._scrollView = scrollRef;\n  }\n\n  _closeButtonClicked() {\n    this.setState({detailRowID: null});\n  }\n\n  _getStringByValue(value: any): string {\n    if (value === undefined) {\n      return 'undefined';\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    if (typeof value === 'string' && value.length > 500) {\n      return String(value).substr(0, 500).concat(\n        '\\n***TRUNCATED TO 500 CHARACTERS***');\n    }\n    return value;\n  }\n\n  _getRequestIndexByXHRID(index: number): number {\n    if (index === undefined) {\n      return -1;\n    }\n    const xhrIndex = this._xhrIdMap[index];\n    if (xhrIndex === undefined) {\n      return -1;\n    } else {\n      return xhrIndex;\n    }\n  }\n\n  _getTypeShortName(type: any): string {\n    if (type === 'XMLHttpRequest') {\n      return 'XHR';\n    } else if (type === 'WebSocket') {\n      return 'WS';\n    }\n\n    return '';\n  }\n\n  /**\n   * Generate a list of views containing network request information for\n   * a XHR object, to be shown in the detail scrollview. This function\n   * should be called every time there is a new update of the XHR object,\n   * in order to show network request/response information in real time.\n   */\n  _genDetailViewItem(index: number): void {\n    this._detailViewItems[index] = [];\n    const detailViewItem = this._detailViewItems[index];\n    const requestItem = this._requests[index];\n    for (let key in requestItem) {\n      detailViewItem.push(\n        <View style={styles.detailViewRow} key={key}>\n          <Text style={[styles.detailViewText, styles.detailKeyCellView]}>\n            {key}\n          </Text>\n          <Text style={[styles.detailViewText, styles.detailValueCellView]}>\n            {this._getStringByValue(requestItem[key])}\n          </Text>\n        </View>\n      );\n    }\n    // Re-render if this network request is showing in the detail view.\n    if (this.state.detailRowID != null &&\n        Number(this.state.detailRowID) === index) {\n      this.setState({newDetailInfo: true});\n    }\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        {this.state.detailRowID != null &&\n        <TouchableHighlight\n          style={styles.closeButton}\n          onPress={this._closeButtonClicked}>\n          <View>\n            <Text style={styles.clostButtonText}>v</Text>\n          </View>\n        </TouchableHighlight>}\n        {this.state.detailRowID != null &&\n        <ScrollView\n          style={styles.detailScrollView}\n          ref={this._captureDetailScrollView}>\n          {this._detailViewItems[this.state.detailRowID]}\n        </ScrollView>}\n        <View style={styles.listViewTitle}>\n          {this._requests.length > 0 &&\n          <View style={styles.tableRow}>\n            <View style={styles.urlTitleCellView}>\n              <Text style={styles.cellText} numberOfLines={1}>URL</Text>\n            </View>\n            <View style={styles.methodTitleCellView}>\n              <Text style={styles.cellText} numberOfLines={1}>Type</Text>\n            </View>\n          </View>}\n        </View>\n        <ListView\n          style={styles.listView}\n          ref={this._captureRequestListView}\n          dataSource={this.state.dataSource}\n          renderRow={this._renderRow}\n          enableEmptySections={true}\n          renderSeparator={this._renderSeperator}\n          onLayout={this._listViewOnLayout}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 10,\n    paddingBottom: 10,\n    paddingLeft: 5,\n    paddingRight: 5,\n  },\n  listViewTitle: {\n    height: 20,\n  },\n  listView: {\n    flex: 1,\n    height: 60,\n  },\n  tableRow: {\n    flexDirection: 'row',\n    flex: 1,\n  },\n  cellText: {\n    color: 'white',\n    fontSize: 12,\n  },\n  methodTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 1,\n  },\n  urlTitleCellView: {\n    height: 18,\n    borderColor: '#DCD7CD',\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#444',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  methodOddCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#000',\n    flex: 1,\n  },\n  urlOddCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#000',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  methodEvenCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderRightWidth: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#888',\n    flex: 1,\n  },\n  urlEvenCellView: {\n    height: 15,\n    borderColor: '#DCD7CD',\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    justifyContent: 'center',\n    backgroundColor: '#888',\n    flex: 5,\n    paddingLeft: 3,\n  },\n  detailScrollView: {\n    flex: 1,\n    height: 180,\n    marginTop: 5,\n    marginBottom: 5,\n  },\n  detailKeyCellView: {\n    flex: 1.3,\n  },\n  detailValueCellView: {\n    flex: 2,\n  },\n  detailViewRow: {\n    flexDirection: 'row',\n    paddingHorizontal: 3,\n  },\n  detailViewText: {\n    color: 'white',\n    fontSize: 11,\n  },\n  clostButtonText: {\n    color: 'white',\n    fontSize: 10,\n  },\n  closeButton: {\n    marginTop: 5,\n    backgroundColor: '#888',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nmodule.exports = NetworkOverlay;\n"]}]