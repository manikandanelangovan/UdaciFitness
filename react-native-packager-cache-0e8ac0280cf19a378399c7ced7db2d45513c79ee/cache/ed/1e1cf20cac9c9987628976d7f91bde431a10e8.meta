["069b633ee6a51a6255cc4ece1dfec28f9b11fcfd","273a8c908e3753b6c9192d3e07feeb45e5f58023",["NativeModules"],[51],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Image/ImageStore.js"],"names":["RCTImageStoreManager","require","ImageStoreManager","ImageStore","uri","callback","hasImageForTag","console","warn","removeImageForTag","base64ImageData","success","failure","addImageFromBase64","getBase64ForTag","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,uBAAuBC,yBAAyBC,iBAAtD;;IAEMC,U;;;;;;;mCAKkBC,G,EAAaC,Q,EAAoC;AACrE,UAAIL,qBAAqBM,cAAzB,EAAyC;AACvCN,6BAAqBM,cAArB,CAAoCF,GAApC,EAAyCC,QAAzC;AACD,OAFD,MAEO;AACLE,gBAAQC,IAAR,CAAa,kCAAb;AACD;AACF;;;sCAUwBJ,G,EAAa;AACpC,UAAIJ,qBAAqBS,iBAAzB,EAA4C;AAC1CT,6BAAqBS,iBAArB,CAAuCL,GAAvC;AACD,OAFD,MAEO;AACLG,gBAAQC,IAAR,CAAa,qCAAb;AACD;AACF;;;uCAcCE,e,EACAC,O,EACAC,O,EACA;AACAZ,2BAAqBa,kBAArB,CAAwCH,eAAxC,EAAyDC,OAAzD,EAAkEC,OAAlE;AACD;;;oCAcCR,G,EACAO,O,EACAC,O,EACA;AACAZ,2BAAqBc,eAArB,CAAqCV,GAArC,EAA0CO,OAA1C,EAAmDC,OAAnD;AACD;;;;;AAGHG,OAAOC,OAAP,GAAiBb,UAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ImageStore\n * @flow\n */\n'use strict';\n\nconst RCTImageStoreManager = require('NativeModules').ImageStoreManager;\n\nclass ImageStore {\n  /**\n   * Check if the ImageStore contains image data for the specified URI.\n   * @platform ios\n   */\n  static hasImageForTag(uri: string, callback: (hasImage: bool) => void) {\n    if (RCTImageStoreManager.hasImageForTag) {\n      RCTImageStoreManager.hasImageForTag(uri, callback);\n    } else {\n      console.warn('hasImageForTag() not implemented');\n    }\n  }\n\n  /**\n   * Delete an image from the ImageStore. Images are stored in memory and\n   * must be manually removed when you are finished with them, otherwise they\n   * will continue to use up RAM until the app is terminated. It is safe to\n   * call `removeImageForTag()` without first calling `hasImageForTag()`, it\n   * will simply fail silently.\n   * @platform ios\n   */\n  static removeImageForTag(uri: string) {\n    if (RCTImageStoreManager.removeImageForTag) {\n      RCTImageStoreManager.removeImageForTag(uri);\n    } else {\n      console.warn('removeImageForTag() not implemented');\n    }\n  }\n\n  /**\n   * Stores a base64-encoded image in the ImageStore, and returns a URI that\n   * can be used to access or display the image later. Images are stored in\n   * memory only, and must be manually deleted when you are finished with\n   * them by calling `removeImageForTag()`.\n   *\n   * Note that it is very inefficient to transfer large quantities of binary\n   * data between JS and native code, so you should avoid calling this more\n   * than necessary.\n   * @platform ios\n   */\n  static addImageFromBase64(\n    base64ImageData: string,\n    success: (uri: string) => void,\n    failure: (error: any) => void\n  ) {\n    RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);\n  }\n\n  /**\n   * Retrieves the base64-encoded data for an image in the ImageStore. If the\n   * specified URI does not match an image in the store, the failure callback\n   * will be called.\n   *\n   * Note that it is very inefficient to transfer large quantities of binary\n   * data between JS and native code, so you should avoid calling this more\n   * than necessary. To display an image in the ImageStore, you can just pass\n   * the URI to an `<Image/>` component; there is no need to retrieve the\n   * base64 data.\n   */\n  static getBase64ForTag(\n    uri: string,\n    success: (base64ImageData: string) => void,\n    failure: (error: any) => void\n  ) {\n    RCTImageStoreManager.getBase64ForTag(uri, success, failure);\n  }\n}\n\nmodule.exports = ImageStore;\n"]}]