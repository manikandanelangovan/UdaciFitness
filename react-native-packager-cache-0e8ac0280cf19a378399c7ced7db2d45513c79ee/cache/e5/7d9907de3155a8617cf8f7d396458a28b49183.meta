["02805a06ce1129980a4ce8a2ce0ea551ca2499b2","544e106dfd5b4f005b77e01cbf0fc0ccf8da8279",["ListView","prop-types","React","SwipeableListViewDataSource","SwipeableRow"],[59,96,131,183,242],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js"],"names":["ListView","require","PropTypes","React","SwipeableListViewDataSource","SwipeableRow","SwipeableListView","getRowData","data","sectionID","rowID","getSectionHeaderData","rowHasChanged","row1","row2","sectionHeaderHasChanged","s1","s2","props","context","_listViewRef","_shouldBounceFirstRowOnMount","_onScroll","e","dataSource","getOpenRowID","setState","state","setOpenRowID","onScroll","_renderRow","rowData","slideoutView","renderQuickActions","renderRow","shouldBounceOnMount","getFirstRowID","id","_getMaxSwipeDistance","_onOpen","_onClose","_setListViewScrollable","bounceFirstRowOnMount","nextProps","getDataSource","ref","value","setNativeProps","scrollEnabled","getScrollResponder","maxSwipeDistance","Component","propTypes","bool","isRequired","instanceOf","oneOfType","number","func","defaultProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule SwipeableListView\n * @flow\n */\n'use strict';\n\nconst ListView = require('ListView');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst SwipeableListViewDataSource = require('SwipeableListViewDataSource');\nconst SwipeableRow = require('SwipeableRow');\n\ntype DefaultProps = {\n  bounceFirstRowOnMount: boolean,\n  renderQuickActions: Function,\n};\n\ntype Props = {\n  bounceFirstRowOnMount: boolean,\n  dataSource: SwipeableListViewDataSource,\n  maxSwipeDistance: number | (rowData: any, sectionID: string, rowID: string) => number,\n  onScroll?: ?Function,\n  renderRow: Function,\n  renderQuickActions: Function,\n};\n\ntype State = {\n  dataSource: Object,\n};\n\n/**\n * A container component that renders multiple SwipeableRow's in a ListView\n * implementation. This is designed to be a drop-in replacement for the\n * standard React Native `ListView`, so use it as if it were a ListView, but\n * with extra props, i.e.\n *\n * let ds = SwipeableListView.getNewDataSource();\n * ds.cloneWithRowsAndSections(dataBlob, ?sectionIDs, ?rowIDs);\n * // ..\n * <SwipeableListView renderRow={..} renderQuickActions={..} {..ListView props} />\n *\n * SwipeableRow can be used independently of this component, but the main\n * benefit of using this component is\n *\n * - It ensures that at most 1 row is swiped open (auto closes others)\n * - It can bounce the 1st row of the list so users know it's swipeable\n * - More to come\n */\nclass SwipeableListView extends React.Component<Props, State> {\n  props: Props;\n  state: State;\n\n  _listViewRef: ?React.Element<any> = null;\n  _shouldBounceFirstRowOnMount: boolean = false;\n\n  static getNewDataSource(): Object {\n    return new SwipeableListViewDataSource({\n      getRowData: (data, sectionID, rowID) => data[sectionID][rowID],\n      getSectionHeaderData: (data, sectionID) => data[sectionID],\n      rowHasChanged: (row1, row2) => row1 !== row2,\n      sectionHeaderHasChanged: (s1, s2) => s1 !== s2,\n    });\n  }\n\n  static propTypes = {\n    /**\n     * To alert the user that swiping is possible, the first row can bounce\n     * on component mount.\n     */\n    bounceFirstRowOnMount: PropTypes.bool.isRequired,\n    /**\n     * Use `SwipeableListView.getNewDataSource()` to get a data source to use,\n     * then use it just like you would a normal ListView data source\n     */\n    dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,\n    // Maximum distance to open to after a swipe\n    maxSwipeDistance: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.func,\n    ]).isRequired,\n    // Callback method to render the swipeable view\n    renderRow: PropTypes.func.isRequired,\n    // Callback method to render the view that will be unveiled on swipe\n    renderQuickActions: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    bounceFirstRowOnMount: false,\n    renderQuickActions: () => null,\n  };\n\n  constructor(props: Props, context: any): void {\n    super(props, context);\n\n    this._shouldBounceFirstRowOnMount = this.props.bounceFirstRowOnMount;\n    this.state = {\n      dataSource: this.props.dataSource,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props): void {\n    if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {\n      this.setState({\n        dataSource: nextProps.dataSource,\n      });\n    }\n  }\n\n  render(): React.Node {\n    return (\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      <ListView\n        {...this.props}\n        ref={(ref) => {\n          /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n           * comment suppresses an error when upgrading Flow's support for\n           * React. To see the error delete this comment and run Flow. */\n          this._listViewRef = ref;\n        }}\n        dataSource={this.state.dataSource.getDataSource()}\n        onScroll={this._onScroll}\n        renderRow={this._renderRow}\n      />\n    );\n  }\n\n  _onScroll = (e): void => {\n    // Close any opens rows on ListView scroll\n    if (this.props.dataSource.getOpenRowID()) {\n      this.setState({\n        dataSource: this.state.dataSource.setOpenRowID(null),\n      });\n    }\n    this.props.onScroll && this.props.onScroll(e);\n  }\n\n  /**\n   * This is a work-around to lock vertical `ListView` scrolling on iOS and\n   * mimic Android behaviour. Locking vertical scrolling when horizontal\n   * scrolling is active allows us to significantly improve framerates\n   * (from high 20s to almost consistently 60 fps)\n   */\n  _setListViewScrollable(value: boolean): void {\n    if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {\n      this._listViewRef.setNativeProps({\n        scrollEnabled: value,\n      });\n    }\n  }\n\n  // Passing through ListView's getScrollResponder() function\n  getScrollResponder(): ?Object {\n    if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {\n      return this._listViewRef.getScrollResponder();\n    }\n  }\n\n  // This enables rows having variable width slideoutView.\n  _getMaxSwipeDistance(rowData: Object, sectionID: string, rowID: string): number {\n    if (typeof this.props.maxSwipeDistance === 'function') {\n      return this.props.maxSwipeDistance(rowData, sectionID, rowID);\n    }\n\n    return this.props.maxSwipeDistance;\n  }\n\n  _renderRow = (rowData: Object, sectionID: string, rowID: string): React.Element<any> => {\n    const slideoutView = this.props.renderQuickActions(rowData, sectionID, rowID);\n\n    // If renderQuickActions is unspecified or returns falsey, don't allow swipe\n    if (!slideoutView) {\n      return this.props.renderRow(rowData, sectionID, rowID);\n    }\n\n    let shouldBounceOnMount = false;\n    if (this._shouldBounceFirstRowOnMount) {\n      this._shouldBounceFirstRowOnMount = false;\n      shouldBounceOnMount = rowID === this.props.dataSource.getFirstRowID();\n    }\n\n    return (\n      <SwipeableRow\n        slideoutView={slideoutView}\n        isOpen={rowData.id === this.props.dataSource.getOpenRowID()}\n        maxSwipeDistance={this._getMaxSwipeDistance(rowData, sectionID, rowID)}\n        key={rowID}\n        onOpen={() => this._onOpen(rowData.id)}\n        onClose={() => this._onClose(rowData.id)}\n        onSwipeEnd={() => this._setListViewScrollable(true)}\n        onSwipeStart={() => this._setListViewScrollable(false)}\n        shouldBounceOnMount={shouldBounceOnMount}>\n        {this.props.renderRow(rowData, sectionID, rowID)}\n      </SwipeableRow>\n    );\n  };\n\n  _onOpen(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(rowID),\n    });\n  }\n\n  _onClose(rowID: string): void {\n    this.setState({\n      dataSource: this.state.dataSource.setOpenRowID(null),\n    });\n  }\n}\n\nmodule.exports = SwipeableListView;\n"]}]