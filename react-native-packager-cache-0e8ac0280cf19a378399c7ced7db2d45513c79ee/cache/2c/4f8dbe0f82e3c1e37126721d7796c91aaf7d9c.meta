["0cad64a8c1d9ad46bb41dab532589411bf99e52f","fd71ef42cb72b38c6a51678eaf0a2cd97c3b2a0c",["react","react-native","../utils/helpers","./UdaciSlider","./UdaciStepper","./DateHeader","@expo/vector-icons","./TextButton"],[116,213,254,303,421,540,654,704],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/components/AddEntry.js"],"names":["SubmitButton","onPress","AddEntry","state","run","bike","swim","sleep","eat","increment","metric","max","step","setState","count","decrement","slide","value","submit","reset","key","timeToString","metaInfo","Date","toLocaleDateString","Object","keys","map","getIcon","type","rest"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport { getMetricMetaInfo } from '../utils/helpers'\nimport UdaciSlider from './UdaciSlider'\nimport UdaciStepper from './UdaciStepper'\nimport DateHeader from './DateHeader'\nimport { Ionicons } from '@expo/vector-icons'\nimport TextButton from './TextButton'\n\nfunction SubmitButton ({ onPress }) {\n  return (\n    <TouchableOpacity onPress={onPress}>\n      <Text>SUBMIT</Text>\n    </TouchableOpacity>\n    )\n}\n\nexport default class AddEntry extends Component {\n  state = {\n    run: 0,\n    bike: 0,\n    swim: 0,\n    sleep: 0,\n    eat: 0\n  }\n  \n  increment = (metric) => {\n    const { max, step } = getMetricMetaInfo(metric)\n    \n    this.setState((state) => {\n      const count = state[metric] + step\n      \n      return {\n        ...state,\n        [metric]: count > max ? max : count\n      }\n    })\n  }\n  \n  decrement = (metric) => {\n    this.setState((state) => {\n      const count = state[metric] - getMetricMetaInfo(metric).step\n      \n      return {\n        ...state,\n        [metric]: count < 0 ? 0 : count\n      }\n    })\n  }\n  \n  slide = (metric, value) => {\n    this.setState(() => ({\n      [metric]: value\n    }))\n  }\n  \n  submit = () => {\n    //const key = timeToString()\n    //const entry = this.state\n    \n    // Update redux\n    this.setState(() => ({\n      run: 10,\n      bike: 5,\n      swim: 6,\n      sleep:30,\n      eat: 2,\n    }))\n    \n    // Navigate to home\n    \n    \n    // Save to 'DB'\n    \n    \n    //Clear the local notification\n  }\n  reset = () => {\n      const key = this.timeToString()\n\n      //Unable to Redux\n\n      //Route to Home\n\n      //Update DB\n\n  }\n    render() {\n      const metaInfo = getMetricMetaInfo()\n        if(true) {\n            return (\n                <View>\n                    <Ionicons \n                        name='ios-happy-outline'\n                        size={100}\n                    />\n                    <Text>You already logged your information for today</Text>\n                    <TextButton onPress={this.reset}>\n                        Reset\n                    </TextButton>\n                </View>\n            )\n        }\n        return (\n            <View>\n              <DateHeader date={(new Date()).toLocaleDateString()} />\n                {Object.keys(metaInfo).map((key) => {\n                  const { getIcon, type, ...rest } = metaInfo[key]\n                  const value = this.state[key]\n                  \n                  return (\n                    <View key={key}>\n                      {getIcon()}\n                      { type === 'slider'\n                        ? <UdaciSlider \n                            value={value}\n                            onChange ={(value) => this.slide(key, value)}\n                            {...rest}\n                          />\n                        : <UdaciStepper \n                            value={value}\n                            onIncrement={() => this.increment(key)}\n                            onDecrement={() => this.decrement(key)}\n                            {...rest}\n                        />\n                      }\n                    </View>\n                    )\n                })}\n                <SubmitButton onPress={this.submit} />\n            </View>\n        )\n    }\n}"]}]