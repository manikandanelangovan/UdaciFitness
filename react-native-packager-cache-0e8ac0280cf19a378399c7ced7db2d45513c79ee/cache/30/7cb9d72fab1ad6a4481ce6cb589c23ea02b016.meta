["b5a8e3c8fd8b41fbde9b8cc503466f6fe6a779d5","03baa9c7241431b5db6cc9a845187374d5f071d1",["MatrixMath","Platform","fbjs/lib/invariant","stringifySafe"],[41,79,117,168],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/StyleSheet/processTransform.js"],"names":["MatrixMath","require","Platform","invariant","stringifySafe","processTransform","transform","__DEV__","_validateTransforms","OS","result","createIdentityMatrix","forEach","key","Object","keys","transformation","value","multiplyInto","_multiplyTransform","reusePerspectiveCommand","reuseRotateXCommand","_convertToRadians","reuseRotateYCommand","reuseRotateZCommand","reuseScaleCommand","reuseScaleXCommand","reuseScaleYCommand","reuseTranslate3dCommand","reuseTranslate2dCommand","reuseSkewXCommand","reuseSkewYCommand","Error","matrixMathFunction","args","matrixToApply","argsWithIdentity","concat","apply","floatValue","parseFloat","indexOf","Math","PI","length","_validateTransform","getValue","multivalueTransforms","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule processTransform\n * @flow\n */\n'use strict';\n\nvar MatrixMath = require('MatrixMath');\nvar Platform = require('Platform');\n\nvar invariant = require('fbjs/lib/invariant');\nvar stringifySafe = require('stringifySafe');\n\n/**\n * Generate a transform matrix based on the provided transforms, and use that\n * within the style object instead.\n *\n * This allows us to provide an API that is similar to CSS, where transforms may\n * be applied in an arbitrary order, and yet have a universal, singular\n * interface to native code.\n */\nfunction processTransform(transform: Array<Object>): Array<Object> | Array<number> {\n  if (__DEV__) {\n    _validateTransforms(transform);\n  }\n\n  // Android & iOS implementations of transform property accept the list of\n  // transform properties as opposed to a transform Matrix. This is necessary\n  // to control transform property updates completely on the native thread.\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return transform;\n  }\n\n  var result = MatrixMath.createIdentityMatrix();\n\n  transform.forEach(transformation => {\n    var key = Object.keys(transformation)[0];\n    var value = transformation[key];\n\n    switch (key) {\n      case 'matrix':\n        MatrixMath.multiplyInto(result, result, value);\n        break;\n      case 'perspective':\n        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);\n        break;\n      case 'rotateX':\n        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);\n        break;\n      case 'rotateY':\n        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);\n        break;\n      case 'rotate':\n      case 'rotateZ':\n        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);\n        break;\n      case 'scale':\n        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);\n        break;\n      case 'scaleX':\n        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);\n        break;\n      case 'scaleY':\n        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);\n        break;\n      case 'translate':\n        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);\n        break;\n      case 'translateX':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);\n        break;\n      case 'translateY':\n        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);\n        break;\n      case 'skewX':\n        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);\n        break;\n      case 'skewY':\n        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);\n        break;\n      default:\n        throw new Error('Invalid transform name: ' + key);\n    }\n  });\n\n  return result;\n}\n\n/**\n * Performs a destructive operation on a transform matrix.\n */\nfunction _multiplyTransform(\n  result: Array<number>,\n  matrixMathFunction: Function,\n  args: Array<number>\n): void {\n  var matrixToApply = MatrixMath.createIdentityMatrix();\n  var argsWithIdentity = [matrixToApply].concat(args);\n  matrixMathFunction.apply(this, argsWithIdentity);\n  MatrixMath.multiplyInto(result, result, matrixToApply);\n}\n\n/**\n * Parses a string like '0.5rad' or '60deg' into radians expressed in a float.\n * Note that validation on the string is done in `_validateTransform()`.\n */\nfunction _convertToRadians(value: string): number {\n  var floatValue = parseFloat(value);\n  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;\n}\n\nfunction _validateTransforms(transform: Array<Object>): void {\n  transform.forEach(transformation => {\n    var keys = Object.keys(transformation);\n    invariant(\n      keys.length === 1,\n      'You must specify exactly one property per transform object. Passed properties: %s',\n      stringifySafe(transformation),\n    );\n    var key = keys[0];\n    var value = transformation[key];\n    _validateTransform(key, value, transformation);\n  });\n}\n\nfunction _validateTransform(key, value, transformation) {\n  invariant(\n    !value.getValue,\n    'You passed an Animated.Value to a normal component. ' +\n    'You need to wrap that component in an Animated. For example, ' +\n    'replace <View /> by <Animated.View />.'\n  );\n\n  var multivalueTransforms = [\n    'matrix',\n    'translate',\n  ];\n  if (multivalueTransforms.indexOf(key) !== -1) {\n    invariant(\n      Array.isArray(value),\n      'Transform with key of %s must have an array as the value: %s',\n      key,\n      stringifySafe(transformation),\n    );\n  }\n  switch (key) {\n    case 'matrix':\n      invariant(\n        value.length === 9 || value.length === 16,\n        'Matrix transform must have a length of 9 (2d) or 16 (3d). ' +\n          'Provided matrix has a length of %s: %s',\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translate':\n      invariant(\n        value.length === 2 || value.length === 3,\n        'Transform with key translate must be an array of length 2 or 3, found %s: %s',\n        value.length,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n    case 'rotate':\n    case 'skewX':\n    case 'skewY':\n      invariant(\n        typeof value === 'string',\n        'Transform with key of \"%s\" must be a string: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value.indexOf('deg') > -1 || value.indexOf('rad') > -1,\n        'Rotate transform must be expressed in degrees (deg) or radians ' +\n          '(rad): %s',\n        stringifySafe(transformation),\n      );\n      break;\n    case 'perspective':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      invariant(\n        value !== 0,\n        'Transform with key of \"%s\" cannot be zero: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    case 'translateX':\n    case 'translateY':\n    case 'scale':\n    case 'scaleX':\n    case 'scaleY':\n      invariant(\n        typeof value === 'number',\n        'Transform with key of \"%s\" must be a number: %s',\n        key,\n        stringifySafe(transformation),\n      );\n      break;\n    default:\n      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));\n  }\n}\n\nmodule.exports = processTransform;\n"]}]