["da99aa8e3e1d3a74c964f1d33f5b39ae76640869","4ebbda2bb53f2ad3cc1abc863c668fe87fdbe575",["react-native","regenerator-runtime"],[180,231],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Speech.js"],"names":["speak","isSpeakingAsync","stop","ExponentSpeech","SpeechEventEmitter","_GLOBAL_ID","_CALLBACKS","_LISTENERS_SET","_unregisterListenersIfNeeded","Object","keys","length","removeSpeakingListener","_registerListenersIfNeeded","setSpeakingListener","id","options","onStart","onDone","onStopped","error","onError","text","String","isSpeaking","eventName","callback","listeners","removeAllListeners","addListener"],"mappings":";;;QAmEgBA,K,GAAAA,K;QAOMC,e,GAAAA,e;QAINC,I,GAAAA,I;;AA5EhB;;;;IAEQC,c,8BAAAA,c;;AACR,IAAMC,qBAAqB,oCAAuBD,cAAvB,CAA3B;;AAYA,IAAIE,aAAa,CAAjB;;AAEA,IAAMC,aAAa,EAAnB;AACA,IAAIC,iBAAiB,KAArB;;AAEA,SAASC,4BAAT,GAAwC;AACtC,MAAIC,OAAOC,IAAP,CAAYJ,UAAZ,EAAwBK,MAAxB,KAAmC,CAAvC,EAA0C;AACxCC,2BAAuB,0BAAvB;AACAA,2BAAuB,uBAAvB;AACAA,2BAAuB,0BAAvB;AACAA,2BAAuB,wBAAvB;AACAL,qBAAiB,KAAjB;AACD;AACF;;AAED,SAASM,0BAAT,GAAsC;AACpC,MAAIN,cAAJ,EAAoB;AACpBA,mBAAiB,IAAjB;AACAO,sBAAoB,0BAApB,EAAgD,gBAAY;AAAA,QAATC,EAAS,QAATA,EAAS;;AAC1D,QAAMC,UAAUV,WAAWS,EAAX,CAAhB;AACA,QAAIC,WAAWA,QAAQC,OAAvB,EAAgC;AAC9BD,cAAQC,OAAR;AACD;AACF,GALD;AAMAH,sBAAoB,uBAApB,EAA6C,iBAAY;AAAA,QAATC,EAAS,SAATA,EAAS;;AACvD,QAAMC,UAAUV,WAAWS,EAAX,CAAhB;AACA,QAAIC,WAAWA,QAAQE,MAAvB,EAA+B;AAC7BF,cAAQE,MAAR;AACD;AACD,WAAOZ,WAAWS,EAAX,CAAP;AACAP;AACD,GAPD;AAQAM,sBAAoB,0BAApB,EAAgD,iBAAY;AAAA,QAATC,EAAS,SAATA,EAAS;;AAC1D,QAAMC,UAAUV,WAAWS,EAAX,CAAhB;AACA,QAAIC,WAAWA,QAAQG,SAAvB,EAAkC;AAChCH,cAAQG,SAAR;AACD;AACD,WAAOb,WAAWS,EAAX,CAAP;AACAP;AACD,GAPD;AAQAM,sBAAoB,wBAApB,EAA8C,iBAAmB;AAAA,QAAhBC,EAAgB,SAAhBA,EAAgB;AAAA,QAAZK,KAAY,SAAZA,KAAY;;AAC/D,QAAMJ,UAAUV,WAAWS,EAAX,CAAhB;AACA,QAAIC,WAAWA,QAAQK,OAAvB,EAAgC;AAC9BL,cAAQK,OAAR,CAAgBD,KAAhB;AACD;AACD,WAAOd,WAAWS,EAAX,CAAP;AACAP;AACD,GAPD;AAQD;;AAEM,SAASR,KAAT,CAAesB,IAAf,EAAoD;AAAA,MAAvBN,OAAuB,uEAAJ,EAAI;;AACzD,MAAMD,KAAKV,YAAX;AACAC,aAAWS,EAAX,IAAiBC,OAAjB;AACAH;AACAV,iBAAeH,KAAf,CAAqBuB,OAAOR,EAAP,CAArB,EAAiCO,IAAjC,EAAuCN,OAAvC;AACD;;AAEM,SAAef,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACQE,eAAeqB,UAAf,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAStB,IAAT,GAAgB;AACrBC,iBAAeD,IAAf;AACD;;AAED,SAASY,mBAAT,CAA6BW,SAA7B,EAAwCC,QAAxC,EAAkD;AAChD,MAAItB,mBAAmBuB,SAAnB,CAA6BF,SAA7B,EAAwCd,MAAxC,GAAiD,CAArD,EAAwD;AACtDP,uBAAmBwB,kBAAnB,CAAsCH,SAAtC;AACD;AACDrB,qBAAmByB,WAAnB,CAA+BJ,SAA/B,EAA0CC,QAA1C;AACD;;AAED,SAASd,sBAAT,CAAgCa,SAAhC,EAA2C;AACzCrB,qBAAmBwB,kBAAnB,CAAsCH,SAAtC;AACD","sourcesContent":["// @flow\n\nimport { NativeModules, NativeEventEmitter } from 'react-native';\n\nconst { ExponentSpeech } = NativeModules;\nconst SpeechEventEmitter = new NativeEventEmitter(ExponentSpeech);\n\ntype Options = {\n  language?: string,\n  pitch?: number,\n  rate?: number,\n  onStart?: () => void,\n  onStopped?: () => void,\n  onDone?: () => void,\n  onError?: string => void,\n};\n\nlet _GLOBAL_ID = 1;\n\nconst _CALLBACKS = {};\nlet _LISTENERS_SET = false;\n\nfunction _unregisterListenersIfNeeded() {\n  if (Object.keys(_CALLBACKS).length === 0) {\n    removeSpeakingListener('Exponent.speakingStarted');\n    removeSpeakingListener('Exponent.speakingDone');\n    removeSpeakingListener('Exponent.speakingStopped');\n    removeSpeakingListener('Exponent.speakingError');\n    _LISTENERS_SET = false;\n  }\n}\n\nfunction _registerListenersIfNeeded() {\n  if (_LISTENERS_SET) return;\n  _LISTENERS_SET = true;\n  setSpeakingListener('Exponent.speakingStarted', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStart) {\n      options.onStart();\n    }\n  });\n  setSpeakingListener('Exponent.speakingDone', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onDone) {\n      options.onDone();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingStopped', ({ id }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onStopped) {\n      options.onStopped();\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n  setSpeakingListener('Exponent.speakingError', ({ id, error }) => {\n    const options = _CALLBACKS[id];\n    if (options && options.onError) {\n      options.onError(error);\n    }\n    delete _CALLBACKS[id];\n    _unregisterListenersIfNeeded();\n  });\n}\n\nexport function speak(text: string, options: Options = {}) {\n  const id = _GLOBAL_ID++;\n  _CALLBACKS[id] = options;\n  _registerListenersIfNeeded();\n  ExponentSpeech.speak(String(id), text, options);\n}\n\nexport async function isSpeakingAsync(): Promise<boolean> {\n  return await ExponentSpeech.isSpeaking();\n}\n\nexport function stop() {\n  ExponentSpeech.stop();\n}\n\nfunction setSpeakingListener(eventName, callback) {\n  if (SpeechEventEmitter.listeners(eventName).length > 0) {\n    SpeechEventEmitter.removeAllListeners(eventName);\n  }\n  SpeechEventEmitter.addListener(eventName, callback);\n}\n\nfunction removeSpeakingListener(eventName) {\n  SpeechEventEmitter.removeAllListeners(eventName);\n}\n"]}]