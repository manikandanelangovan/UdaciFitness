["1f17713ff30d7b03d8fdf84efc21429628b4f9be","ac1b68c98ace70f871fbfaffd765783d4b9b3356",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/vendor/core/_shouldPolyfillES6Collection.js"],"names":["_shouldActuallyPolyfillES6Collection","collectionName","Collection","global","Symbol","proto","prototype","clear","size","keys","forEach","cache","_shouldPolyfillES6Collection","result","undefined","module","exports"],"mappings":";AAYA;;AAMA,SAASA,oCAAT,CAA8CC,cAA9C,EAA+E;AAC7E,MAAIC,aAAaC,OAAOF,cAAP,CAAjB;AACA,MAAIC,cAAc,IAAlB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAMD,MAAI,OAAOC,OAAOC,MAAd,KAAyB,UAA7B,EAAyC;AACvC,WAAO,IAAP;AACD;;AAED,MAAIC,QAAQH,WAAWI,SAAvB;;AAKA,SAAOJ,cAAc,IAAd,IACL,OAAOA,UAAP,KAAsB,UADjB,IAEL,OAAOG,MAAME,KAAb,KAAuB,UAFlB,IAGL,IAAIL,UAAJ,GAAiBM,IAAjB,KAA0B,CAHrB,IAIL,OAAOH,MAAMI,IAAb,KAAsB,UAJjB,IAKL,OAAOJ,MAAMK,OAAb,KAAyB,UAL3B;AAMD;;AAED,IAAMC,QAAkC,EAAxC;;AAQA,SAASC,4BAAT,CAAsCX,cAAtC,EAA8D;AAC1D,MAAIY,SAASF,MAAMV,cAAN,CAAb;AACA,MAAIY,WAAWC,SAAf,EAA0B;AACxB,WAAOD,MAAP;AACD;;AAEDA,WAASb,qCAAqCC,cAArC,CAAT;AACAU,QAAMV,cAAN,IAAwBY,MAAxB;AACA,SAAOA,MAAP;AACH;;AAEDE,OAAOC,OAAP,GAAiBJ,4BAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule _shouldPolyfillES6Collection\n * @preventMunge\n * @flow\n */\n'use strict';\n\n/**\n * Checks whether a collection name (e.g. \"Map\" or \"Set\") has a native polyfill\n * that is safe to be used.\n */\nfunction _shouldActuallyPolyfillES6Collection(collectionName: string): boolean {\n  var Collection = global[collectionName];\n  if (Collection == null) {\n    return true;\n  }\n\n  // The iterator protocol depends on `Symbol.iterator`. If a collection is\n  // implemented, but `Symbol` is not, it's going to break iteration because\n  // we'll be using custom \"@@iterator\" instead, which is not implemented on\n  // native collections.\n  if (typeof global.Symbol !== 'function') {\n    return true;\n  }\n\n  var proto = Collection.prototype;\n\n  // These checks are adapted from es6-shim: https://fburl.com/34437854\n  // NOTE: `isCallableWithoutNew` and `!supportsSubclassing` are not checked\n  // because they make debugging with \"break on exceptions\" difficult.\n  return Collection == null ||\n    typeof Collection !== 'function' ||\n    typeof proto.clear !== 'function' ||\n    new Collection().size !== 0 ||\n    typeof proto.keys !== 'function' ||\n    typeof proto.forEach !== 'function';\n}\n\nconst cache: { [name: string]: bool } = {};\n\n  /**\n   * Checks whether a collection name (e.g. \"Map\" or \"Set\") has a native polyfill\n   * that is safe to be used and caches this result.\n   * Make sure to make a first call to this function before a corresponding\n   * property on global was overriden in any way.\n   */\nfunction _shouldPolyfillES6Collection(collectionName: string) {\n    let result = cache[collectionName];\n    if (result !== undefined) {\n      return result;\n    }\n\n    result = _shouldActuallyPolyfillES6Collection(collectionName);\n    cache[collectionName] = result;\n    return result;\n}\n\nmodule.exports = _shouldPolyfillES6Collection;\n"]}]