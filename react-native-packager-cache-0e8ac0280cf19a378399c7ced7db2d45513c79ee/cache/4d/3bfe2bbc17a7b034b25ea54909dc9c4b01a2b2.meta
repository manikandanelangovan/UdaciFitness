["6cf22b03ad3d8a6c9f892b140c824686902c2469","980ed087c9973c9609ef41070f5180d199911cf4",["infoLog","fbjs/lib/invariant"],[38,74],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"names":["infoLog","require","invariant","DEBUG","TaskQueue","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","task","_getCurrentQueue","push","forEach","enqueue","tasksToCancel","map","queue","filter","indexOf","idx","length","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","then","hasTasksToProcess","catch","ex","done","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,UAAUC,OAAV,WAAN;AACA,IAAMC,YAAYD,OAAZ,sBAAN;;AAYA,IAAME,QAAQ,KAAd;;IAkBMC,S;AAQJ,2BAAsD;AAAA,QAAzCC,WAAyC,QAAzCA,WAAyC;AAAA;;AACpD,SAAKC,YAAL,GAAoBD,WAApB;AACA,SAAKE,WAAL,GAAmB,CAAC,EAACC,OAAO,EAAR,EAAYC,SAAS,KAArB,EAAD,CAAnB;AACD;;;;4BAOOC,I,EAAkB;AACxB,WAAKC,gBAAL,GAAwBC,IAAxB,CAA6BF,IAA7B;AACD;;;iCAEYF,K,EAA0B;AAAA;;AACrCA,YAAMK,OAAN,CAAc,UAACH,IAAD;AAAA,eAAU,MAAKI,OAAL,CAAaJ,IAAb,CAAV;AAAA,OAAd;AACD;;;gCAEWK,a,EAAkC;AAE5C,WAAKR,WAAL,GAAmB,KAAKA,WAAL,CAChBS,GADgB,CACZ,UAACC,KAAD;AAAA,wCACAA,KADA;AAEHT,iBAAOS,MAAMT,KAAN,CAAYU,MAAZ,CAAmB,UAACR,IAAD;AAAA,mBAAUK,cAAcI,OAAd,CAAsBT,IAAtB,MAAgC,CAAC,CAA3C;AAAA,WAAnB;AAFJ;AAAA,OADY,EAKhBQ,MALgB,CAKT,UAACD,KAAD,EAAQG,GAAR;AAAA,eAAiBH,MAAMT,KAAN,CAAYa,MAAZ,GAAqB,CAArB,IAA0BD,QAAQ,CAAnD;AAAA,OALS,CAAnB;AAMD;;;wCAYyB;AACxB,aAAO,KAAKT,gBAAL,GAAwBU,MAAxB,GAAiC,CAAxC;AACD;;;kCAKmB;AAClB,UAAMJ,QAAQ,KAAKN,gBAAL,EAAd;AACA,UAAIM,MAAMI,MAAV,EAAkB;AAChB,YAAMX,OAAOO,MAAMK,KAAN,EAAb;AACA,YAAI;AACF,cAAIZ,KAAKa,GAAT,EAAc;AACZpB,qBAASH,QAAQ,yBAAyBU,KAAKc,IAAtC,CAAT;AACA,iBAAKC,WAAL,CAAkBf,IAAlB;AACD,WAHD,MAGO,IAAIA,KAAKgB,GAAT,EAAc;AACnBvB,qBAASH,QAAQ,cAAcU,KAAKc,IAA3B,CAAT;AACAd,iBAAKgB,GAAL;AACD,WAHM,MAGA;AACLxB,sBACE,OAAOQ,IAAP,KAAgB,UADlB,EAEE,8DACEiB,KAAKC,SAAL,CAAelB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAHJ;AAKAP,qBAASH,QAAQ,oBAAR,CAAT;AACAU;AACD;AACF,SAhBD,CAgBE,OAAOmB,CAAP,EAAU;AACVA,YAAEC,OAAF,GAAY,iCAAiCpB,KAAKc,IAAL,IAAa,EAA9C,IAAoD,IAApD,GACVK,EAAEC,OADJ;AAEA,gBAAMD,CAAN;AACD;AACF;AACF;;;uCAK+B;AAC9B,UAAME,WAAW,KAAKxB,WAAL,CAAiBc,MAAjB,GAA0B,CAA3C;AACA,UAAMJ,QAAQ,KAAKV,WAAL,CAAiBwB,QAAjB,CAAd;AACA,UAAId,MAAMR,OAAN,IACAQ,MAAMT,KAAN,CAAYa,MAAZ,KAAuB,CADvB,IAEA,KAAKd,WAAL,CAAiBc,MAAjB,GAA0B,CAF9B,EAEiC;AAC/B,aAAKd,WAAL,CAAiByB,GAAjB;AACA7B,iBAASH,QAAQ,gBAAR,EAA0B,EAAC+B,kBAAD,EAAWE,gBAAgB,KAAK1B,WAAL,CAAiBc,MAA5C,EAA1B,CAAT;AACA,eAAO,KAAKV,gBAAL,EAAP;AACD,OAND,MAMO;AACL,eAAOM,MAAMT,KAAb;AACD;AACF;;;gCAEWE,I,EAAmB;AAAA;;AAK7B,WAAKH,WAAL,CAAiBK,IAAjB,CAAsB,EAACJ,OAAO,EAAR,EAAYC,SAAS,KAArB,EAAtB;AACA,UAAMsB,WAAW,KAAKxB,WAAL,CAAiBc,MAAjB,GAA0B,CAA3C;AACAlB,eAASH,QAAQ,kBAAR,EAA4B,EAAC+B,kBAAD,EAA5B,CAAT;AACA5B,eAASH,QAAQ,mBAAmBU,KAAKc,IAAhC,CAAT;AACAd,WAAKa,GAAL,GACGW,IADH,CACQ,YAAM;AACV/B,iBAASH,QACP,yBAAyBU,KAAKc,IADvB,EAEP,EAACO,kBAAD,EAAWE,gBAAgB,OAAK1B,WAAL,CAAiBc,MAA5C,EAFO,CAAT;AAIA,eAAKd,WAAL,CAAiBwB,QAAjB,EAA2BtB,OAA3B,GAAqC,IAArC;AACA,eAAK0B,iBAAL,MAA4B,OAAK7B,YAAL,EAA5B;AACD,OARH,EASG8B,KATH,CASS,UAACC,EAAD,EAAQ;AACbA,WAAGP,OAAH,mDAA2DpB,KAAKc,IAAhE,UAAyEa,GAAGP,OAA5E;AACA,cAAMO,EAAN;AACD,OAZH,EAaGC,IAbH;AAcD;;;;;AAIHC,OAAOC,OAAP,GAAiBpC,SAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TaskQueue\n * @flow\n */\n'use strict';\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<any>,\n};\nexport type Task = Function | SimpleTask | PromiseTask;\n\nconst DEBUG = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach((task) => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map((queue) => ({\n        ...queue,\n        tasks: queue.tasks.filter((task) => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => (queue.tasks.length > 0 || idx === 0));\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): bool {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('genPromise for task ' + task.name);\n          this._genPromise((task: any)); // Rather than annoying tagged union\n        } else if (task.run) {\n          DEBUG && infoLog('run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2)\n          );\n          DEBUG && infoLog('run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' +\n          e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{tasks: Array<Task>, popable: bool}>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (queue.popable &&\n        queue.tasks.length === 0 &&\n        this._queueStack.length > 1) {\n      this._queueStack.pop();\n      DEBUG && infoLog('popped queue: ', {stackIdx, queueStackSize: this._queueStack.length});\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('push new queue: ', {stackIdx});\n    DEBUG && infoLog('exec gen task ' + task.name);\n    task.gen()\n      .then(() => {\n        DEBUG && infoLog(\n          'onThen for gen task ' + task.name,\n          {stackIdx, queueStackSize: this._queueStack.length},\n        );\n        this._queueStack[stackIdx].popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch((ex) => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\n\nmodule.exports = TaskQueue;\n"]}]