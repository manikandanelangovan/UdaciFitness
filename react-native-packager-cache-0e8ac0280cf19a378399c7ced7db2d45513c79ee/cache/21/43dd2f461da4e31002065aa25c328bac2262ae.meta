["3f8e947347ecc5f939d4065106ed132091664a18","6494859d1ea964ec14a8a8a3e5d7cb094453b8ea",["prop-types","NativeModules","createStrictShapeTypeChecker","fbjs/lib/invariant"],[60,158,238,295],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/CameraRoll/CameraRoll.js"],"names":["PropTypes","require","checkPropTypes","RCTCameraRollManager","CameraRollManager","createStrictShapeTypeChecker","invariant","GROUP_TYPES_OPTIONS","Album","All","Event","Faces","Library","PhotoStream","SavedPhotos","ASSET_TYPE_OPTIONS","Videos","Photos","getPhotosParamChecker","first","number","isRequired","after","string","groupTypes","oneOf","Object","keys","groupName","assetType","mimeTypes","arrayOf","getPhotosReturnChecker","edges","node","type","group_name","image","uri","height","width","isStored","bool","playableDuration","timestamp","location","latitude","longitude","altitude","heading","speed","page_info","has_next_page","start_cursor","end_cursor","CameraRoll","tag","console","warn","saveToCameraRoll","undefined","mediaType","indexOf","split","slice","params","__DEV__","arguments","length","successCallback","callback","response","errorCallback","getPhotos","then","GroupTypesOptions","AssetTypeOptions","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CameraRoll\n * @flow\n * @format\n */\n'use strict';\n\nconst PropTypes = require('prop-types');\nconst {checkPropTypes} = PropTypes;\nconst RCTCameraRollManager = require('NativeModules').CameraRollManager;\n\nconst createStrictShapeTypeChecker = require('createStrictShapeTypeChecker');\nconst invariant = require('fbjs/lib/invariant');\n\nconst GROUP_TYPES_OPTIONS = {\n  Album: 'Album',\n  All: 'All',\n  Event: 'Event',\n  Faces: 'Faces',\n  Library: 'Library',\n  PhotoStream: 'PhotoStream',\n  SavedPhotos: 'SavedPhotos', // default\n};\n\nconst ASSET_TYPE_OPTIONS = {\n  All: 'All',\n  Videos: 'Videos',\n  Photos: 'Photos',\n};\n\n/**\n * Shape of the param arg for the `getPhotos` function.\n */\nconst getPhotosParamChecker = createStrictShapeTypeChecker({\n  /**\n   * The number of photos wanted in reverse order of the photo application\n   * (i.e. most recent first for SavedPhotos).\n   */\n  first: PropTypes.number.isRequired,\n\n  /**\n   * A cursor that matches `page_info { end_cursor }` returned from a previous\n   * call to `getPhotos`\n   */\n  after: PropTypes.string,\n\n  /**\n   * Specifies which group types to filter the results to.\n   */\n  groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),\n\n  /**\n   * Specifies filter on group names, like 'Recent Photos' or custom album\n   * titles.\n   */\n  groupName: PropTypes.string,\n\n  /**\n  * Specifies filter on asset type\n  */\n  assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),\n\n  /**\n   * Filter by mimetype (e.g. image/jpeg).\n   */\n  mimeTypes: PropTypes.arrayOf(PropTypes.string),\n});\n\n/**\n * Shape of the return value of the `getPhotos` function.\n */\nconst getPhotosReturnChecker = createStrictShapeTypeChecker({\n  // $FlowFixMe(>=0.41.0)\n  edges: PropTypes.arrayOf(\n    createStrictShapeTypeChecker({\n      node: createStrictShapeTypeChecker({\n        type: PropTypes.string.isRequired,\n        group_name: PropTypes.string.isRequired,\n        image: createStrictShapeTypeChecker({\n          uri: PropTypes.string.isRequired,\n          height: PropTypes.number.isRequired,\n          width: PropTypes.number.isRequired,\n          isStored: PropTypes.bool,\n          playableDuration: PropTypes.number.isRequired,\n        }).isRequired,\n        timestamp: PropTypes.number.isRequired,\n        location: createStrictShapeTypeChecker({\n          latitude: PropTypes.number,\n          longitude: PropTypes.number,\n          altitude: PropTypes.number,\n          heading: PropTypes.number,\n          speed: PropTypes.number,\n        }),\n      }).isRequired,\n    }),\n  ).isRequired,\n  page_info: createStrictShapeTypeChecker({\n    has_next_page: PropTypes.bool.isRequired,\n    start_cursor: PropTypes.string,\n    end_cursor: PropTypes.string,\n  }).isRequired,\n});\n\n/**\n * `CameraRoll` provides access to the local camera roll / gallery.\n * Before using this you must link the `RCTCameraRoll` library.\n * You can refer to [Linking](docs/linking-libraries-ios.html) for help.\n *\n * ### Permissions\n * The user's permission is required in order to access the Camera Roll on devices running iOS 10 or later.\n * Add the `NSPhotoLibraryUsageDescription` key in your `Info.plist` with a string that describes how your\n * app will use this data. This key will appear as `Privacy - Photo Library Usage Description` in Xcode.\n *\n */\nclass CameraRoll {\n  static GroupTypesOptions: Object = GROUP_TYPES_OPTIONS;\n  static AssetTypeOptions: Object = ASSET_TYPE_OPTIONS;\n\n  /**\n   * `CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.\n   */\n  static saveImageWithTag(tag: string): Promise<Object> {\n    console.warn(\n      '`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.',\n    );\n    return this.saveToCameraRoll(tag, 'photo');\n  }\n\n  /**\n   * Saves the photo or video to the camera roll / gallery.\n   *\n   * On Android, the tag must be a local image or video URI, such as `\"file:///sdcard/img.png\"`.\n   *\n   * On iOS, the tag can be any image URI (including local, remote asset-library and base64 data URIs)\n   * or a local video file URI (remote or data URIs are not supported for saving video at this time).\n   *\n   * If the tag has a file extension of .mov or .mp4, it will be inferred as a video. Otherwise\n   * it will be treated as a photo. To override the automatic choice, you can pass an optional\n   * `type` parameter that must be one of 'photo' or 'video'.\n   *\n   * Returns a Promise which will resolve with the new URI.\n   */\n  static saveToCameraRoll(\n    tag: string,\n    type?: 'photo' | 'video',\n  ): Promise<Object> {\n    invariant(\n      typeof tag === 'string',\n      'CameraRoll.saveToCameraRoll must be a valid string.',\n    );\n\n    invariant(\n      type === 'photo' || type === 'video' || type === undefined,\n      // $FlowFixMe(>=0.28.0)\n      `The second argument to saveToCameraRoll must be 'photo' or 'video'. You passed ${type}`,\n    );\n\n    let mediaType = 'photo';\n    if (type) {\n      mediaType = type;\n    } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {\n      mediaType = 'video';\n    }\n\n    return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);\n  }\n\n  /**\n   * Returns a Promise with photo identifier objects from the local camera\n   * roll of the device matching shape defined by `getPhotosReturnChecker`.\n   *\n   * Expects a params object of the following shape:\n   *\n   * - `first` : {number} : The number of photos wanted in reverse order of the photo application (i.e. most recent first for SavedPhotos).\n   * - `after` : {string} : A cursor that matches `page_info { end_cursor }` returned from a previous call to `getPhotos`.\n   * - `groupTypes` : {string} : Specifies which group types to filter the results to. Valid values are:\n   *      - `Album`\n   *      - `All`\n   *      - `Event`\n   *      - `Faces`\n   *      - `Library`\n   *      - `PhotoStream`\n   *      - `SavedPhotos` // default\n   * - `groupName` : {string} : Specifies filter on group names, like 'Recent Photos' or custom album titles.\n   * - `assetType` : {string} : Specifies filter on asset type. Valid values are:\n   *      - `All`\n   *      - `Videos`\n   *      - `Photos` // default\n   * - `mimeTypes` : {string} : Filter by mimetype (e.g. image/jpeg).\n   *\n   * Returns a Promise which when resolved will be of the following shape:\n   *\n   * - `edges` : {Array<node>} An array of node objects\n   *      - `node`: {object} An object with the following shape:\n   *          - `type`: {string}\n   *          - `group_name`: {string}\n   *          - `image`: {object} : An object with the following shape:\n   *              - `uri`: {string}\n   *              - `height`: {number}\n   *              - `width`: {number}\n   *              - `isStored`: {boolean}\n   *          - `timestamp`: {number}\n   *          - `location`: {object} : An object with the following shape:\n   *              - `latitude`: {number}\n   *              - `longitude`: {number}\n   *              - `altitude`: {number}\n   *              - `heading`: {number}\n   *              - `speed`: {number}\n   * - `page_info` : {object} : An object with the following shape:\n   *      - `has_next_page`: {boolean}\n   *      - `start_cursor`: {boolean}\n   *      - `end_cursor`: {boolean}\n   */\n  static getPhotos(params) {\n    if (__DEV__) {\n      checkPropTypes(\n        {params: getPhotosParamChecker},\n        {params},\n        'params',\n        'CameraRoll.getPhotos',\n      );\n    }\n    if (arguments.length > 1) {\n      console.warn(\n        'CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead',\n      );\n      let successCallback = arguments[1];\n      if (__DEV__) {\n        const callback = arguments[1];\n        successCallback = response => {\n          checkPropTypes(\n            {response: getPhotosReturnChecker},\n            {response},\n            'response',\n            'CameraRoll.getPhotos callback',\n          );\n          callback(response);\n        };\n      }\n      const errorCallback = arguments[2] || (() => {});\n      RCTCameraRollManager.getPhotos(params).then(\n        successCallback,\n        errorCallback,\n      );\n    }\n    // TODO: Add the __DEV__ check back in to verify the Promise result\n    return RCTCameraRollManager.getPhotos(params);\n  }\n}\n\nmodule.exports = CameraRoll;\n"]}]