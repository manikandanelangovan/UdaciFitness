["ed19c99d2fb0307ac5c6aa11bc1f0c179d0c5f0a","0d107e46368f0534eb24bbe7dfacd36427a57961",["./AnimatedInterpolation","./AnimatedNode","./AnimatedWithChildren","InteractionManager","../NativeAnimatedHelper"],[52,107,161,221,279],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Animated/src/nodes/AnimatedValue.js"],"names":["AnimatedInterpolation","require","AnimatedNode","AnimatedWithChildren","InteractionManager","NativeAnimatedHelper","NativeAnimatedAPI","API","_uniqueId","_flush","rootNode","animatedStyles","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","animatedStyle","AnimatedValue","value","_startingValue","_value","_offset","_animation","_listeners","stopAnimation","Object","keys","length","_startListeningToNativeValueUpdates","stop","_updateValue","__isNative","setAnimatedNodeValue","__getNativeTag","offset","setAnimatedNodeOffset","flattenAnimatedNodeOffset","extractAnimatedNodeOffset","callback","id","String","_stopListeningForNativeValueUpdates","__nativeAnimatedValueListener","startListeningToAnimatedNodeValue","nativeEventEmitter","addListener","data","tag","remove","stopListeningToAnimatedNodeValue","stopTracking","__getValue","config","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","clearInteractionHandle","result","_tracking","__detach","tracking","flush","key","type","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AnimatedValue\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedInterpolation = require('./AnimatedInterpolation');\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst InteractionManager = require('InteractionManager');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\ntype ValueListenerCallback = (state: {value: number}) => void;\n\nlet _uniqueId = 1;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nfunction _flush(rootNode: AnimatedValue): void {\n  const animatedStyles = new Set();\n  function findAnimatedStyles(node) {\n    if (typeof node.update === 'function') {\n      animatedStyles.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  /* $FlowFixMe */\n  animatedStyles.forEach(animatedStyle => animatedStyle.update());\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n */\nclass AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedNode;\n  _listeners: {[key: string]: ValueListenerCallback};\n  __nativeAnimatedValueListener: ?any;\n\n  constructor(value: number) {\n    super();\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    this._listeners = {};\n  }\n\n  __detach() {\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  __makeNative() {\n    super.__makeNative();\n\n    if (Object.keys(this._listeners).length) {\n      this._startListeningToNativeValueUpdates();\n    }\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Adds an asynchronous listener to the value so you can observe updates from\n   * animations.  This is useful because there is no way to\n   * synchronously read the value because it might be driven natively.\n   */\n  addListener(callback: ValueListenerCallback): string {\n    const id = String(_uniqueId++);\n    this._listeners[id] = callback;\n    if (this.__isNative) {\n      this._startListeningToNativeValueUpdates();\n    }\n    return id;\n  }\n\n  removeListener(id: string): void {\n    delete this._listeners[id];\n    if (this.__isNative && Object.keys(this._listeners).length === 0) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  removeAllListeners(): void {\n    this._listeners = {};\n    if (this.__isNative) {\n      this._stopListeningForNativeValueUpdates();\n    }\n  }\n\n  _startListeningToNativeValueUpdates() {\n    if (this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());\n    this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener(\n      'onAnimatedValueUpdate',\n      data => {\n        if (data.tag !== this.__getNativeTag()) {\n          return;\n        }\n        this._updateValue(data.value, false /* flush */);\n      },\n    );\n  }\n\n  _stopListeningForNativeValueUpdates() {\n    if (!this.__nativeAnimatedValueListener) {\n      return;\n    }\n\n    this.__nativeAnimatedValueListener.remove();\n    this.__nativeAnimatedValueListener = null;\n    NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());\n  }\n\n  /**\n   * Stops any running animation or tracking.  `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    callback && callback(this.__getValue());\n  }\n\n  /**\n  * Stops any animation and resets the value to its original\n  */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate(config: InterpolationConfigType): AnimatedInterpolation {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedNode): void {\n    this.stopTracking();\n    this._tracking = tracking;\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    this._value = value;\n    if (flush) {\n      _flush(this);\n    }\n    for (const key in this._listeners) {\n      this._listeners[key]({value: this.__getValue()});\n    }\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n\nmodule.exports = AnimatedValue;\n"]}]