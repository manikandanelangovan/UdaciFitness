["84afc9d9a0604c09b030a3aeaad662c2553893c1","5309036e9535ee0cbb40277f7d0a297ce3a46bc2",["bezier"],[2192],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Animated/src/Easing.js"],"names":["ease","Easing","n","t","bezier","Math","pow","cos","PI","sqrt","bounciness","p","s","undefined","x1","y1","x2","y2","_bezier","require","easing","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Easing\n * @flow\n */\n'use strict';\n\nlet ease;\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nclass Easing {\n  /**\n   * A stepping function, returns 1 for any positive value of `n`.\n   */\n  static step0(n) {\n    return n > 0 ? 1 : 0;\n  }\n\n  /**\n   * A stepping function, returns 1 if `n` is greater than or equal to 1.\n   */\n  static step1(n) {\n    return n >= 1 ? 1 : 0;\n  }\n\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t: number): number {\n    if (!ease) {\n      ease = Easing.bezier(0.42, 0, 1, 1);\n    }\n    return ease(t);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return t * t;\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return t * t * t;\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return (t) => Math.pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return Math.pow(2, 10 * (t - 1));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   *\n   * Wolfram Plots:\n   *\n   * - http://tiny.cc/elastic_b_1 (bounciness = 1, default)\n   * - http://tiny.cc/elastic_b_3 (bounciness = 3)\n   */\n  static elastic(bounciness: number = 1): (t: number) => number {\n    const p = bounciness * Math.PI;\n    return (t) => 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s: number): (t: number) => number {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return (t) => t * t * ((s + 1) * t - s);\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t: number): number {\n    if (t < 1 / 2.75) {\n      return 7.5625 * t * t;\n    }\n\n    if (t < 2 / 2.75) {\n      t -= 1.5 / 2.75;\n      return 7.5625 * t * t + 0.75;\n    }\n\n    if (t < 2.5 / 2.75) {\n      t -= 2.25 / 2.75;\n      return 7.5625 * t * t + 0.9375;\n    }\n\n    t -= 2.625 / 2.75;\n    return 7.5625 * t * t + 0.984375;\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number\n  ): (t: number) => number {\n    const _bezier = require('bezier');\n    return _bezier(x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(\n    easing: (t: number) => number,\n  ): (t: number) => number {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(\n    easing: (t: number) => number,\n  ): (t: number) => number {\n    return (t) => 1 - easing(1 - t);\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(\n    easing: (t: number) => number,\n  ): (t: number) => number {\n    return (t) => {\n      if (t < 0.5) {\n        return easing(t * 2) / 2;\n      }\n      return 1 - easing((1 - t) * 2) / 2;\n    };\n  }\n}\n\nmodule.exports = Easing;\n"]}]