["0e71be1d5d75fff49e9f45e44bfc3290c7b2458b","7f0010b674ad41b81d1e2ffc524feabd66da739b",["react","prop-types","react-native","./AV","regenerator-runtime"],[342,437,547,583,626],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/av/Video.js"],"names":["IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","Video","props","_assignRoot","component","_root","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","callback","_performOperationAndHandleStatusAsync","operation","Error","_setIOSFullscreen","value","OS","tag","ExponentVideoManager","setFullscreen","presentIOSFullscreenPlayer","dismissIOSFullscreenPlayer","getStatusAsync","ExponentAV","getStatusForVideo","setOnPlaybackStatusUpdate","setNativeProps","setCallback","console","warn","loadAsync","source","initialStatus","downloadFirst","uri","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","setStatusAsync","setStatusForVideo","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onIOSFullscreenUpdate","usePoster","nativeProps","nativeResizeMode","UIManager","ExponentVideo","Constants","ScaleNone","RESIZE_MODE_STRETCH","ScaleToFill","RESIZE_MODE_CONTAIN","ScaleAspectFit","RESIZE_MODE_COVER","ScaleAspectFill","forEach","prop","style","onStatusUpdateNative","onLoadStartNative","onLoadNative","onErrorNative","onReadyForDisplayNative","onFullscreenUpdateNative","posterSource","prototype","propTypes","oneOfType","shape","string","number","func","useNativeControls","bool","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","isMuted","isLooping","scaleX","scaleY","translateX","translateY","rotation","nativeOnly"],"mappings":"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","sourcesContent":["// @flow\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Image,\n  findNodeHandle,\n  NativeModules,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  View,\n  ViewPropTypes,\n} from 'react-native';\n\nimport {\n  _COMMON_AV_PLAYBACK_METHODS,\n  _getURIFromSource,\n  _getURIAndFullInitialStatusForLoadAsync,\n  _throwErrorIfValuesOutOfBoundsInStatus,\n  _getUnloadedStatus,\n  type PlaybackSource,\n  type PlaybackStatus,\n  type PlaybackStatusToSet,\n} from './AV';\n\nexport type NaturalSize = {\n  width: number,\n  height: number,\n  orientation: 'portrait' | 'landscape',\n};\n\ntype ResizeMode = 'contain' | 'cover' | 'stretch';\n\ntype ReadyForDisplayEvent = {\n  naturalSize: NaturalSize,\n  status: PlaybackStatus,\n};\n\ntype FullscreenUpdateEvent = {\n  fullscreenUpdate: 0 | 1 | 2 | 3,\n  status: PlaybackStatus,\n};\n\n// TODO extend the Props type from Component\ntype Props = {\n  // Source stuff\n  source?: PlaybackSource, // { uri: 'http://foo/bar.mp4' }, Asset, or require('./foo/bar.mp4')\n  posterSource?: { uri: string } | number, // { uri: 'http://foo/bar.mp4' } or require('./foo/bar.mp4')\n\n  // Callbacks\n  callback?: (status: PlaybackStatus) => void, // DEPRECATED -- WILL BE REMOVED IN SDK21\n  onPlaybackStatusUpdate?: (status: PlaybackStatus) => void,\n  onLoadStart?: () => void,\n  onLoad?: (status: PlaybackStatus) => void,\n  onError?: (error: string) => void,\n  onReadyForDisplay?: (event: ReadyForDisplayEvent) => void,\n  onIOSFullscreenUpdate?: (event: FullscreenUpdateEvent) => void,\n\n  // UI stuff\n  useNativeControls?: boolean,\n  resizeMode?: ResizeMode,\n  usePoster?: boolean,\n\n  // Playback API\n  status?: PlaybackStatusToSet,\n  progressUpdateIntervalMillis?: number,\n  positionMillis?: number,\n  shouldPlay?: boolean,\n  rate?: number,\n  shouldCorrectPitch?: boolean,\n  volume?: number,\n  isMuted?: boolean,\n  isLooping?: boolean,\n\n  // Required by react-native\n  scaleX?: number,\n  scaleY?: number,\n  translateX?: number,\n  translateY?: number,\n  rotation?: number,\n\n  // plus View props\n};\n\ntype NativeProps = {\n  uri?: ?string,\n  nativeResizeMode?: Object,\n  status?: PlaybackStatusToSet,\n  onStatusUpdateNative?: (event: Object) => void,\n  onReadyForDisplayNative?: (event: Object) => void,\n  onFullscreenUpdateNative?: (event: Object) => void,\n  useNativeControls?: boolean,\n\n  // plus View props\n  style?: Object,\n  // etc...\n};\n\ntype State = {\n  showPoster: boolean,\n};\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n});\n\nexport default class Video extends Component<Props, State> {\n  static RESIZE_MODE_CONTAIN = 'contain';\n  static RESIZE_MODE_COVER = 'cover';\n  static RESIZE_MODE_STRETCH = 'stretch';\n\n  _root: ExponentVideo;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showPoster: props.usePoster != null && props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: NativeProps) {\n    this._root.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _assignRoot = (component: ExponentVideo) => {\n    this._root = component;\n  };\n\n  _handleNewStatus = (status: PlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    } else if (this.props.callback) {\n      // DEPRECATED -- WILL BE REMOVED IN SDK21\n      this.props.callback(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> => {\n    if (this._root) {\n      const status: PlaybackStatus = await operation(\n        findNodeHandle(this._root)\n      );\n      this._handleNewStatus(status);\n      return status;\n    } else {\n      throw new Error(\n        'Cannot complete operation because the Video component has not yet loaded.'\n      );\n    }\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setIOSFullscreen = async (value: boolean) => {\n    if (Platform.OS !== 'ios') {\n      throw new Error('Cannot call fullscreen method if the OS is not iOS!');\n    }\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentVideoManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentIOSFullscreenPlayer = async () => {\n    return this._setIOSFullscreen(true);\n  };\n\n  dismissIOSFullscreenPlayer = async () => {\n    return this._setIOSFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  setOnPlaybackStatusUpdate = (\n    onPlaybackStatusUpdate: ?(status: PlaybackStatus) => void\n  ) => {\n    this.setNativeProps({ onPlaybackStatusUpdate });\n    this.getStatusAsync();\n  };\n\n  // DEPRECATED -- WILL BE REMOVED IN SDK21:\n  setCallback = (callback: ?(status: PlaybackStatus) => void) => {\n    console.warn(\n      `'Video.setCallback()' is deprecated and will be removed in SDK21. Use 'Video.setOnPlaybackStatusUpdate()' instead.`\n    );\n    this.setOnPlaybackStatusUpdate(callback);\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> => {\n    const {\n      uri,\n      fullInitialStatus,\n    } = await _getURIAndFullInitialStatusForLoadAsync(\n      source,\n      initialStatus,\n      downloadFirst\n    );\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.loadForVideo(tag, uri, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> => {\n    _throwErrorIfValuesOutOfBoundsInStatus(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      NativeModules.ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  // Additional convenience methods on top of setStatusAsync are defined via _COMMON_AV_PLAYBACK_METHODS:\n  playAsync: () => Promise<PlaybackStatus>;\n  playFromPositionAsync: (positionMillis: number) => Promise<PlaybackStatus>;\n  pauseAsync: () => Promise<PlaybackStatus>;\n  stopAsync: () => Promise<PlaybackStatus>;\n  setPositionAsync: (positionMillis: number) => Promise<PlaybackStatus>;\n  setRateAsync: (\n    rate: number,\n    shouldCorrectPitch: boolean\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: PlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = (event: SyntheticEvent<*>) => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: PlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(_getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: ReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: {\n    nativeEvent: FullscreenUpdateEvent,\n  }) => {\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  render() {\n    // DEPRECATED -- WILL BE REMOVED IN SDK21:\n    if (this.props.callback) {\n      console.warn(\n        `The prop 'callback' on Video is deprecated and will be removed in SDK21. Use the new 'onPlaybackStatusUpdate' prop instead.`\n      );\n    }\n\n    const uri: ?string = _getURIFromSource(this.props.source);\n\n    let nativeResizeMode: Object =\n      NativeModules.UIManager.ExponentVideo.Constants.ScaleNone;\n    if (this.props.resizeMode) {\n      let resizeMode: ResizeMode = this.props.resizeMode;\n      if (resizeMode === Video.RESIZE_MODE_STRETCH) {\n        nativeResizeMode =\n          NativeModules.UIManager.ExponentVideo.Constants.ScaleToFill;\n      } else if (resizeMode === Video.RESIZE_MODE_CONTAIN) {\n        nativeResizeMode =\n          NativeModules.UIManager.ExponentVideo.Constants.ScaleAspectFit;\n      } else if (resizeMode === Video.RESIZE_MODE_COVER) {\n        nativeResizeMode =\n          NativeModules.UIManager.ExponentVideo.Constants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props (casting as Object to appease flow)\n    const status: Object = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props (casting as Object to appease flow)\n    const nativeProps: NativeProps = {\n      style: _STYLES.base,\n      ...this.props,\n      uri,\n      nativeResizeMode,\n      status,\n      onStatusUpdateNative: this._nativeOnPlaybackStatusUpdate,\n      onLoadStartNative: this._nativeOnLoadStart,\n      onLoadNative: this._nativeOnLoad,\n      onErrorNative: this._nativeOnError,\n      onReadyForDisplayNative: this._nativeOnReadyForDisplay,\n      onFullscreenUpdateNative: this._nativeOnFullscreenUpdate,\n    };\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <View style={nativeProps.style}>\n        <ExponentVideo ref={this._assignRoot} {...nativeProps} />\n        <Image style={_STYLES.poster} source={this.props.posterSource} />\n      </View>\n    ) : (\n      <ExponentVideo ref={this._assignRoot} {...nativeProps} />\n    );\n  }\n}\n\nObject.assign(Video.prototype, _COMMON_AV_PLAYBACK_METHODS);\n\nVideo.propTypes = {\n  // Source stuff\n  source: PropTypes.oneOfType([\n    PropTypes.shape({\n      uri: PropTypes.string,\n    }), // remote URI like { uri: 'http://foo/bar.mp4' }\n    PropTypes.number, // asset module like require('./foo/bar.mp4')\n  ]),\n  posterSource: PropTypes.oneOfType([\n    PropTypes.shape({\n      uri: PropTypes.string,\n    }), // remote URI like { uri: 'http://foo/bar.mp4' }\n    PropTypes.number, // asset module like require('./foo/bar.mp4')\n  ]),\n\n  // Callbacks\n  callback: PropTypes.func, // DEPRECATED -- WILL BE REMOVED IN SDK21\n  onPlaybackStatusUpdate: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoad: PropTypes.func,\n  onError: PropTypes.func,\n  onIOSFullscreenUpdate: PropTypes.func,\n  onReadyForDisplay: PropTypes.func,\n\n  // UI stuff\n  useNativeControls: PropTypes.bool,\n  resizeMode: PropTypes.string,\n  usePoster: PropTypes.bool,\n\n  // Playback API\n  status: PropTypes.shape({\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool,\n  }),\n  progressUpdateIntervalMillis: PropTypes.number,\n  positionMillis: PropTypes.number,\n  shouldPlay: PropTypes.bool,\n  rate: PropTypes.number,\n  shouldCorrectPitch: PropTypes.bool,\n  volume: PropTypes.number,\n  isMuted: PropTypes.bool,\n  isLooping: PropTypes.bool,\n\n  // Required by react-native\n  scaleX: PropTypes.number,\n  scaleY: PropTypes.number,\n  translateX: PropTypes.number,\n  translateY: PropTypes.number,\n  rotation: PropTypes.number,\n  ...ViewPropTypes,\n};\n\nconst ExponentVideo = requireNativeComponent('ExponentVideo', Video, {\n  nativeOnly: {\n    uri: true,\n    nativeResizeMode: true,\n    onStatusUpdateNative: true,\n    onLoadStartNative: true,\n    onLoadNative: true,\n    onErrorNative: true,\n    onReadyForDisplayNative: true,\n    onFullscreenUpdateNative: true,\n  },\n});\n"]}]