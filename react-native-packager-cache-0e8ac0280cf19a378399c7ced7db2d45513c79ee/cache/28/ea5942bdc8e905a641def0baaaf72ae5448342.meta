["e2c879545a1b66412ae2604462e97f6a5f394e9e","4084d8da975de500b07741dfb48610b57270fc84",["ElementProperties","NetworkOverlay","PerformanceOverlay","React","prop-types","ScrollView","StyleSheet","Text","TouchableHighlight","View"],[48,99,151,194,228,268,308,342,384,426],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Inspector/InspectorPanel.js"],"names":["ElementProperties","require","NetworkOverlay","PerformanceOverlay","React","PropTypes","ScrollView","StyleSheet","Text","TouchableHighlight","View","InspectorPanel","props","inspecting","styles","waitingText","contents","inspected","properties","style","frame","source","hierarchy","selection","setSelection","perfing","networking","waiting","renderWaiting","container","devtoolsIsOpen","buttonRow","setInspecting","setPerfing","setNetworking","touchTargetting","setTouchTargetting","Component","propTypes","bool","func","object","Button","onClick","pressed","button","buttonPressed","buttonText","title","create","flexDirection","backgroundColor","margin","height","justifyContent","alignItems","textAlign","color","fontSize","marginVertical","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule InspectorPanel\n * @flow\n */\n'use strict';\n\nconst ElementProperties = require('ElementProperties');\nconst NetworkOverlay = require('NetworkOverlay');\nconst PerformanceOverlay = require('PerformanceOverlay');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ScrollView = require('ScrollView');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableHighlight = require('TouchableHighlight');\nconst View = require('View');\n\nclass InspectorPanel extends React.Component<$FlowFixMeProps> {\n  renderWaiting() {\n    if (this.props.inspecting) {\n      return (\n        <Text style={styles.waitingText}>\n          Tap something to inspect it\n        </Text>\n      );\n    }\n    return <Text style={styles.waitingText}>Nothing is inspected</Text>;\n  }\n\n  render() {\n    let contents;\n    if (this.props.inspected) {\n      contents = (\n        <ScrollView style={styles.properties}>\n          <ElementProperties\n            style={this.props.inspected.style}\n            frame={this.props.inspected.frame}\n            source={this.props.inspected.source}\n            hierarchy={this.props.hierarchy}\n            selection={this.props.selection}\n            setSelection={this.props.setSelection}\n          />\n        </ScrollView>\n      );\n    } else if (this.props.perfing) {\n      contents = (\n        <PerformanceOverlay />\n      );\n    } else if (this.props.networking) {\n      contents = (\n        <NetworkOverlay />\n      );\n    } else {\n      contents = (\n        <View style={styles.waiting}>\n          {this.renderWaiting()}\n        </View>\n      );\n    }\n    return (\n      <View style={styles.container}>\n        {!this.props.devtoolsIsOpen && contents}\n        <View style={styles.buttonRow}>\n          <Button\n            title={'Inspect'}\n            pressed={this.props.inspecting}\n            onClick={this.props.setInspecting}\n          />\n          <Button title={'Perf'}\n            pressed={this.props.perfing}\n            onClick={this.props.setPerfing}\n          />\n          <Button title={'Network'}\n            pressed={this.props.networking}\n            onClick={this.props.setNetworking}\n          />\n          <Button title={'Touchables'}\n            pressed={this.props.touchTargetting}\n            onClick={this.props.setTouchTargetting}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nInspectorPanel.propTypes = {\n  devtoolsIsOpen: PropTypes.bool,\n  inspecting: PropTypes.bool,\n  setInspecting: PropTypes.func,\n  inspected: PropTypes.object,\n  perfing: PropTypes.bool,\n  setPerfing: PropTypes.func,\n  touchTargetting: PropTypes.bool,\n  setTouchTargetting: PropTypes.func,\n  networking: PropTypes.bool,\n  setNetworking: PropTypes.func,\n};\n\nclass Button extends React.Component<$FlowFixMeProps> {\n  render() {\n    return (\n      <TouchableHighlight onPress={() => this.props.onClick(!this.props.pressed)} style={[\n        styles.button,\n        this.props.pressed && styles.buttonPressed\n      ]}>\n        <Text style={styles.buttonText}>{this.props.title}</Text>\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5,\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n  },\n  properties: {\n    height: 200,\n  },\n  waiting: {\n    height: 100,\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white',\n  },\n});\n\nmodule.exports = InspectorPanel;\n"]}]