["624b344de65e6dbc605f7eb8e0c0dda7073172c0","96b1edf69024172e25f89a6a2fdd96d02f566e6c",["react","prop-types","react-native","../lib/extract/extractViewBox","../lib/attributes"],[109,204,314,362,500],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-svg/elements/Svg.js"],"names":["RNSVGSvgViewManager","id","styles","create","svg","backgroundColor","Svg","arguments","measureInWindow","root","measure","measureLayout","setNativeProps","toDataURL","callback","onDataURLCallbacks","props","opacity","width","height","viewBox","preserveAspectRatio","style","dimensions","flex","ele","isNaN","displayName","propTypes","oneOfType","string","number","defaultProps","NativeSvgView","nativeOnly"],"mappings":";;;;;;AAAA;;;;AAGA;;;;AACA;;AAOA;;;;AACA;;AAEA,IAAMA,sBAAsB,2BAAcA,mBAA1C;;AAGA,IAAIC,KAAK,CAAT;;AAEA,IAAMC,SAAS,wBAAWC,MAAX,CAAkB;AAC7BC,SAAK;AACDC,yBAAiB;AADhB;AADwB,CAAlB,CAAf;;IAMMC,G;;;AAgBF,mBAAc;AAAA;;AAAA,2HACDC,SADC;;AAAA,cAMdC,eANc,GAMI,YAAa;AAAA;;AAC3B,gCAAKC,IAAL,EAAUD,eAAV;AACH,SARa;;AAAA,cAUdE,OAVc,GAUJ,YAAa;AAAA;;AACnB,iCAAKD,IAAL,EAAUC,OAAV;AACH,SAZa;;AAAA,cAcdC,aAdc,GAcE,YAAa;AAAA;;AACzB,iCAAKF,IAAL,EAAUE,aAAV;AACH,SAhBa;;AAAA,cAkBdC,cAlBc,GAkBG,YAAa;AAAA;;AAC1B,iCAAKH,IAAL,EAAUG,cAAV;AACH,SApBa;;AAAA,cAsBdC,SAtBc,GAsBF,UAACC,QAAD,EAAwB;AAChCA,wBAAYd,oBAAoBa,SAApB,CAA8B,iCAAe,MAAKJ,IAApB,CAA9B,EAAyDK,QAAzD,CAAZ;AACH,SAxBa;;AAEVb;AACA,cAAKA,EAAL,GAAUA,EAAV;AACA,cAAKc,kBAAL,GAA0B,EAA1B;AAJU;AAKb;;;;iCAqBQ;AAAA;;AAAA,yBAC2E,KAAKC,KADhF;AAAA,gBACEC,OADF,UACEA,OADF;AAAA,gBACWC,KADX,UACWA,KADX;AAAA,gBACkBC,MADlB,UACkBA,MADlB;AAAA,gBAC0BC,OAD1B,UAC0BA,OAD1B;AAAA,gBACmCC,mBADnC,UACmCA,mBADnC;AAAA,gBACwDC,KADxD,UACwDA,KADxD;AAAA,gBACkEN,KADlE;;AAEL,gBAAIO,mBAAJ;;AAEA,gBAAIL,SAASC,MAAb,EAAqB;AACjBI,6BAAa;AACTL,2BAAO,CAACA,KADC;AAETC,4BAAQ,CAACA,MAFA;AAGTK,0BAAM;AAHG,iBAAb;AAKH;;AAED,mBAAO,8BAAC,aAAD,2BACCR,KADD,EAEC,8BAAe,EAAEI,gBAAF,EAAWC,wCAAX,EAAf,CAFD;AAGH,qBAAK,kBAAO;AAAC,2BAAKZ,IAAL,GAAYgB,GAAZ;AAAiB,iBAH3B;AAIH,uBAAO,CACHvB,OAAOE,GADJ,EAEHkB,KAFG,EAGH,CAACI,MAAM,CAACT,OAAP,CAAD,IAAoB;AAChBA,6BAAS,CAACA;AADM,iBAHjB,EAMHM,UANG;AAJJ,eAAP;AAaH;;;4BAlEMI,W,GAAc,K,SACdC,S;AAEHX,aAAS,oBAAUY,SAAV,CAAoB,CAAC,oBAAUC,MAAX,EAAmB,oBAAUC,MAA7B,CAApB,C;AACTb,WAAO,oBAAUW,SAAV,CAAoB,CAAC,oBAAUC,MAAX,EAAmB,oBAAUC,MAA7B,CAApB,C;AACPZ,YAAQ,oBAAUU,SAAV,CAAoB,CAAC,oBAAUC,MAAX,EAAmB,oBAAUC,MAA7B,CAApB,C;;AAERX,aAAS,oBAAUU,M;AACnBT,yBAAqB,oBAAUS;WAG5BE,Y,GAAe;AAClBX,yBAAqB;AADH,C;;;AA0D1B,IAAMY,gBAAgB,yCAAuB,cAAvB,EAAuC,IAAvC,EAA6C;AAC/DC;AAD+D,CAA7C,CAAtB;;kBAMe5B,G","sourcesContent":["import React, {\n    Component\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    ViewPropTypes,\n    requireNativeComponent,\n    StyleSheet,\n    findNodeHandle,\n    NativeModules\n} from 'react-native';\nimport extractViewBox from '../lib/extract/extractViewBox';\nimport {ViewBoxAttributes} from '../lib/attributes';\n\nconst RNSVGSvgViewManager = NativeModules.RNSVGSvgViewManager;\n\n// Svg - Root node of all Svg elements\nlet id = 0;\n\nconst styles = StyleSheet.create({\n    svg: {\n        backgroundColor: 'transparent'\n    }\n});\n\nclass Svg extends Component{\n    static displayName = 'Svg';\n    static propTypes = {\n        ...ViewPropTypes,\n        opacity: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        // more detail https://svgwg.org/svg2-draft/coords.html#ViewBoxAttribute\n        viewBox: PropTypes.string,\n        preserveAspectRatio: PropTypes.string\n    };\n\n    static defaultProps = {\n        preserveAspectRatio: 'xMidYMid meet'\n    };\n\n    constructor() {\n        super(...arguments);\n        id++;\n        this.id = id;\n        this.onDataURLCallbacks = [];\n    }\n    measureInWindow = (...args) => {\n        this.root.measureInWindow(...args);\n    };\n\n    measure = (...args) => {\n        this.root.measure(...args);\n    };\n\n    measureLayout = (...args) => {\n        this.root.measureLayout(...args);\n    };\n\n    setNativeProps = (...args) => {\n        this.root.setNativeProps(...args);\n    };\n\n    toDataURL = (callback: Function) => {\n        callback && RNSVGSvgViewManager.toDataURL(findNodeHandle(this.root), callback);\n    };\n\n    render() {\n        const {opacity, width, height, viewBox, preserveAspectRatio, style, ...props} = this.props;\n        let dimensions;\n\n        if (width && height) {\n            dimensions = {\n                width: +width,\n                height: +height,\n                flex: 0\n            };\n        }\n\n        return <NativeSvgView\n            {...props}\n            {...extractViewBox({ viewBox, preserveAspectRatio })}\n            ref={ele => {this.root = ele;}}\n            style={[\n                styles.svg,\n                style,\n                !isNaN(+opacity) && {\n                    opacity: +opacity\n                },\n                dimensions\n            ]}\n        />;\n    }\n}\n\nconst NativeSvgView = requireNativeComponent('RNSVGSvgView', null, {\n    nativeOnly: {\n        ...ViewBoxAttributes\n    }\n});\n\nexport default Svg;\n"]}]