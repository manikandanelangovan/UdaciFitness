["ee63a00a607aa8dd9e4f43d7292321ffc9455927","72ed9217516885b33fe009e9a5a15db91e101cd7",["XMLHttpRequest"],[45],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Network/XHRInterceptor.js"],"names":["XMLHttpRequest","require","originalXHROpen","prototype","open","originalXHRSend","send","originalXHRSetRequestHeader","setRequestHeader","openCallback","sendCallback","requestHeaderCallback","headerReceivedCallback","responseCallback","isInterceptorEnabled","XHRInterceptor","setOpenCallback","callback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","enableInterception","method","url","apply","arguments","header","value","data","addEventListener","readyState","HEADERS_RECEIVED","contentTypeString","getResponseHeader","contentLengthString","responseContentType","responseSize","split","parseInt","getAllResponseHeaders","DONE","status","timeout","response","responseURL","responseType","disableInterception","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule XHRInterceptor\n */\n 'use strict';\n\nconst XMLHttpRequest = require('XMLHttpRequest');\nconst originalXHROpen = XMLHttpRequest.prototype.open;\nconst originalXHRSend = XMLHttpRequest.prototype.send;\nconst originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;\n\nvar openCallback;\nvar sendCallback;\nvar requestHeaderCallback;\nvar headerReceivedCallback;\nvar responseCallback;\n\nvar isInterceptorEnabled = false;\n\n/**\n * A network interceptor which monkey-patches XMLHttpRequest methods\n * to gather all network requests/responses, in order to show their\n * information in the React Native inspector development tool.\n * This supports interception with XMLHttpRequest API, including Fetch API\n * and any other third party libraries that depend on XMLHttpRequest.\n */\nconst XHRInterceptor = {\n  /**\n   * Invoked before XMLHttpRequest.open(...) is called.\n   */\n  setOpenCallback(callback) {\n    openCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.send(...) is called.\n   */\n  setSendCallback(callback) {\n    sendCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n   */\n  setHeaderReceivedCallback(callback) {\n    headerReceivedCallback = callback;\n  },\n\n  /**\n   * Invoked after xhr's readyState becomes xhr.DONE.\n   */\n  setResponseCallback(callback) {\n    responseCallback = callback;\n  },\n\n  /**\n   * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n   */\n  setRequestHeaderCallback(callback) {\n    requestHeaderCallback = callback;\n  },\n\n  isInterceptorEnabled() {\n    return isInterceptorEnabled;\n  },\n\n  enableInterception() {\n    if (isInterceptorEnabled) {\n      return;\n    }\n    // Override `open` method for all XHR requests to intercept the request\n    // method and url, then pass them through the `openCallback`.\n    XMLHttpRequest.prototype.open = function(method, url) {\n      if (openCallback) {\n        openCallback(method, url, this);\n      }\n      originalXHROpen.apply(this, arguments);\n    };\n\n    // Override `setRequestHeader` method for all XHR requests to intercept\n    // the request headers, then pass them through the `requestHeaderCallback`.\n    XMLHttpRequest.prototype.setRequestHeader = function(header, value) {\n      if (requestHeaderCallback) {\n        requestHeaderCallback(header, value, this);\n      }\n      originalXHRSetRequestHeader.apply(this, arguments);\n    };\n\n    // Override `send` method of all XHR requests to intercept the data sent,\n    // register listeners to intercept the response, and invoke the callbacks.\n    XMLHttpRequest.prototype.send = function(data) {\n      if (sendCallback) {\n        sendCallback(data, this);\n      }\n      if (this.addEventListener) {\n        this.addEventListener('readystatechange', () => {\n          if (!isInterceptorEnabled) {\n            return;\n          }\n          if (this.readyState === this.HEADERS_RECEIVED) {\n            const contentTypeString = this.getResponseHeader('Content-Type');\n            const contentLengthString =\n              this.getResponseHeader('Content-Length');\n            let responseContentType, responseSize;\n            if (contentTypeString) {\n              responseContentType = contentTypeString.split(';')[0];\n            }\n            if (contentLengthString) {\n              responseSize = parseInt(contentLengthString, 10);\n            }\n            if (headerReceivedCallback) {\n              headerReceivedCallback(\n                responseContentType,\n                responseSize,\n                this.getAllResponseHeaders(),\n                this,\n              );\n            }\n          }\n          if (this.readyState === this.DONE) {\n            if (responseCallback) {\n              responseCallback(\n                this.status,\n                this.timeout,\n                this.response,\n                this.responseURL,\n                this.responseType,\n                this,\n              );\n            }\n          }\n        }, false);\n      }\n      originalXHRSend.apply(this, arguments);\n    };\n    isInterceptorEnabled = true;\n  },\n\n  // Unpatch XMLHttpRequest methods and remove the callbacks.\n  disableInterception() {\n    if (!isInterceptorEnabled) {\n      return;\n    }\n    isInterceptorEnabled = false;\n    XMLHttpRequest.prototype.send = originalXHRSend;\n    XMLHttpRequest.prototype.open = originalXHROpen;\n    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;\n    responseCallback = null;\n    openCallback = null;\n    sendCallback = null;\n    headerReceivedCallback = null;\n    requestHeaderCallback = null;\n  },\n};\n\nmodule.exports = XHRInterceptor;\n"]}]