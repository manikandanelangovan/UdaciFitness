["22aba134e0885d0f09105a86a6e5896c9e75f9c7","f2953648e1b3ae69c635fe6db1f9efb2212883d9",["Systrace","infoLog","fbjs/lib/performanceNow"],[39,75,147],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Utilities/PerformanceLogger.js"],"names":["Systrace","require","infoLog","performanceNow","global","nativePerformanceNow","timespans","extras","cookies","PRINT_TO_CONSOLE","PerformanceLogger","addTimespan","key","lengthInMs","description","__DEV__","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","timespan","endTime","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","currentValue","attemptedValue","getExtras","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PerformanceLogger\n * @flow\n * @format\n */\n'use strict';\n\nconst Systrace = require('Systrace');\n\nconst infoLog = require('infoLog');\nconst performanceNow =\n  global.nativePerformanceNow || require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n};\n\nlet timespans: {[key: string]: Timespan} = {};\nlet extras: {[key: string]: any} = {};\nconst cookies: {[key: string]: number} = {};\n\nconst PRINT_TO_CONSOLE = false;\n\n/**\n * This is meant to collect and log performance data in production, which means\n * it needs to have minimal overhead.\n */\nconst PerformanceLogger = {\n  addTimespan(key: string, lengthInMs: number, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      totalTime: lengthInMs,\n    };\n  },\n\n  startTimespan(key: string, description?: string) {\n    if (timespans[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespans[key] = {\n      description: description,\n      startTime: performanceNow(),\n    };\n    cookies[key] = Systrace.beginAsyncEvent(key);\n    if (__DEV__ && PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  },\n\n  stopTimespan(key: string) {\n    const timespan = timespans[key];\n    if (!timespan || !timespan.startTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endTime = performanceNow();\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (__DEV__ && PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    Systrace.endAsyncEvent(key, cookies[key]);\n    delete cookies[key];\n  },\n\n  clear() {\n    timespans = {};\n    extras = {};\n  },\n\n  clearCompleted() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        delete timespans[key];\n      }\n    }\n    extras = {};\n  },\n\n  clearExceptTimespans(keys: Array<string>) {\n    timespans = Object.keys(timespans).reduce(function(previous, key) {\n      if (keys.indexOf(key) !== -1) {\n        previous[key] = timespans[key];\n      }\n      return previous;\n    }, {});\n    extras = {};\n  },\n\n  currentTimestamp() {\n    return performanceNow();\n  },\n\n  getTimespans() {\n    return timespans;\n  },\n\n  hasTimespan(key: string) {\n    return !!timespans[key];\n  },\n\n  logTimespans() {\n    for (const key in timespans) {\n      if (timespans[key].totalTime) {\n        infoLog(key + ': ' + timespans[key].totalTime + 'ms');\n      }\n    }\n  },\n\n  addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n    for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n      const label = labels[ii / 2];\n      PerformanceLogger.addTimespan(\n        label,\n        newTimespans[ii + 1] - newTimespans[ii],\n        label,\n      );\n    }\n  },\n\n  setExtra(key: string, value: any) {\n    if (extras[key]) {\n      if (__DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    extras[key] = value;\n  },\n\n  getExtras() {\n    return extras;\n  },\n};\n\nmodule.exports = PerformanceLogger;\n"]}]