["5b004b439b1c578f8611fe677f020afcc2623d15","137b380460fc91a62eaa0b339554b274f53c512c",["BoundingDimensions","Platform","Position","React","ReactNative","TVEventHandler","fbjs/lib/TouchEventUtils","UIManager","View","fbjs/lib/keyMirror","normalizeColor"],[50,96,132,165,201,246,295,348,381,415,467],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/Touchable/Touchable.js"],"names":["BoundingDimensions","require","Platform","Position","React","ReactNative","TVEventHandler","TouchEventUtils","UIManager","View","keyMirror","normalizeColor","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","isTVOS","_tvEventHandler","enable","cmp","evt","myTag","findNodeHandle","dispatchConfig","tag","eventType","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableHandlePress","componentWillUnmount","disable","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","undefined","responderID","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","e","dispatchID","currentTarget","persist","state","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","extractSingleTouch","nativeEvent","pageX","pageY","pressInLocation","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","curState","_remeasureMetricsOnActivation","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","release","getPooled","console","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableGetPressOutDelayMS","Touchable","Mixin","TOUCH_TARGET_DEBUG","renderDebugView","color","__DEV__","debugHitSlopStyle","key","hexColor","toString","substr","position","borderColor","slice","borderWidth","borderStyle","backgroundColor","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Touchable\n */\n\n'use strict';\n\nconst BoundingDimensions = require('BoundingDimensions');\nconst Platform = require('Platform');\nconst Position = require('Position');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst TVEventHandler = require('TVEventHandler');\nconst TouchEventUtils = require('fbjs/lib/TouchEventUtils');\nconst UIManager = require('UIManager');\nconst View = require('View');\n\nconst keyMirror = require('fbjs/lib/keyMirror');\nconst normalizeColor = require('normalizeColor');\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\nvar States = keyMirror({\n  NOT_RESPONDER: null,                   // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: null,     // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: null,    // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: null,       // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: null,      // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: null,  // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: null, // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: null\n});\n\n/**\n * Quick lookup map for states that are considered to be \"active\"\n */\nvar IsActive = {\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nvar IsPressingIn = {\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nvar IsLongPressingIn = {\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nvar Signals = keyMirror({\n  DELAY: null,\n  RESPONDER_GRANT: null,\n  RESPONDER_RELEASE: null,\n  RESPONDER_TERMINATED: null,\n  ENTER_PRESS_RECT: null,\n  LEAVE_PRESS_RECT: null,\n  LONG_PRESS_DETECTED: null,\n});\n\n/**\n * Mapping from States x Signals => States\n */\nvar Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  }\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nvar HIGHLIGHT_DELAY_MS = 130;\n\nvar PRESS_EXPAND_PX = 20;\n\nvar LONG_PRESS_THRESHOLD = 500;\n\nvar LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nvar LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nvar TouchableMixin = {\n  componentDidMount: function() {\n    if (!Platform.isTVOS) {\n      return;\n    }\n\n    this._tvEventHandler = new TVEventHandler();\n    this._tvEventHandler.enable(this, function(cmp, evt) {\n      var myTag = ReactNative.findNodeHandle(cmp);\n      evt.dispatchConfig = {};\n      if (myTag === evt.tag) {\n        if (evt.eventType === 'focus') {\n          cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);\n        } else if (evt.eventType === 'blur') {\n          cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);\n        } else if (evt.eventType === 'select') {\n          cmp.touchableHandlePress && cmp.touchableHandlePress(evt);\n        }\n      }\n    });\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    if (this._tvEventHandler) {\n      this._tvEventHandler.disable();\n      delete this._tvEventHandler;\n    }\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function() {\n    return {\n      touchable: {touchState: undefined, responderID: null}\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function() {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function() {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function () {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  touchableHandleResponderGrant: function(e) {\n    var dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    var delayMS =\n      this.touchableGetHighlightDelayMS !== undefined ?\n      Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    var longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined ?\n      Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  touchableHandleResponderRelease: function(e) {\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  touchableHandleResponderTerminate: function(e) {\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  touchableHandleResponderMove: function(e) {\n    // Not enough time elapsed yet, wait for highlight -\n    // this is just a perf optimization.\n    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {\n      return;\n    }\n\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    var positionOnActivate = this.state.touchable.positionOnActivate;\n    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    var pressRectOffset = this.touchableGetPressRectOffset ?\n      this.touchableGetPressRectOffset() : {\n        left: PRESS_EXPAND_PX,\n        right: PRESS_EXPAND_PX,\n        top: PRESS_EXPAND_PX,\n        bottom: PRESS_EXPAND_PX\n      };\n\n    var pressExpandLeft = pressRectOffset.left;\n    var pressExpandTop = pressRectOffset.top;\n    var pressExpandRight = pressRectOffset.right;\n    var pressExpandBottom = pressRectOffset.bottom;\n\n    var hitSlop = this.touchableGetHitSlop ?\n      this.touchableGetHitSlop() : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left;\n      pressExpandTop += hitSlop.top;\n      pressExpandRight += hitSlop.right;\n      pressExpandBottom += hitSlop.bottom;\n    }\n\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    var isTouchWithinActive =\n        pageX > positionOnActivate.left - pressExpandLeft &&\n        pageY > positionOnActivate.top - pressExpandTop &&\n        pageX <\n          positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n        pageY <\n          positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      var curState = this.state.touchable.touchState;\n      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const tag = this.state.touchable.responderID;\n    if (tag == null) {\n      return;\n    }\n\n    UIManager.measure(tag, this._handleQueryLayout);\n  },\n\n  _handleQueryLayout: function(l, t, w, h, globalX, globalY) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);\n  },\n\n  _handleDelay: function(e) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  _handleLongDelay: function(e) {\n    this.longPressDelayTimeout = null;\n    var curState = this.state.touchable.touchState;\n    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN &&\n        curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {\n      console.error('Attempted to transition from state `' + curState + '` to `' +\n        States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' +\n        'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');\n    } else {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  _receiveSignal: function(signal, e) {\n    var responderID = this.state.touchable.responderID;\n    var curState = this.state.touchable.touchState;\n    var nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' + signal + '` or state `' + curState +\n        '` for Touchable responder `' + responderID + '`'\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' + curState + '` to `' + signal +\n        '` for responder `' + responderID + '`'\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function () {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function (state) {\n    return state === States.RESPONDER_ACTIVE_PRESS_IN ||\n           state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;\n  },\n\n  _savePressInLocation: function(e) {\n    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);\n    var pageX = touch && touch.pageX;\n    var pageY = touch && touch.pageY;\n    var locationX = touch && touch.locationX;\n    var locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function (aX, aY, bX, bY) {\n    var deltaX = aX - bX;\n    var deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  _performSideEffectsForTransition: function(curState, nextState, signal, e) {\n    var curIsHighlight = this._isHighlight(curState);\n    var newIsHighlight = this._isHighlight(nextState);\n\n    var isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (!IsActive[curState] && IsActive[nextState]) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      var hasLongPressHandler = !!this.props.onLongPress;\n      var pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && (    // We *are* long pressing..\n          !hasLongPressHandler ||          // But either has no long handler\n          !this.touchableLongPressCancelsPress() // or we're told to ignore it.\n        );\n\n      var shouldInvokePress =  !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  _startHighlight: function(e) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  _endHighlight: function(e) {\n    if (this.touchableHandleActivePressOut) {\n      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n};\n\nvar Touchable = {\n  Mixin: TouchableMixin,\n  TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({color, hitSlop}) => {\n    if (!Touchable.TOUCH_TARGET_DEBUG) {\n      return null;\n    }\n    if (!__DEV__) {\n      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');\n    }\n    const debugHitSlopStyle = {};\n    hitSlop = hitSlop || {top: 0, bottom: 0, left: 0, right: 0};\n    for (const key in hitSlop) {\n      debugHitSlopStyle[key] = -hitSlop[key];\n    }\n    const hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);\n    return (\n      <View\n        pointerEvents=\"none\"\n        style={{\n          position: 'absolute',\n          borderColor: hexColor.slice(0, -2) + '55', // More opaque\n          borderWidth: 1,\n          borderStyle: 'dashed',\n          backgroundColor: hexColor.slice(0, -2) + '0F', // Less opaque\n          ...debugHitSlopStyle\n        }}\n      />\n    );\n  }\n};\n\nmodule.exports = Touchable;\n"]}]