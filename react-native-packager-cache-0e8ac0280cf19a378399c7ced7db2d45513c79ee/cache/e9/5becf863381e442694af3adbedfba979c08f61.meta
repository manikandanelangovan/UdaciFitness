["f4a2e2331d81eb7b7cb6aa07ac71ce91abd0e22f","316e5e295ead6caae755be410f43af4d3d3098a2",["./_Symbol","./_arrayMap","./isArray","./isSymbol"],[21,58,96,133],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/lodash/_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":"AAAA,IAAIA,SAASC,QAAQ,WAAR,CAAb;AAAA,IACIC,WAAWD,QAAQ,aAAR,CADf;AAAA,IAEIE,UAAUF,QAAQ,WAAR,CAFd;AAAA,IAGIG,WAAWH,QAAQ,YAAR,CAHf;;AAMA,IAAII,WAAW,IAAI,CAAnB;;AAGA,IAAIC,cAAcN,wCAASA,OAAOO,SAAhB,mBAA4BC,SAA9C;AAAA,IACIC,iBAAiBH,cAAcA,YAAYI,QAA1B,GAAqCF,SAD1D;;AAWA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAE3B,MAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;AACD,MAAIT,QAAQS,KAAR,CAAJ,EAAoB;AAElB,WAAOV,SAASU,KAAT,EAAgBD,YAAhB,IAAgC,EAAvC;AACD;AACD,MAAIP,SAASQ,KAAT,CAAJ,EAAqB;AACnB,WAAOH,iBAAiBA,eAAeI,IAAf,CAAoBD,KAApB,CAAjB,GAA8C,EAArD;AACD;AACD,MAAIE,SAAUF,QAAQ,EAAtB;AACA,SAAQE,UAAU,GAAV,IAAkB,IAAIF,KAAL,IAAe,CAACP,QAAlC,GAA8C,IAA9C,GAAqDS,MAA5D;AACD;;AAEDC,OAAOC,OAAP,GAAiBL,YAAjB","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"]}]