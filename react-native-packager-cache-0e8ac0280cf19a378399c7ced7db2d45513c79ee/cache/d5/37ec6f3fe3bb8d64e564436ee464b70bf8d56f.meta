["19608fa7a9a90696d722afee4eb8f75388e73865","11a50c96b27b2465f1cb9e5fe2bf27b9af942ddc",["NativeModules","Platform","defineLazyObjectProperty","fbjs/lib/invariant"],[44,85,138,191],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/ReactNative/UIManager.js"],"names":["NativeModules","require","Platform","defineLazyObjectProperty","invariant","UIManager","__takeSnapshot","takeSnapshot","OS","Object","keys","forEach","viewConfig","viewName","Manager","get","viewManager","constants","value","key","commands","index","AndroidLazyViewManagersEnabled","ViewManagerNames","viewManagerName","replace","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,OAAhB,iBAAN;AACA,IAAMC,WAAWD,OAAX,YAAN;;AAEA,IAAME,2BAA2BF,OAA3B,4BAAN;AACA,IAAMG,YAAYH,OAAZ,sBAAN;;IAEQI,S,GAAcL,a,CAAdK,S;;;AAERD,UAAUC,SAAV,EAAqB,yEAArB;;AAOAA,UAAUC,cAAV,GAA2BD,UAAUE,YAArC;AACAF,UAAUE,YAAV,GAAyB,YAAW;AAClCH,YACE,KADF,EAEE,2DACA,uCAHF;AAKD,CAND;;AAaA,IAAIF,SAASM,EAAT,KAAgB,KAApB,EAA2B;AACzBC,SAAOC,IAAP,CAAYL,SAAZ,EAAuBM,OAAvB,CAA+B,oBAAY;AACzC,QAAMC,aAAaP,UAAUQ,QAAV,CAAnB;AACA,QAAID,WAAWE,OAAf,EAAwB;AACtBX,+BAAyBS,UAAzB,EAAqC,WAArC,EAAkD;AAChDG,aAAK,eAAM;AACT,cAAMC,cAAchB,cAAcY,WAAWE,OAAzB,CAApB;AACA,cAAMG,YAAY,EAAlB;AACAD,yBAAeP,OAAOC,IAAP,CAAYM,WAAZ,EAAyBL,OAAzB,CAAiC,eAAO;AACrD,gBAAMO,QAAQF,YAAYG,GAAZ,CAAd;AACA,gBAAI,OAAOD,KAAP,KAAiB,UAArB,EAAiC;AAC/BD,wBAAUE,GAAV,IAAiBD,KAAjB;AACD;AACF,WALc,CAAf;AAMA,iBAAOD,SAAP;AACD;AAX+C,OAAlD;AAaAd,+BAAyBS,UAAzB,EAAqC,UAArC,EAAiD;AAC/CG,aAAK,eAAM;AACT,cAAMC,cAAchB,cAAcY,WAAWE,OAAzB,CAApB;AACA,cAAMM,WAAW,EAAjB;AACA,cAAIC,QAAQ,CAAZ;AACAL,yBAAeP,OAAOC,IAAP,CAAYM,WAAZ,EAAyBL,OAAzB,CAAiC,eAAO;AACrD,gBAAMO,QAAQF,YAAYG,GAAZ,CAAd;AACA,gBAAI,OAAOD,KAAP,KAAiB,UAArB,EAAiC;AAC/BE,uBAASD,GAAT,IAAgBE,OAAhB;AACD;AACF,WALc,CAAf;AAMA,iBAAOD,QAAP;AACD;AAZ8C,OAAjD;AAcD;AACF,GA/BD;AAgCD,CAjCD,MAiCO,IAAIlB,SAASM,EAAT,KAAgB,SAAhB,IAA6BH,UAAUiB,8BAA3C,EAA2E;AAChFjB,YAAUkB,gBAAV,CAA2BZ,OAA3B,CAAmC,2BAAmB;AACpDR,6BAAyBE,SAAzB,EAAoCmB,eAApC,EAAqD;AACnDT,WAAK;AAAA,eAAMf,cAAcwB,gBAAgBC,OAAhB,CAAwB,WAAxB,EAAqC,EAArC,CAAd,CAAN;AAAA;AAD8C,KAArD;AAGD,GAJD;AAKD;;AAEDC,OAAOC,OAAP,GAAiBtB,SAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule UIManager\n * @flow\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\nconst Platform = require('Platform');\n\nconst defineLazyObjectProperty = require('defineLazyObjectProperty');\nconst invariant = require('fbjs/lib/invariant');\n\nconst { UIManager } = NativeModules;\n\ninvariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');\n\n// In past versions of ReactNative users called UIManager.takeSnapshot()\n// However takeSnapshot was moved to ReactNative in order to support flat\n// bundles and to avoid a cyclic dependency between UIManager and ReactNative.\n// UIManager.takeSnapshot still exists though. In order to avoid confusion or\n// accidental usage, mask the method with a deprecation warning.\nUIManager.__takeSnapshot = UIManager.takeSnapshot;\nUIManager.takeSnapshot = function() {\n  invariant(\n    false,\n    'UIManager.takeSnapshot should not be called directly. ' +\n    'Use ReactNative.takeSnapshot instead.'\n  );\n};\n\n/**\n * Copies the ViewManager constants and commands into UIManager. This is\n * only needed for iOS, which puts the constants in the ViewManager\n * namespace instead of UIManager, unlike Android.\n */\nif (Platform.OS === 'ios') {\n  Object.keys(UIManager).forEach(viewName => {\n    const viewConfig = UIManager[viewName];\n    if (viewConfig.Manager) {\n      defineLazyObjectProperty(viewConfig, 'Constants', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const constants = {};\n          viewManager && Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value !== 'function') {\n              constants[key] = value;\n            }\n          });\n          return constants;\n        },\n      });\n      defineLazyObjectProperty(viewConfig, 'Commands', {\n        get: () => {\n          const viewManager = NativeModules[viewConfig.Manager];\n          const commands = {};\n          let index = 0;\n          viewManager && Object.keys(viewManager).forEach(key => {\n            const value = viewManager[key];\n            if (typeof value === 'function') {\n              commands[key] = index++;\n            }\n          });\n          return commands;\n        },\n      });\n    }\n  });\n} else if (Platform.OS === 'android' && UIManager.AndroidLazyViewManagersEnabled) {\n  UIManager.ViewManagerNames.forEach(viewManagerName => {\n    defineLazyObjectProperty(UIManager, viewManagerName, {\n      get: () => NativeModules[viewManagerName.replace(/^(RCT|RK)/, '')],\n    });\n  });\n}\n\nmodule.exports = UIManager;\n"]}]