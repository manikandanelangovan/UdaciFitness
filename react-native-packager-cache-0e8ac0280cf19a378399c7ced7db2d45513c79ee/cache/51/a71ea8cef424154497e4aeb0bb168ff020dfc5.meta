["abb7217cdc5c154946a784cc4f0d1d980d7ad763","5e927a795ee45738316e95945e31805a48877e90",["NativeModules"],[53],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Image/ImageEditor.js"],"names":["RCTImageEditingManager","require","ImageEditingManager","ImageEditor","uri","cropData","success","failure","cropImage","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,yBAAyBC,yBAAyBC,mBAAxD;;IAqCMC,W;;;;;;;8BAYFC,G,EACAC,Q,EACAC,O,EACAC,O,EACA;AACAP,6BAAuBQ,SAAvB,CAAiCJ,GAAjC,EAAsCC,QAAtC,EAAgDC,OAAhD,EAAyDC,OAAzD;AACD;;;;;AAGHE,OAAOC,OAAP,GAAiBP,WAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ImageEditor\n * @flow\n */\n'use strict';\n\nconst RCTImageEditingManager = require('NativeModules').ImageEditingManager;\n\ntype ImageCropData = {\n  /**\n   * The top-left corner of the cropped image, specified in the original\n   * image's coordinate space.\n   */\n  offset: {\n    x: number,\n    y: number,\n  },\n  /**\n   * The size (dimensions) of the cropped image, specified in the original\n   * image's coordinate space.\n   */\n  size: {\n    width: number,\n    height: number,\n  },\n  /**\n   * (Optional) size to scale the cropped image to.\n   */\n  displaySize?: ?{\n    width: number,\n    height: number,\n  },\n  /**\n   * (Optional) the resizing mode to use when scaling the image. If the\n   * `displaySize` param is not specified, this has no effect.\n   */\n  resizeMode?: ?$Enum<{\n    contain: string,\n    cover: string,\n    stretch: string,\n  }>,\n};\n\nclass ImageEditor {\n  /**\n   * Crop the image specified by the URI param. If URI points to a remote\n   * image, it will be downloaded automatically. If the image cannot be\n   * loaded/downloaded, the failure callback will be called.\n   *\n   * If the cropping process is successful, the resultant cropped image\n   * will be stored in the ImageStore, and the URI returned in the success\n   * callback will point to the image in the store. Remember to delete the\n   * cropped image from the ImageStore when you are done with it.\n   */\n  static cropImage(\n    uri: string,\n    cropData: ImageCropData,\n    success: (uri: string) => void,\n    failure: (error: Object) => void\n  ) {\n    RCTImageEditingManager.cropImage(uri, cropData, success, failure);\n  }\n}\n\nmodule.exports = ImageEditor;\n"]}]