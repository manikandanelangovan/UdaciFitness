Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getMetricMetaInfo = getMetricMetaInfo;
exports.isBetween = isBetween;
exports.caculateDirection = caculateDirection;
exports.timeToString = timeToString;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _vectorIcons = require('@expo/vector-icons');

var _colors = require('./colors');

function getMetricMetaInfo(metric) {
    var info = {
        run: {
            displayName: 'Run',
            max: 50,
            unit: 'miles',
            step: 1,
            type: 'steppers',
            getIcon: function getIcon() {
                return _react2.default.createElement(
                    _reactNative.View,
                    null,
                    _react2.default.createElement(_vectorIcons.MaterialIcons, {
                        name: 'directions-run',
                        color: _colors.black,
                        size: 35
                    })
                );
            }
        },
        bike: {
            displayName: 'Bike',
            max: 100,
            unit: 'miles',
            step: 1,
            type: 'steppers',
            getIcon: function getIcon() {
                return _react2.default.createElement(
                    _reactNative.View,
                    null,
                    _react2.default.createElement(_vectorIcons.MaterialCommunityIcons, {
                        name: 'bike',
                        color: _colors.black,
                        size: 32
                    })
                );
            }
        },
        swim: {
            displayName: 'Swim',
            max: 9900,
            unit: 'meters',
            step: 100,
            type: 'steppers',
            getIcon: function getIcon() {
                return _react2.default.createElement(
                    _reactNative.View,
                    null,
                    _react2.default.createElement(_vectorIcons.MaterialCommunityIcons, {
                        name: 'swim',
                        color: _colors.black,
                        size: 35
                    })
                );
            }
        },
        sleep: {
            displayName: 'Sleep',
            max: 24,
            unit: 'hours',
            step: 1,
            type: 'slider',
            getIcon: function getIcon() {
                return _react2.default.createElement(
                    _reactNative.View,
                    null,
                    _react2.default.createElement(_vectorIcons.FontAwesome, {
                        name: 'bed',
                        color: _colors.black,
                        size: 30
                    })
                );
            }
        },
        eat: {
            displayName: 'Eat',
            max: 10,
            unit: 'rating',
            step: 1,
            type: 'slider',
            getIcon: function getIcon() {
                return _react2.default.createElement(
                    _reactNative.View,
                    null,
                    _react2.default.createElement(_vectorIcons.MaterialCommunityIcons, {
                        name: 'food',
                        color: _colors.black,
                        size: 35
                    })
                );
            }
        }
    };

    return typeof metric === 'undefined' ? info : info[metric];
}

function isBetween(num, x, y) {
    if (num >= x && num <= y) {
        return true;
    }
    return false;
}

function caculateDirection(heading) {
    var direction = '';

    if (isBetween(heading, 0, 22.5)) {
        direction = 'North';
    } else if (isBetween(heading, 22.5, 67.5)) {
        direction = 'North East';
    } else if (isBetween(heading, 67.5, 112.5)) {
        direction = 'East';
    } else if (isBetween(heading, 112.5, 157.5)) {
        direction = 'South East';
    } else if (isBetween(heading, 157.5, 202.5)) {
        direction = 'South';
    } else if (isBetween(heading, 202.5, 247.5)) {
        direction = 'South West';
    } else if (isBetween(heading, 247.5, 292.5)) {
        direction = 'West';
    } else if (isBetween(heading, 292.5, 337.5)) {
        direction = 'North West';
    } else if (isBetween(heading, 337.5, 360)) {
        direction = 'North';
    } else {
        direction = 'Calculating';
    }
    return direction;
}

function timeToString() {
    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();

    var date = new Date(time);
    var todayUTC = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
    return todayUTC.toISOString.split('T')[0];
}