["86f893e0e1d54203eda282a1c907783c8bda3df8","cfa1ca6de775bfe2c026b9da8e526735701705ab",["fbjs/lib/invariant","ReactGlobalSharedState","ReactDebugTool"],[40,1840,2244,2653,3070,3598,4265],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Performance/Systrace.js"],"names":["invariant","require","TRACE_TAG_REACT_APPS","TRACE_TAG_JSC_CALLS","_enabled","_asyncCookie","_markStack","_markStackIndex","_canInstallReactHook","_useFiber","REACT_MARKER","userTimingPolyfill","__DEV__","mark","markName","systraceLabel","indexOfId","lastIndexOf","cutoffIndex","length","slice","Systrace","beginEvent","measure","measureName","startMark","endMark","topMark","endEvent","clearMarks","clearMeasures","reactDebugToolHook","onBeforeMountComponent","debugID","ReactComponentTreeHook","displayName","getDisplayName","onMountComponent","onBeforeUpdateComponent","onUpdateComponent","onBeforeUnmountComponent","onUnmountComponent","onBeginLifeCycleTimer","timerType","onEndLifeCycleTimer","installReactHook","useFiber","global","performance","addHook","setEnabled","enabled","nativeTraceBeginLegacy","nativeTraceEndLegacy","undefined","ReactDebugTool","removeHook","isEnabled","profileName","args","nativeTraceBeginSection","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","attachToRelayProfiler","relayProfiler","attachProfileHandler","name","attachAggregateHandler","callback","swizzleJSON","measureMethods","JSON","object","objectName","methodNames","forEach","methodName","objName","fnName","func","apply","arguments","ret","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Systrace\n * @flow\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\ntype RelayProfiler = {\n  attachProfileHandler(\n    name: string,\n    handler: (name: string, state?: any) => () => void\n  ): void,\n\n  attachAggregateHandler(\n    name: string,\n    handler: (name: string, callback: () => void) => void\n  ): void,\n};\n\n/* eslint no-bitwise: 0 */\nconst TRACE_TAG_REACT_APPS = 1 << 17;\nconst TRACE_TAG_JSC_CALLS = 1 << 27;\n\nlet _enabled = false;\nlet _asyncCookie = 0;\nconst _markStack = [];\nlet _markStackIndex = -1;\nlet _canInstallReactHook = false;\nlet _useFiber = false;\n\n// Implements a subset of User Timing API necessary for React measurements.\n// https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\nconst REACT_MARKER = '\\u269B';\nconst userTimingPolyfill = __DEV__ ? {\n  mark(markName: string) {\n    if (_enabled) {\n      _markStackIndex++;\n      _markStack[_markStackIndex] = markName;\n      let systraceLabel = markName;\n      // Since perf measurements are a shared namespace in User Timing API,\n      // we prefix all React results with a React emoji.\n      if (markName[0] === REACT_MARKER) {\n        // This is coming from React.\n        // Removing component IDs keeps trace colors stable.\n        const indexOfId = markName.lastIndexOf(' (#');\n        const cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;\n        // Also cut off the emoji because it breaks Systrace\n        systraceLabel = markName.slice(2, cutoffIndex);\n      }\n      Systrace.beginEvent(systraceLabel);\n    }\n  },\n  measure(measureName: string, startMark: ?string, endMark: ?string) {\n    if (_enabled) {\n      invariant(\n        typeof measureName === 'string' &&\n        typeof startMark === 'string' &&\n        typeof endMark === 'undefined',\n        'Only performance.measure(string, string) overload is supported.'\n      );\n      const topMark = _markStack[_markStackIndex];\n      invariant(\n        startMark === topMark,\n        'There was a mismatching performance.measure() call. ' +\n        'Expected \"%s\" but got \"%s.\"',\n        topMark,\n        startMark,\n      );\n      _markStackIndex--;\n      // We can't use more descriptive measureName because Systrace doesn't\n      // let us edit labels post factum.\n      Systrace.endEvent();\n    }\n  },\n  clearMarks(markName: string) {\n    if (_enabled) {\n      if (_markStackIndex === -1) {\n        return;\n      }\n      if (markName === _markStack[_markStackIndex]) {\n        // React uses this for \"cancelling\" started measurements.\n        // Systrace doesn't support deleting measurements, so we just stop them.\n        if (userTimingPolyfill != null) {\n          userTimingPolyfill.measure(markName, markName);\n        }\n      }\n    }\n  },\n  clearMeasures() {\n    // React calls this to avoid memory leaks in browsers, but we don't keep\n    // measurements anyway.\n  },\n} : null;\n\n// A hook to get React Stack markers in Systrace.\nconst reactDebugToolHook = __DEV__ ? {\n  onBeforeMountComponent(debugID) {\n    const ReactComponentTreeHook = require('ReactGlobalSharedState').ReactComponentTreeHook;\n    const displayName = ReactComponentTreeHook.getDisplayName(debugID);\n    Systrace.beginEvent(`ReactReconciler.mountComponent(${displayName})`);\n  },\n  onMountComponent(debugID) {\n    Systrace.endEvent();\n  },\n  onBeforeUpdateComponent(debugID) {\n    const ReactComponentTreeHook = require('ReactGlobalSharedState').ReactComponentTreeHook;\n    const displayName = ReactComponentTreeHook.getDisplayName(debugID);\n    Systrace.beginEvent(`ReactReconciler.updateComponent(${displayName})`);\n  },\n  onUpdateComponent(debugID) {\n    Systrace.endEvent();\n  },\n  onBeforeUnmountComponent(debugID) {\n    const ReactComponentTreeHook = require('ReactGlobalSharedState').ReactComponentTreeHook;\n    const displayName = ReactComponentTreeHook.getDisplayName(debugID);\n    Systrace.beginEvent(`ReactReconciler.unmountComponent(${displayName})`);\n  },\n  onUnmountComponent(debugID) {\n    Systrace.endEvent();\n  },\n  onBeginLifeCycleTimer(debugID, timerType) {\n    const ReactComponentTreeHook = require('ReactGlobalSharedState').ReactComponentTreeHook;\n    const displayName = ReactComponentTreeHook.getDisplayName(debugID);\n    Systrace.beginEvent(`${displayName}.${timerType}()`);\n  },\n  onEndLifeCycleTimer(debugID, timerType) {\n    Systrace.endEvent();\n  },\n} : null;\n\nconst Systrace = {\n  installReactHook(useFiber: boolean) {\n    if (_enabled) {\n      if (__DEV__) {\n        if (useFiber) {\n          global.performance = userTimingPolyfill;\n        } else {\n          require('ReactDebugTool').addHook(reactDebugToolHook);\n        }\n      }\n    }\n    _useFiber = useFiber;\n    _canInstallReactHook = true;\n  },\n\n  setEnabled(enabled: boolean) {\n    if (_enabled !== enabled) {\n      if (__DEV__) {\n        if (enabled) {\n          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);\n        } else {\n          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);\n        }\n        if (_canInstallReactHook) {\n          if (_useFiber) {\n            global.performance = enabled ? userTimingPolyfill : undefined;\n          } else {\n            const ReactDebugTool = require('ReactDebugTool');\n            if (enabled) {\n              ReactDebugTool.addHook(reactDebugToolHook);\n            } else {\n              ReactDebugTool.removeHook(reactDebugToolHook);\n            }\n          }\n        }\n      }\n      _enabled = enabled;\n    }\n  },\n\n  isEnabled(): boolean {\n    return _enabled;\n  },\n\n  /**\n   * beginEvent/endEvent for starting and then ending a profile within the same call stack frame\n  **/\n  beginEvent(profileName?: any, args?: any) {\n    if (_enabled) {\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);\n    }\n  },\n\n  endEvent() {\n    if (_enabled) {\n      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);\n    }\n  },\n\n  /**\n   * beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either\n   * occur on another thread or out of the current stack frame, eg await\n   * the returned cookie variable should be used as input into the endAsyncEvent call to end the profile\n  **/\n  beginAsyncEvent(profileName?: any): any {\n    const cookie = _asyncCookie;\n    if (_enabled) {\n      _asyncCookie++;\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);\n    }\n    return cookie;\n  },\n\n  endAsyncEvent(profileName?: any, cookie?: any) {\n    if (_enabled) {\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);\n    }\n  },\n\n  /**\n   * counterEvent registers the value to the profileName on the systrace timeline\n  **/\n  counterEvent(profileName?: any, value?: any) {\n    if (_enabled) {\n      profileName = typeof profileName === 'function' ?\n        profileName() : profileName;\n      global.nativeTraceCounter &&\n        global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);\n    }\n  },\n\n  /**\n   * Relay profiles use await calls, so likely occur out of current stack frame\n   * therefore async variant of profiling is used\n  **/\n  attachToRelayProfiler(relayProfiler: RelayProfiler) {\n    relayProfiler.attachProfileHandler('*', (name) => {\n      const cookie = Systrace.beginAsyncEvent(name);\n      return () => {\n        Systrace.endAsyncEvent(name, cookie);\n      };\n    });\n\n    relayProfiler.attachAggregateHandler('*', (name, callback) => {\n      Systrace.beginEvent(name);\n      callback();\n      Systrace.endEvent();\n    });\n  },\n\n  /* This is not called by default due to perf overhead but it's useful\n     if you want to find traces which spend too much time in JSON. */\n  swizzleJSON() {\n    Systrace.measureMethods(JSON, 'JSON', [\n      'parse',\n      'stringify'\n    ]);\n  },\n\n /**\n  * Measures multiple methods of a class. For example, you can do:\n  * Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);\n  *\n  * @param object\n  * @param objectName\n  * @param methodNames Map from method names to method display names.\n  */\n measureMethods(object: any, objectName: string, methodNames: Array<string>): void {\n   if (!__DEV__) {\n     return;\n   }\n\n   methodNames.forEach(methodName => {\n     object[methodName] = Systrace.measure(\n       objectName,\n       methodName,\n       object[methodName]\n     );\n   });\n },\n\n /**\n  * Returns an profiled version of the input function. For example, you can:\n  * JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);\n  *\n  * @param objName\n  * @param fnName\n  * @param {function} func\n  * @return {function} replacement function\n  */\n measure(objName: string, fnName: string, func: any): any {\n   if (!__DEV__) {\n     return func;\n   }\n\n   const profileName = `${objName}.${fnName}`;\n   return function() {\n     if (!_enabled) {\n       return func.apply(this, arguments);\n     }\n\n     Systrace.beginEvent(profileName);\n     const ret = func.apply(this, arguments);\n     Systrace.endEvent();\n     return ret;\n   };\n },\n};\n\nif (__DEV__) {\n  // This is needed, because require callis in polyfills are not processed as\n  // other files. Therefore, calls to `require('moduleId')` are not replaced\n  // with numeric IDs\n  // TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)\n  (require: any).Systrace = Systrace;\n}\n\nmodule.exports = Systrace;\n"]}]