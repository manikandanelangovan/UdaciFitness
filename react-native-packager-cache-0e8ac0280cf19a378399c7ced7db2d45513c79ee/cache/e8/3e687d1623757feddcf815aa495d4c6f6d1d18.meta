["b51e1466ff6209bbf4c89d8d92be2c22f1f97de4","fb08d15014471118d51e764015352fb83639612e",["NativeModules","parseErrorStack","symbolicateStackTrace","stringifySafe"],[101,235,601,1545],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Core/ExceptionsManager.js"],"names":["exceptionID","reportException","e","isFatal","require","ExceptionsManager","parseErrorStack","stack","currentExceptionID","reportFatalException","message","reportSoftException","__DEV__","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","Error","catch","error","console","warn","handleException","_errorOriginal","reactConsoleErrorHandler","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","join","slice","framesToPop","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":";AAWA;;AAOA,IAAIA,cAAc,CAAlB;AACA,SAASC,eAAT,CAAyBC,CAAzB,EAA2CC,OAA3C,EAA0D;AAAA,iBAC5BC,OAD4B;AAAA,MACjDC,iBADiD,YACjDA,iBADiD;;AAExD,MAAIA,iBAAJ,EAAuB;AACrB,QAAMC,kBAAkBF,OAAlB,mBAAN;AACA,QAAMG,QAAQD,gBAAgBJ,CAAhB,CAAd;AACA,QAAMM,qBAAqB,EAAER,WAA7B;AACA,QAAIG,OAAJ,EAAa;AACXE,wBAAkBI,oBAAlB,CAAuCP,EAAEQ,OAAzC,EAAkDH,KAAlD,EAAyDC,kBAAzD;AACD,KAFD,MAEO;AACLH,wBAAkBM,mBAAlB,CAAsCT,EAAEQ,OAAxC,EAAiDH,KAAjD,EAAwDC,kBAAxD;AACD;AACD,QAAII,OAAJ,EAAa;AACX,UAAMC,wBAAwBT,OAAxB,yBAAN;AACAS,4BAAsBN,KAAtB,EAA6BO,IAA7B,CACE,UAACC,WAAD,EAAiB;AACf,YAAIA,WAAJ,EAAiB;AACfV,4BAAkBW,sBAAlB,CAAyCd,EAAEQ,OAA3C,EAAoDK,WAApD,EAAiEP,kBAAjE;AACD,SAFD,MAEO;AACL,gBAAM,IAAIS,KAAJ,CAAU,mBAAV,CAAN;AACD;AACF,OAPH,EAQEC,KARF,CASE,UAACC,KAAD;AAAA,eAAWC,QAAQC,IAAR,CAAa,wCAAwCF,MAAMT,OAA3D,CAAX;AAAA,OATF;AAWD;AACF;AACF;;AAUD,SAASY,eAAT,CAAyBpB,CAAzB,EAAmCC,OAAnC,EAAqD;AAKnD,MAAI,CAACD,EAAEQ,OAAP,EAAgB;AACdR,QAAI,IAAIe,KAAJ,CAAUf,CAAV,CAAJ;AACD;AACD,MAAIkB,QAAQG,cAAZ,EAA4B;AAC1BH,YAAQG,cAAR,CAAuBrB,EAAEQ,OAAzB;AACD,GAFD,MAEO;AACLU,YAAQD,KAAR,CAAcjB,EAAEQ,OAAhB;AACD;AACDT,kBAAgBC,CAAhB,EAAmBC,OAAnB;AACD;;AAED,SAASqB,wBAAT,GAAoC;AAClCJ,UAAQG,cAAR,CAAuBE,KAAvB,CAA6BL,OAA7B,EAAsCM,SAAtC;AACA,MAAI,CAACN,QAAQO,wBAAb,EAAuC;AACrC;AACD;;AAED,MAAID,UAAU,CAAV,KAAgBA,UAAU,CAAV,EAAanB,KAAjC,EAAwC;AACtCN,oBAAgByB,UAAU,CAAV,CAAhB,EAA4C,KAA5C;AACD,GAFD,MAEO;AACL,QAAME,gBAAgBxB,OAAhB,iBAAN;AACA,QAAMyB,MAAMC,MAAMC,SAAN,CAAgBC,GAAhB,CAAoBC,IAApB,CAAyBP,SAAzB,EAAoCE,aAApC,EAAmDM,IAAnD,CAAwD,IAAxD,CAAZ;AACA,QAAIL,IAAIM,KAAJ,CAAU,CAAV,EAAa,EAAb,MAAqB,YAAzB,EAAuC;AAIrC;AACD;AACD,QAAMhB,QAAwB,IAAIF,KAAJ,CAAU,oBAAoBY,GAA9B,CAA9B;AACAV,UAAMiB,WAAN,GAAoB,CAApB;AACAnC,oBAAgBkB,KAAhB,EAAqC,KAArC;AACD;AACF;;AAMD,SAASkB,2BAAT,GAAuC;AAErC,MAAIjB,QAAQG,cAAZ,EAA4B;AAC1B;AACD;;AAEDH,UAAQG,cAAR,GAAyBH,QAAQD,KAAR,CAAcmB,IAAd,CAAmBlB,OAAnB,CAAzB;AACAA,UAAQD,KAAR,GAAgBK,wBAAhB;AACA,MAAIJ,QAAQO,wBAAR,KAAqCY,SAAzC,EAAoD;AAGlDnB,YAAQO,wBAAR,GAAmC,IAAnC;AACD;AACF;;AAEDa,OAAOC,OAAP,GAAiB,EAAEnB,gCAAF,EAAmBe,wDAAnB,EAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ExceptionsManager\n * @flow\n */\n'use strict';\n\nimport type {ExtendedError} from 'parseErrorStack';\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: bool) {\n  const {ExceptionsManager} = require('NativeModules');\n  if (ExceptionsManager) {\n    const parseErrorStack = require('parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);\n    } else {\n      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);\n    }\n    if (__DEV__) {\n      const symbolicateStackTrace = require('symbolicateStackTrace');\n      symbolicateStackTrace(stack).then(\n        (prettyStack) => {\n          if (prettyStack) {\n            ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);\n          } else {\n            throw new Error('The stack is null');\n          }\n        }\n      ).catch(\n        (error) => console.warn('Unable to symbolicate stack trace: ' + error.message)\n      );\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: Function,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: Error, isFatal: boolean) {\n  // Workaround for reporting errors caused by `throw 'some string'`\n  // Unfortunately there is no way to figure out the stacktrace in this\n  // case, so if you ended up here trying to trace an error, look for\n  // `throw '<error message>'` somewhere in your codebase.\n  if (!e.message) {\n    e = new Error(e);\n  }\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    const stringifySafe = require('stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error : ExtendedError = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = { handleException, installConsoleErrorReporter };\n"]}]