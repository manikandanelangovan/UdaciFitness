["39dc6572951dcbf398c8092c715957f98d0cdc03","ba299227ac11768c7e1ca2c04eb8c9fd436ecc04",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/Subscribable.js"],"names":["Subscribable","Mixin","componentWillMount","_subscribableSubscriptions","componentWillUnmount","forEach","subscription","remove","addListenerOn","eventEmitter","eventType","listener","context","push","addListener","module","exports"],"mappings":";AAWA;;AAYA,IAAIA,eAAe,EAAnB;;AAEAA,aAAaC,KAAb,GAAqB;;AAEnBC,sBAAoB,8BAAW;AAC7B,SAAKC,0BAAL,GAAkC,EAAlC;AACD,GAJkB;;AAMnBC,wBAAsB,gCAAW;AAC/B,SAAKD,0BAAL,CAAgCE,OAAhC,CACE,UAACC,YAAD;AAAA,aAAkBA,aAAaC,MAAb,EAAlB;AAAA,KADF;AAGA,SAAKJ,0BAAL,GAAkC,IAAlC;AACD,GAXkB;;AA0BnBK,iBAAe,uBACbC,YADa,EAEbC,SAFa,EAGbC,QAHa,EAIbC,OAJa,EAKb;AACA,SAAKT,0BAAL,CAAgCU,IAAhC,CACEJ,aAAaK,WAAb,CAAyBJ,SAAzB,EAAoCC,QAApC,EAA8CC,OAA9C,CADF;AAGD;AAnCkB,CAArB;;AAsCAG,OAAOC,OAAP,GAAiBhB,YAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Subscribable\n * @flow\n */\n'use strict';\n\nimport type EventEmitter from 'EventEmitter';\n\n/**\n * Subscribable provides a mixin for safely subscribing a component to an\n * eventEmitter\n *\n * This will be replaced with the observe interface that will be coming soon to\n * React Core\n */\n\nvar Subscribable = {};\n\nSubscribable.Mixin = {\n\n  componentWillMount: function() {\n    this._subscribableSubscriptions = [];\n  },\n\n  componentWillUnmount: function() {\n    this._subscribableSubscriptions.forEach(\n      (subscription) => subscription.remove()\n    );\n    this._subscribableSubscriptions = null;\n  },\n\n  /**\n   * Special form of calling `addListener` that *guarantees* that a\n   * subscription *must* be tied to a component instance, and therefore will\n   * be cleaned up when the component is unmounted. It is impossible to create\n   * the subscription and pass it in - this method must be the one to create\n   * the subscription and therefore can guarantee it is retained in a way that\n   * will be cleaned up.\n   *\n   * @param {EventEmitter} eventEmitter emitter to subscribe to.\n   * @param {string} eventType Type of event to listen to.\n   * @param {function} listener Function to invoke when event occurs.\n   * @param {object} context Object to use as listener context.\n   */\n  addListenerOn: function(\n    eventEmitter: EventEmitter,\n    eventType: string,\n    listener: Function,\n    context: Object\n  ) {\n    this._subscribableSubscriptions.push(\n      eventEmitter.addListener(eventType, listener, context)\n    );\n  }\n};\n\nmodule.exports = Subscribable;\n"]}]