["59a6f97de09811e7207e22f5aaf754edf1c4a6c8","48cecdf0b9b15bc134fdef436979260e52815729",["react-native","./branchUniversalObject"],[356,411],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-branch/src/index.js"],"names":["RNBranch","RNBranchEventEmitter","DEFAULT_INIT_SESSION_TTL","AddToCartEvent","ADD_TO_CART_EVENT","AddToWishlistEvent","ADD_TO_WISHLIST_EVENT","PurchasedEvent","PURCHASED_EVENT","PurchaseInitiatedEvent","PURCHASE_INITIATED_EVENT","RegisterViewEvent","REGISTER_VIEW_EVENT","ShareCompletedEvent","SHARE_COMPLETED_EVENT","ShareInitiatedEvent","SHARE_INITIATED_EVENT","Branch","options","nativeEventEmitter","select","android","ios","initSessionTtl","_launchTime","Date","getTime","_debug","setDebug","getLatestReferringParams","getFirstReferringParams","setIdentity","identity","logout","userCompletedAction","event","state","getShortUrl","redeemRewards","amount","bucket","loadRewards","getCreditHistory","createBranchUniversalObject","debug","listener","_timeSinceLaunch","redeemInitSessionResult","then","result","_addListener","unsubscribe","_removeListener","addListener","INIT_SESSION_SUCCESS","INIT_SESSION_ERROR","removeListener"],"mappings":"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","sourcesContent":["import { NativeModules, NativeEventEmitter, DeviceEventEmitter, Platform } from 'react-native'\n\nconst { RNBranch, RNBranchEventEmitter } = NativeModules\n\nimport createBranchUniversalObject from './branchUniversalObject'\n\nexport const DEFAULT_INIT_SESSION_TTL = 5000\n\nexport const AddToCartEvent = RNBranch.ADD_TO_CART_EVENT\nexport const AddToWishlistEvent = RNBranch.ADD_TO_WISHLIST_EVENT\nexport const PurchasedEvent = RNBranch.PURCHASED_EVENT\nexport const PurchaseInitiatedEvent = RNBranch.PURCHASE_INITIATED_EVENT\nexport const RegisterViewEvent = RNBranch.REGISTER_VIEW_EVENT\nexport const ShareCompletedEvent = RNBranch.SHARE_COMPLETED_EVENT\nexport const ShareInitiatedEvent = RNBranch.SHARE_INITIATED_EVENT\n\nclass Branch {\n  nativeEventEmitter = Platform.select({\n    android: DeviceEventEmitter,\n    ios: new NativeEventEmitter(RNBranchEventEmitter)\n  })\n  initSessionTtl = DEFAULT_INIT_SESSION_TTL;\n\n  _launchTime = new Date().getTime();\n  _debug = false;\n\n  constructor(options = {}) {\n    if (options.debug) this._debug = true\n  }\n\n  subscribe(listener) {\n    /*\n     * If this is within the INIT_SESSION_TTL, get the cached value from the native layer (asynchronously).\n     * If none, the listener is not called. If there is a cached value, it is passed to the listener.\n     */\n    if (this._timeSinceLaunch() < this.initSessionTtl) {\n      RNBranch.redeemInitSessionResult().then((result) => {\n        if (result) {\n          listener(result)\n        }\n\n        /*\n         * https://github.com/BranchMetrics/react-native-branch-deep-linking/issues/79\n         *\n         * By waiting until redeemInitSessionResult() returns, we roughly simulate a\n         * synchronous call to the native layer.\n         *\n         * Note that this is equivalent to\n         *\n         * let result = await RNBranch.redeemInitSessionResult()\n         * if (result) listener(result)\n         * this._addListener(listener)\n         *\n         * But by using then(), the subscribe method does not have to be async.\n         * This way, we don't add event listeners until the listener has received the\n         * initial cached value, which essentially eliminates all possibility of\n         * getting the same event twice.\n         */\n        this._addListener(listener)\n      })\n    }\n    else {\n      this._addListener(listener)\n    }\n\n    const unsubscribe = () => {\n      this._removeListener(listener)\n    }\n\n    return unsubscribe\n  }\n\n  _timeSinceLaunch() {\n    return new Date().getTime() - this._launchTime\n  }\n\n  _addListener(listener) {\n    this.nativeEventEmitter.addListener(RNBranch.INIT_SESSION_SUCCESS, listener)\n    this.nativeEventEmitter.addListener(RNBranch.INIT_SESSION_ERROR, listener)\n  }\n\n  _removeListener(listener) {\n    this.nativeEventEmitter.removeListener(RNBranch.INIT_SESSION_SUCCESS, listener)\n    this.nativeEventEmitter.removeListener(RNBranch.INIT_SESSION_ERROR, listener)\n  }\n\n  /*** RNBranch singleton methods ***/\n  setDebug = RNBranch.setDebug\n  getLatestReferringParams = RNBranch.getLatestReferringParams\n  getFirstReferringParams = RNBranch.getFirstReferringParams\n  setIdentity = (identity) => RNBranch.setIdentity(identity)\n  logout = RNBranch.logout\n  userCompletedAction = (event, state = {}) => RNBranch.userCompletedAction(event, state)\n  getShortUrl = RNBranch.getShortUrl\n\n  /*** Referral Methods ***/\n  redeemRewards = (amount, bucket) => RNBranch.redeemRewards(amount, bucket)\n  loadRewards = RNBranch.loadRewards\n  getCreditHistory = RNBranch.getCreditHistory\n\n  /*** BranchUniversalObject ***/\n  createBranchUniversalObject = createBranchUniversalObject\n}\n\nexport { Branch }\nexport default new Branch()\n"]}]