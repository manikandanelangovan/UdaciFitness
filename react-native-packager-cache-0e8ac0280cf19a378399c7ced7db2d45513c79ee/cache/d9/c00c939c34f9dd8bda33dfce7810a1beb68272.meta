["a5b85f68830a3a296a043812bab20a023afd2073","6e496e27adc47fdcfd7bd6e021aa0d4e09fbfbb8",["react","react-native","./AppLoading"],[116,213,257],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/launch/RootErrorBoundary.js"],"names":["RootErrorBoundary","state","error","_appLoadingIsMounted","_subscribeToGlobalErrors","originalErrorHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","isFatal","ExponentAppLoadingManager","finishedAsync","setState","_unsubscribeFromGlobalErrors","__DEV__","once","console","paragraphStyle","marginBottom","textAlign","marginHorizontal","maxWidth","fontSize","color","flex","alignItems","justifyContent","props","children","Component"],"mappings":";;;;;AACA;;;;AACA;;AAEA;;IAMqBA,iB;;;;;;;;;;;;;;wNACnBC,K,GAAQ;AACNC,aAAO;AADD,K,QAIRC,oB,GAAuB,K,QAmBvBC,wB,GAA2B,YAAM;AAC/B,YAAKD,oBAAL,GAA4B,IAA5B;;AAGA,UAAIE,uBAAuBC,WAAWC,gBAAX,EAA3B;;AAEAD,iBAAWE,gBAAX,CAA4B,UAACN,KAAD,EAAQO,OAAR,EAAoB;AAC9C,YAAI,MAAKN,oBAAT,EAA+B;AAC7B,qCAAcO,yBAAd,IACE,2BAAcA,yBAAd,CAAwCC,aAAxC,EADF;;AAGA,cAAIF,OAAJ,EAAa;AACX,kBAAKG,QAAL,CAAc,EAAEV,YAAF,EAAd;AACD;AACF;;AAEDG,6BAAqBH,KAArB,EAA4BO,OAA5B;AACD,OAXD;AAYD,K,QAEDI,4B,GAA+B,YAAM;AAKnC,YAAKV,oBAAL,GAA4B,KAA5B;AACD,K;;;;;yCA3CoB;AAKnB,UAAIW,OAAJ,EAAa;AACX,yDAAgCC,IAAhC,CACE,mBADF,EAEE,KAAKX,wBAFP;AAIA,yDAAgCW,IAAhC,CACE,sBADF,EAEE,KAAKF,4BAFP;AAID;AACF;;;yCA+BoBX,K,EAAY;AAC/B,UAAI,KAAKC,oBAAT,EAA+B;AAC7B,mCAAcO,yBAAd,IACE,2BAAcA,yBAAd,CAAwCC,aAAxC,EADF;AAED;;AAGDK,cAAQd,KAAR,CAAcA,KAAd;;AAEA,UAAIY,OAAJ,EAAa;AACX,aAAKF,QAAL,CAAc,EAAEV,YAAF,EAAd;AACD;AACF;;;6BAEQ;AACP,UAAI,KAAKD,KAAL,CAAWC,KAAf,EAAsB;AACpB,YAAMe,iBAAiB;AACrBC,wBAAc,EADO;AAErBC,qBAAW,QAFU;AAGrBC,4BAAkB,EAHG;AAIrBC,oBAAU,GAJW;AAKrBC,oBAAU,EALW;AAMrBC,iBAAO;AANc,SAAvB;;AASA,eACE;AAAA;AAAA;AACE,mBAAO,EAAEC,MAAM,CAAR,EAAWC,YAAY,QAAvB,EAAiCC,gBAAgB,QAAjD,EADT;AAEE;AAAA;AAAA,cAAM,OAAO,EAAEJ,UAAU,EAAZ,EAAgBJ,cAAc,EAA9B,EAAb;AAAA;AAAA,WAFF;AAGE;AAAA;AAAA,cAAM,OAAO,CAACD,cAAD,EAAiB,EAAEM,OAAO,MAAT,EAAjB,CAAb;AAAA;AAAA,WAHF;AAME;AAAA;AAAA,cAAM,OAAON,cAAb;AAAA;AAAA;AANF,SADF;AAcD,OAxBD,MAwBO;AACL,eAAO,KAAKU,KAAL,CAAWC,QAAlB;AACD;AACF;;;EA/F4C,gBAAMC,S;;kBAAhC7B,iB","sourcesContent":["/* @flow */\nimport React from 'react';\nimport { NativeModules, Text, View } from 'react-native';\n\nimport { getAppLoadingLifecycleEmitter } from './AppLoading';\n\ntype State = {\n  error: any,\n};\n\nexport default class RootErrorBoundary extends React.Component<*, State> {\n  state = {\n    error: null,\n  };\n\n  _appLoadingIsMounted = false;\n\n  componentWillMount() {\n    // In production the app will just hard crash on errors, unless the developer\n    // decides to handle them by overriding the global error handler and swallowing\n    // the error, in which case they are responsible for determining how to recover\n    // from this state.\n    if (__DEV__) {\n      getAppLoadingLifecycleEmitter().once(\n        'componentDidMount',\n        this._subscribeToGlobalErrors\n      );\n      getAppLoadingLifecycleEmitter().once(\n        'componentWillUnmount',\n        this._unsubscribeFromGlobalErrors\n      );\n    }\n  }\n\n  _subscribeToGlobalErrors = () => {\n    this._appLoadingIsMounted = true;\n\n    /* $FlowFixMe */\n    let originalErrorHandler = ErrorUtils.getGlobalHandler();\n\n    ErrorUtils.setGlobalHandler((error, isFatal) => {\n      if (this._appLoadingIsMounted) {\n        NativeModules.ExponentAppLoadingManager &&\n          NativeModules.ExponentAppLoadingManager.finishedAsync();\n\n        if (isFatal) {\n          this.setState({ error });\n        }\n      }\n\n      originalErrorHandler(error, isFatal);\n    });\n  };\n\n  _unsubscribeFromGlobalErrors = () => {\n    // We don't remove the global error handler that we set here because\n    // it is conceivable that the user may add error handlers *after*\n    // we subscribe, and we don't want to override those, so instead we just\n    // gate call\n    this._appLoadingIsMounted = false;\n  };\n\n  // Test this by adding `throw new Error('example')` to your root component\n  unstable_handleError(error: any) {\n    if (this._appLoadingIsMounted) {\n      NativeModules.ExponentAppLoadingManager &&\n        NativeModules.ExponentAppLoadingManager.finishedAsync();\n    }\n\n    // This will hard crash your app in production\n    console.error(error);\n\n    if (__DEV__) {\n      this.setState({ error });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      const paragraphStyle = {\n        marginBottom: 10,\n        textAlign: 'center',\n        marginHorizontal: 30,\n        maxWidth: 350,\n        fontSize: 15,\n        color: '#888',\n      };\n\n      return (\n        <View\n          style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n          <Text style={{ fontSize: 40, marginBottom: 20 }}>⚠️</Text>\n          <Text style={[paragraphStyle, { color: '#000' }]}>\n            A fatal error was encountered while rendering the root component.\n          </Text>\n          <Text style={paragraphStyle}>\n            Review your application logs for more information, and reload the\n            app when the issue is resolved. In production, your app would have\n            crashed.\n          </Text>\n        </View>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n"]}]