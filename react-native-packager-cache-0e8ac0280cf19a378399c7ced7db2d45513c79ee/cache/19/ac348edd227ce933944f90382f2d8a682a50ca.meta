["e382a8e413488cd093964aaf737085f2c52ca997","718d8ab6dda429f9982c5bbe0e6a53312f792558",["react-native","invariant","regenerator-runtime"],[93,136,251],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/WebBrowser.js"],"names":["ExponentWebBrowser","openBrowserAsync","url","dismissBrowser","openAuthSessionAsync","redirectUrl","_authSessionIsNativelySupported","_openAuthSessionPolyfillAsync","dismissAuthSession","OS","versionNumber","parseInt","Version","_redirectHandler","startUrl","returnUrl","result","error","Promise","race","_waitForRedirectAsync","removeEventListener","event","startsWith","resolve","type","addEventListener"],"mappings":";;;;AACA;;AACA;;;;;;IAEQA,kB,8BAAAA,kB;;;AAMR,SAAeC,gBAAf,CACEC,GADF;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGSF,mBAAmBC,gBAAnB,CAAoCC,GAApC,CAHT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAASC,cAAT,GAAgC;AAC9BH,qBAAmBG,cAAnB;AACD;;AAED,SAAeC,oBAAf,CACEF,GADF,EAEEG,WAFF;AAAA;AAAA;AAAA;AAAA;AAAA,eAIMC,iCAJN;AAAA;AAAA;AAAA;;AAAA,4CAKWN,mBAAmBI,oBAAnB,CAAwCF,GAAxC,EAA6CG,WAA7C,CALX;;AAAA;AAAA,4CAOWE,8BAA8BL,GAA9B,EAAmCG,WAAnC,CAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAASG,kBAAT,GAAoC;AAClC,MAAIF,iCAAJ,EAAuC;AACrCN,uBAAmBQ,kBAAnB;AACD,GAFD,MAEO;AACLR,uBAAmBG,cAAnB;AACD;AACF;;AAID,SAASG,+BAAT,GAA2C;AACzC,MAAI,sBAASG,EAAT,KAAgB,SAApB,EAA+B;AAC7B,WAAO,KAAP;AACD;;AAED,MAAMC,gBAAgBC,SAAS,sBAASC,OAAlB,EAA2B,EAA3B,CAAtB;AACA,SAAOF,iBAAiB,EAAxB;AACD;;AAED,IAAIG,yBAAJ;AACA,SAAeN,6BAAf,CAA6CO,QAA7C,EAAuDC,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,mCACE,CAACF,gBADH,EAEE,uGAFF;;AAKIG,gBANN;AAOMC,eAPN;AAAA;AAAA;AAAA,0CASmBC,QAAQC,IAAR,CAAa,CAC1BlB,iBAAiBa,QAAjB,CAD0B,EAE1BM,sBAAsBL,SAAtB,CAF0B,CAAb,CATnB;;AAAA;AASIC,gBATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAcIC;;AAdJ;;AAiBEd;AACA,+BAAQkB,mBAAR,CAA4B,KAA5B,EAAmCR,gBAAnC;AACAA,6BAAmB,IAAnB;;AAnBF,eAqBMI,KArBN;AAAA;AAAA;AAAA;;AAAA,gBAsBUA,KAtBV;;AAAA;AAAA,4CAwBWD,MAxBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA4BA,SAASI,qBAAT,CAA+BL,SAA/B,EAA0C;AACxC,SAAO,IAAIG,OAAJ,CAAY,mBAAW;AAC5BL,uBAAmB,0BAACS,KAAD,EAA0B;AAC3C,UAAIA,MAAMpB,GAAN,CAAUqB,UAAV,CAAqBR,SAArB,CAAJ,EAAqC;AACnCS,gBAAQ,EAAEtB,KAAKoB,MAAMpB,GAAb,EAAkBuB,MAAM,SAAxB,EAAR;AACD;AACF,KAJD;;AAMA,yBAAQC,gBAAR,CAAyB,KAAzB,EAAgCb,gBAAhC;AACD,GARM,CAAP;AASD;;kBAEc;AACbZ,oCADa;AAEbG,4CAFa;AAGbD,gCAHa;AAIbK;AAJa,C","sourcesContent":["// @flow\nimport { Linking, NativeModules, Platform } from 'react-native';\nimport invariant from 'invariant';\n\nconst { ExponentWebBrowser } = NativeModules;\n\ntype RedirectEvent = {\n  url: 'string',\n};\n\nasync function openBrowserAsync(\n  url: string\n): Promise<{ type: 'cancel' | 'dismissed' }> {\n  return ExponentWebBrowser.openBrowserAsync(url);\n}\n\nfunction dismissBrowser(): void {\n  ExponentWebBrowser.dismissBrowser();\n}\n\nasync function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string\n): Promise<any> {\n  if (_authSessionIsNativelySupported()) {\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nfunction dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(Platform.Version, 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler;\nasync function _openAuthSessionPolyfillAsync(startUrl, returnUrl) {\n  invariant(\n    !_redirectHandler,\n    'WebBrowser.openAuthSessionAsync is in a bad state. _redirectHandler is defined when it should not be.'\n  );\n\n  let result;\n  let error;\n  try {\n    result = await Promise.race([\n      openBrowserAsync(startUrl),\n      _waitForRedirectAsync(returnUrl),\n    ]);\n  } catch (e) {\n    error = e;\n  }\n\n  dismissBrowser();\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n\n  if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n}\n\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n\nexport default {\n  openBrowserAsync,\n  openAuthSessionAsync,\n  dismissBrowser,\n  dismissAuthSession,\n};\n"]}]