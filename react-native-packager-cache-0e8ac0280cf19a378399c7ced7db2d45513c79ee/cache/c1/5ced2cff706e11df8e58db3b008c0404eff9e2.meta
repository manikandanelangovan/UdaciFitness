["c4adac845213e7837b9a3e1acfadc77ed167d8ed","ff559e0f3c9a0bff4f5ded893a7efb7b0889a158",["MissingNativeEventEmitterShim","NativeEventEmitter","NativeModules","convertRequestBody"],[60,127,184,246],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Network/RCTNetworking.ios.js"],"names":["MissingNativeEventEmitterShim","require","NativeEventEmitter","RCTNetworkingNative","Networking","convertRequestBody","RCTNetworking","isAvailable","method","trackingName","url","headers","data","responseType","incrementalUpdates","timeout","callback","withCredentials","body","sendRequest","requestId","abortRequest","clearCookies","__DEV__","MissingNativeRCTNetworkingShim","throwMissingNativeModule","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,gCAAgCC,OAAhC,iCAAN;AACA,IAAMC,qBAAqBD,OAArB,sBAAN;AACA,IAAME,sBAAsBF,yBAAyBG,UAArD;AACA,IAAMC,qBAAqBJ,OAArB,sBAAN;;IAIMK,a;;;AAIJ,2BAAc;AAAA;;AAAA,0IACNH,mBADM;;AAAA,UAFdI,WAEc,GAFS,IAET;AAAA;AAEb;;;;gCAGCC,M,EACAC,Y,EACAC,G,EACAC,O,EACAC,I,EACAC,Y,EACAC,kB,EACAC,O,EACAC,Q,EACAC,e,EACA;AACA,UAAMC,OAAOb,mBAAmBO,IAAnB,CAAb;AACAT,0BAAoBgB,WAApB,CAAgC;AAC9BX,sBAD8B;AAE9BE,gBAF8B;AAG9BE,uCAAUM,IAAV,IAAgBT,0BAAhB,GAH8B;AAI9BE,wBAJ8B;AAK9BE,kCAL8B;AAM9BC,8CAN8B;AAO9BC,wBAP8B;AAQ9BE;AAR8B,OAAhC,EASGD,QATH;AAUD;;;iCAEYI,S,EAAmB;AAC9BjB,0BAAoBkB,YAApB,CAAiCD,SAAjC;AACD;;;iCAEYJ,Q,EAAoC;AAC/Cb,0BAAoBmB,YAApB,CAAiCN,QAAjC;AACD;;;EAvCyBd,kB;;AA0C5B,IAAIqB,WAAW,CAACpB,mBAAhB,EAAqC;AAAA,MAC7BqB,8BAD6B;AAAA;;AAEjC,8CAAc;AAAA;AAAA,yKACN,eADM,EACW,YADX;AAEb;;AAJgC;AAAA;AAAA,oCAMA;AAC/B,aAAKC,wBAAL;AACD;AARgC;AAAA;AAAA,qCAUC;AAChC,aAAKA,wBAAL;AACD;AAZgC;AAAA;AAAA,qCAcC;AAChC,aAAKA,wBAAL;AACD;AAhBgC;AAAA;AAAA,IACUzB,6BADV;;AAsBnCM,kBAAgB,IAAIkB,8BAAJ,EAAhB;AACD,CAvBD,MAuBO;AACLlB,kBAAgB,IAAIA,aAAJ,EAAhB;AACD;;AAEDoB,OAAOC,OAAP,GAAiBrB,aAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RCTNetworking\n * @flow\n */\n'use strict';\n\nconst MissingNativeEventEmitterShim = require('MissingNativeEventEmitterShim');\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTNetworkingNative = require('NativeModules').Networking;\nconst convertRequestBody = require('convertRequestBody');\n\nimport type {RequestBody} from 'convertRequestBody';\n\nclass RCTNetworking extends NativeEventEmitter {\n\n  isAvailable: boolean = true;\n\n  constructor() {\n    super(RCTNetworkingNative);\n  }\n\n  sendRequest(\n    method: string,\n    trackingName: string,\n    url: string,\n    headers: Object,\n    data: RequestBody,\n    responseType: 'text' | 'base64',\n    incrementalUpdates: boolean,\n    timeout: number,\n    callback: (requestId: number) => any,\n    withCredentials: boolean\n  ) {\n    const body = convertRequestBody(data);\n    RCTNetworkingNative.sendRequest({\n      method,\n      url,\n      data: {...body, trackingName},\n      headers,\n      responseType,\n      incrementalUpdates,\n      timeout,\n      withCredentials\n    }, callback);\n  }\n\n  abortRequest(requestId: number) {\n    RCTNetworkingNative.abortRequest(requestId);\n  }\n\n  clearCookies(callback: (result: boolean) => any) {\n    RCTNetworkingNative.clearCookies(callback);\n  }\n}\n\nif (__DEV__ && !RCTNetworkingNative) {\n  class MissingNativeRCTNetworkingShim extends MissingNativeEventEmitterShim {\n    constructor() {\n      super('RCTNetworking', 'Networking');\n    }\n\n    sendRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    abortRequest(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n\n    clearCookies(...args: Array<any>) {\n      this.throwMissingNativeModule();\n    }\n  }\n\n  // This module depends on the native `RCTNetworkingNative` module. If you don't include it,\n  // `RCTNetworking.isAvailable` will return `false`, and any method calls will throw.\n  // We reassign the class variable to keep the autodoc generator happy.\n  RCTNetworking = new MissingNativeRCTNetworkingShim();\n} else {\n  RCTNetworking = new RCTNetworking();\n}\n\nmodule.exports = RCTNetworking;\n"]}]