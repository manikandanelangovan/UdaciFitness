["1e5958f2d0b08abf97286fe6a31150b7c31655e4","be4925f2ffde01ecc67d1ce0db8d0eed6c2d19ed",["react-native","fbemitter"],[93,136],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/facebook-ads/NativeAdsManager.js"],"names":["CTKNativeAdManager","CTKNativeAdEmitter","nativeAdEmitter","EVENT_DID_BECOME_VALID","NativeAdsManager","placementId","adsToRequest","isValid","eventEmitter","_listenForStateChanges","init","addListener","isValidNew","managers","emit","func","setTimeout","remove","once","disableAutoRefresh","cachePolicy","setMediaCachePolicy"],"mappings":";;;;AAEA;;AACA;;IAEQA,kB,8BAAAA,kB;IAAoBC,kB,8BAAAA,kB;;;AAE5B,IAAMC,kBAAkB,oCAAuBD,kBAAvB,CAAxB;;AAEA,IAAME,yBAAyB,0BAA/B;;IAIMC,gB;AAmBJ,4BAAYC,WAAZ,EAA4D;AAAA,QAA3BC,YAA2B,uEAAJ,EAAI;AAAA;AAAA,SAX5DC,OAW4D,GAXzC,KAWyC;AAAA,SAR5DC,YAQ4D,GAR/B,6BAQ+B;;AAC1D,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBA,YAApB;;AAEA,SAAKG,sBAAL;;AAEAT,uBAAmBU,IAAnB,CAAwBL,WAAxB,EAAqCC,YAArC;AACD;;;;6CAMwB;AAAA;;AACvBJ,sBAAgBS,WAAhB,CAA4B,6BAA5B,EAA2D,oBAAY;AACrE,YAAMC,aAAaC,SAAS,MAAKR,WAAd,CAAnB;AACA,YAAME,UAAU,MAAKA,OAArB;;AAEA,YAAIA,YAAYK,UAAZ,IAA0BA,UAA9B,EAA0C;AACxC,gBAAKL,OAAL,GAAe,IAAf;AACA,gBAAKC,YAAL,CAAkBM,IAAlB,CAAuBX,sBAAvB;AACD;AACF,OARD;AASD;;;gCAQWY,I,EAAqC;AAC/C,UAAI,KAAKR,OAAT,EAAkB;AAChBS,mBAAWD,IAAX;AACA,eAAO;AACLE,kBAAQ,kBAAM,CAAE;AADX,SAAP;AAGD;;AAED,aAAO,KAAKT,YAAL,CAAkBU,IAAlB,CAAuBf,sBAAvB,EAA+CY,IAA/C,CAAP;AACD;;;yCAKoB;AACnBf,yBAAmBmB,kBAAnB,CAAsC,KAAKd,WAA3C;AACD;;;wCAOmBe,W,EAAmC;AACrDpB,yBAAmBqB,mBAAnB,CAAuC,KAAKhB,WAA5C,EAAyDe,WAAzD;AACD;;;6BAEQ;AACP,aAAO,KAAKf,WAAZ;AACD;;;;;kBAGYD,gB","sourcesContent":["/* @flow */\n\nimport { NativeModules, NativeEventEmitter } from 'react-native';\nimport { EventEmitter, EmitterSubscription } from 'fbemitter';\n\nconst { CTKNativeAdManager, CTKNativeAdEmitter } = NativeModules;\n\nconst nativeAdEmitter = new NativeEventEmitter(CTKNativeAdEmitter);\n\nconst EVENT_DID_BECOME_VALID = 'AdsManagerDidBecomeValid';\n\ntype AdManagerCachePolicy = 'none' | 'icon' | 'image' | 'all';\n\nclass NativeAdsManager {\n  /** {@string} with placement id of ads **/\n  placementId: string;\n\n  /** {@number} of ads to request at once **/\n  adsToRequest: number;\n\n  /** {@boolean} indicating whether AdsManager is ready to serve ads **/\n  isValid: boolean = false;\n\n  /** {@EventEmitter} used for sending out updates **/\n  eventEmitter: EventEmitter = new EventEmitter();\n\n  /**\n   * Creates an instance of AdsManager with a given placementId and adsToRequest.\n   * Default number of ads to request is `10`.\n   *\n   * AdsManager will become loading ads immediately\n   */\n  constructor(placementId: string, adsToRequest: number = 10) {\n    this.placementId = placementId;\n    this.adsToRequest = adsToRequest;\n\n    this._listenForStateChanges();\n\n    CTKNativeAdManager.init(placementId, adsToRequest);\n  }\n\n  /**\n   * Listens for AdManager state changes and updates internal state. When it changes,\n   * callers will be notified of a change\n   */\n  _listenForStateChanges() {\n    nativeAdEmitter.addListener('CTKNativeAdsManagersChanged', managers => {\n      const isValidNew = managers[this.placementId];\n      const isValid = this.isValid;\n\n      if (isValid !== isValidNew && isValidNew) {\n        this.isValid = true;\n        this.eventEmitter.emit(EVENT_DID_BECOME_VALID);\n      }\n    });\n  }\n\n  /**\n   * Used to listening for state changes\n   *\n   * If manager already became valid, it will call the function w/o registering\n   * handler for events\n   */\n  onAdsLoaded(func: Function): EmitterSubscription {\n    if (this.isValid) {\n      setTimeout(func);\n      return {\n        remove: () => {},\n      };\n    }\n\n    return this.eventEmitter.once(EVENT_DID_BECOME_VALID, func);\n  }\n\n  /**\n   * Disables auto refreshing for this native ad manager\n   */\n  disableAutoRefresh() {\n    CTKNativeAdManager.disableAutoRefresh(this.placementId);\n  }\n\n  /**\n   * Set the native ads manager caching policy. This controls which media from\n   * the native ads are cached before the onAdsLoaded is called.\n   * The default is to not block on caching.\n   */\n  setMediaCachePolicy(cachePolicy: AdManagerCachePolicy) {\n    CTKNativeAdManager.setMediaCachePolicy(this.placementId, cachePolicy);\n  }\n\n  toJSON() {\n    return this.placementId;\n  }\n}\n\nexport default NativeAdsManager;\n"]}]