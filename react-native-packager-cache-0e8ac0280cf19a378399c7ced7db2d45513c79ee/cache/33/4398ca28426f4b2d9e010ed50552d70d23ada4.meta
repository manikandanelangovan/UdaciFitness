["b7dfe6f04d5dc19e38046a8d2c15834450bba223","ed75669ef23a6fe578363b763c15a8c4ff8d0de8",["NativeModules","fbjs/lib/invariant"],[44,87],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js"],"names":["NativeModules","require","invariant","FrameRateLogger","setGlobalOptions","options","debug","undefined","setContext","context","beginScroll","endScroll","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,OAAhB,iBAAN;;AAEA,IAAMC,YAAYD,OAAZ,sBAAN;;AAkBA,IAAME,kBAAkB;AAKtBC,oBAAkB,0BAASC,OAAT,EAAkE;AAClF,QAAIA,QAAQC,KAAR,KAAkBC,SAAtB,EAAiC;AAC/BL,gBACEF,cAAcG,eADhB,EAEE,4DAFF;AAID;AACDH,kBAAcG,eAAd,IAAiCH,cAAcG,eAAd,CAA8BC,gBAA9B,CAA+CC,OAA/C,CAAjC;AACD,GAbqB;;AAmBtBG,cAAY,oBAASC,OAAT,EAA0B;AACpCT,kBAAcG,eAAd,IAAiCH,cAAcG,eAAd,CAA8BK,UAA9B,CAAyCC,OAAzC,CAAjC;AACD,GArBqB;;AA2BtBC,aA3BsB,yBA2BR;AACZV,kBAAcG,eAAd,IAAiCH,cAAcG,eAAd,CAA8BO,WAA9B,EAAjC;AACD,GA7BqB;AAmCtBC,WAnCsB,uBAmCV;AACVX,kBAAcG,eAAd,IAAiCH,cAAcG,eAAd,CAA8BQ,SAA9B,EAAjC;AACD;AArCqB,CAAxB;;AAwCAC,OAAOC,OAAP,GAAiBV,eAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FrameRateLogger\n * @flow\n */\n'use strict';\n\nconst NativeModules = require('NativeModules');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\n * are just no-ops.\n *\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\n * analysis.\n *\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\n * bug, but the native module should be robust to that.\n *\n * In the future we may add support for tracking frame drops in other types of interactions beyond\n * scrolling.\n */\nconst FrameRateLogger = {\n  /**\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\n   * during UI thread stalls and upload them if the native module supports it.\n   */\n  setGlobalOptions: function(options: {debug?: boolean, reportStackTraces?: boolean}) {\n    if (options.debug !== undefined) {\n      invariant(\n        NativeModules.FrameRateLogger,\n        'Trying to debug FrameRateLogger without the native module!',\n      );\n    }\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);\n  },\n\n  /**\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\n   * in `AppRegistry`, but navigation is also a common place to hook in.\n   */\n  setContext: function(context: string) {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  beginScroll() {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  endScroll() {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();\n  },\n};\n\nmodule.exports = FrameRateLogger;\n"]}]