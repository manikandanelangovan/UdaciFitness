["ab0410dbd623aa37c662d49e83a32b6e79fb2394","ccec08c66a4e07a2d4cf709dc3c02fb0eef8a83d",["fbjs/lib/invariant"],[204],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/fbemitter/lib/EventSubscriptionVendor.js"],"names":["_classCallCheck","instance","Constructor","TypeError","invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","prototype","addSubscription","eventType","subscription","subscriber","process","env","NODE_ENV","undefined","key","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType","module","exports"],"mappings":";;AAYA;;AAEA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,oBAAoBC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,IAAIC,YAAYC,OAAZ,sBAAJ;;AAOA,IAAIC,0BAA2B,YAAY;AACzC,WAASA,uBAAT,GAAmC;AACjCN,oBAAgB,IAAhB,EAAsBM,uBAAtB;;AAEA,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACD;;AASDF,0BAAwBG,SAAxB,CAAkCC,eAAlC,GAAoD,SAASA,eAAT,CAAyBC,SAAzB,EAAoCC,YAApC,EAAkD;AACpG,MAAEA,aAAaC,UAAb,KAA4B,IAA9B,IAAsCC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCZ,UAAU,KAAV,EAAiB,wDAAjB,CAAxC,GAAqHA,UAAU,KAAV,CAA3J,GAA8Ka,SAA9K;AACA,QAAI,CAAC,KAAKV,qBAAL,CAA2BI,SAA3B,CAAL,EAA4C;AAC1C,WAAKJ,qBAAL,CAA2BI,SAA3B,IAAwC,EAAxC;AACD;AACD,QAAIO,MAAM,KAAKX,qBAAL,CAA2BI,SAA3B,EAAsCQ,MAAhD;AACA,SAAKZ,qBAAL,CAA2BI,SAA3B,EAAsCS,IAAtC,CAA2CR,YAA3C;AACAA,iBAAaD,SAAb,GAAyBA,SAAzB;AACAC,iBAAaM,GAAb,GAAmBA,GAAnB;AACA,WAAON,YAAP;AACD,GAVD;;AAmBAN,0BAAwBG,SAAxB,CAAkCY,sBAAlC,GAA2D,SAASA,sBAAT,CAAgCV,SAAhC,EAA2C;AACpG,QAAIA,cAAcM,SAAlB,EAA6B;AAC3B,WAAKV,qBAAL,GAA6B,EAA7B;AACD,KAFD,MAEO;AACL,aAAO,KAAKA,qBAAL,CAA2BI,SAA3B,CAAP;AACD;AACF,GAND;;AAeAL,0BAAwBG,SAAxB,CAAkCa,kBAAlC,GAAuD,SAASA,kBAAT,CAA4BV,YAA5B,EAA0C;AAC/F,QAAID,YAAYC,aAAaD,SAA7B;AACA,QAAIO,MAAMN,aAAaM,GAAvB;;AAEA,QAAIK,uBAAuB,KAAKhB,qBAAL,CAA2BI,SAA3B,CAA3B;AACA,QAAIY,oBAAJ,EAA0B;AACxB,aAAOA,qBAAqBL,GAArB,CAAP;AACD;AACF,GARD;;AAuBAZ,0BAAwBG,SAAxB,CAAkCe,uBAAlC,GAA4D,SAASA,uBAAT,CAAiCb,SAAjC,EAA4C;AACtG,WAAO,KAAKJ,qBAAL,CAA2BI,SAA3B,CAAP;AACD,GAFD;;AAIA,SAAOL,uBAAP;AACD,CA7E6B,EAA9B;;AA+EAmB,OAAOC,OAAP,GAAiBpB,uBAAjB","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n * \n * @providesModule EventSubscriptionVendor\n * @typechecks\n */\n\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\n\nvar EventSubscriptionVendor = (function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n\n  EventSubscriptionVendor.prototype.addSubscription = function addSubscription(eventType, subscription) {\n    !(subscription.subscriber === this) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The subscriber of the subscription is incorrectly set.') : invariant(false) : undefined;\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    var key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  };\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n\n  EventSubscriptionVendor.prototype.removeAllSubscriptions = function removeAllSubscriptions(eventType) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  };\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n\n  EventSubscriptionVendor.prototype.removeSubscription = function removeSubscription(subscription) {\n    var eventType = subscription.eventType;\n    var key = subscription.key;\n\n    var subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  };\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @return {?array}\n   */\n\n  EventSubscriptionVendor.prototype.getSubscriptionsForType = function getSubscriptionsForType(eventType) {\n    return this._subscriptionsForType[eventType];\n  };\n\n  return EventSubscriptionVendor;\n})();\n\nmodule.exports = EventSubscriptionVendor;"]}]