["3f6906fc83eb72cab67de8218041568780de9de6","c66b1bae4559c9bc1d15316c8686e24b2b5b8f5c",["InspectorAgent","JSInspector","Map","XMLHttpRequest"],[66,111,145,182],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/JSInspector/NetworkAgent.js"],"names":["InspectorAgent","require","JSInspector","Map","XMLHttpRequest","Interceptor","agent","_agent","_requests","requestId","get","id","url","method","headers","String","set","request","initialPriority","event","documentURL","frameId","loaderId","timestamp","getTimestamp","initiator","type","sendEvent","status","response","statusText","requestHeaders","mimeType","_getMimeType","connectionReused","connectionId","encodedDataLength","securityState","data","existingData","concat","dataLength","length","error","errorText","contentType","split","NetworkAgent","maxResourceBufferSize","maxTotalBufferSize","_interceptor","setInterceptor","body","interceptor","getData","base64Encoded","Error","DOMAIN","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule NetworkAgent\n * @flow\n */\n'use strict';\n\nconst InspectorAgent = require('InspectorAgent');\nconst JSInspector = require('JSInspector');\nconst Map = require('Map');\nconst XMLHttpRequest = require('XMLHttpRequest');\n\nimport type EventSender from 'InspectorAgent';\n\ntype RequestId = string;\n\ntype LoaderId = string;\ntype FrameId = string;\ntype Timestamp = number;\n\ntype Headers = Object;\n\n// We don't currently care about this\ntype ResourceTiming = null;\n\ntype ResourceType =\n  'Document' |\n  'Stylesheet' |\n  'Image' |\n  'Media' |\n  'Font' |\n  'Script' |\n  'TextTrack' |\n  'XHR' |\n  'Fetch' |\n  'EventSource' |\n  'WebSocket' |\n  'Manifest' |\n  'Other';\n\ntype SecurityState =\n  'unknown' |\n  'neutral' |\n  'insecure' |\n  'warning' |\n  'secure' |\n  'info';\ntype BlockedReason =\n  'csp' |\n  'mixed-content' |\n  'origin' |\n  'inspector' |\n  'subresource-filter' |\n  'other';\n\ntype StackTrace = null;\n\ntype Initiator = {\n  type: 'script' | 'other',\n  stackTrace?: StackTrace,\n  url?: string,\n  lineNumber?: number\n}\n\ntype ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';\n\ntype Request = {\n  url: string,\n  method: string,\n  headers: Headers,\n  postData?: string,\n  mixedContentType?: 'blockable' | 'optionally-blockable' | 'none',\n  initialPriority: ResourcePriority,\n};\n\ntype Response = {\n  url: string,\n  status: number,\n  statusText: string,\n  headers: Headers,\n  headersText?: string,\n  mimeType: string,\n  requestHeaders?: Headers,\n  requestHeadersText?: string,\n  connectionReused: boolean,\n  connectionId: number,\n  fromDiskCache?: boolean,\n  encodedDataLength: number,\n  timing?: ResourceTiming,\n  securityState: SecurityState,\n};\n\ntype RequestWillBeSentEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  documentURL: string,\n  request: Request,\n  timestamp: Timestamp,\n  initiator: Initiator,\n  redirectResponse?: Response,\n  // This is supposed to be optional but the inspector crashes without it,\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=653138\n  type: ResourceType,\n};\n\ntype ResponseReceivedEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  response: Response,\n};\n\ntype DataReceived = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  dataLength: number,\n  encodedDataLength: number,\n};\n\ntype LoadingFinishedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  encodedDataLength: number,\n};\n\ntype LoadingFailedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  errorText: string,\n  canceled?: boolean,\n  blockedReason?: BlockedReason,\n};\n\nclass Interceptor {\n  _agent: NetworkAgent;\n  _requests: Map<string, string>;\n\n  constructor(agent: NetworkAgent) {\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  getData(requestId: string): ?string {\n    return this._requests.get(requestId);\n  }\n\n  requestSent(\n    id: number,\n    url: string,\n    method: string,\n    headers: Object) {\n    const requestId = String(id);\n    this._requests.set(requestId, '');\n\n    const request: Request = {\n      url,\n      method,\n      headers,\n      initialPriority: 'Medium',\n    };\n    const event: RequestWillBeSentEvent = {\n      requestId,\n      documentURL: '',\n      frameId: '1',\n      loaderId: '1',\n      request,\n      timestamp: JSInspector.getTimestamp(),\n      initiator: {\n        // TODO(blom): Get stack trace\n        // If type is 'script' the inspector will try to execute\n        // `stack.callFrames[0]`\n        type: 'other',\n      },\n      type: 'Other',\n    };\n    this._agent.sendEvent('requestWillBeSent', event);\n  }\n\n  responseReceived(\n    id: number,\n    url: string,\n    status: number,\n    headers: Object) {\n    const requestId = String(id);\n    const response: Response = {\n      url,\n      status,\n      statusText: String(status),\n      headers,\n      // TODO(blom) refined headers, can we get this?\n      requestHeaders: {},\n      mimeType: this._getMimeType(headers),\n      connectionReused: false,\n      connectionId: -1,\n      encodedDataLength: 0,\n      securityState: 'unknown',\n    };\n\n    const event: ResponseReceivedEvent = {\n      requestId,\n      frameId: '1',\n      loaderId: '1',\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      response,\n    };\n    this._agent.sendEvent('responseReceived', event);\n  }\n\n  dataReceived(\n    id: number,\n    data: string) {\n    const requestId = String(id);\n    const existingData = this._requests.get(requestId) || '';\n    this._requests.set(requestId, existingData.concat(data));\n    const event: DataReceived = {\n      requestId,\n      timestamp: JSInspector.getTimestamp(),\n      dataLength: data.length,\n      encodedDataLength: data.length,\n    };\n    this._agent.sendEvent('dataReceived', event);\n  }\n\n  loadingFinished(\n    id: number,\n    encodedDataLength: number) {\n    const event: LoadingFinishedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      encodedDataLength: encodedDataLength,\n    };\n    this._agent.sendEvent('loadingFinished', event);\n  }\n\n  loadingFailed(\n      id: number,\n      error: string) {\n    const event: LoadingFailedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      errorText: error,\n    };\n    this._agent.sendEvent('loadingFailed', event);\n  }\n\n  _getMimeType(headers: Object): string {\n    const contentType = headers['Content-Type'] || '';\n    return contentType.split(';')[0];\n  }\n}\n\ntype EnableArgs = {\n  maxResourceBufferSize?: number,\n  maxTotalBufferSize?: number\n};\n\nclass NetworkAgent extends InspectorAgent {\n  static DOMAIN = 'Network';\n\n  _sendEvent: EventSender;\n  _interceptor: ?Interceptor;\n\n  enable({ maxResourceBufferSize, maxTotalBufferSize }: EnableArgs) {\n    this._interceptor = new Interceptor(this);\n    XMLHttpRequest.setInterceptor(this._interceptor);\n  }\n\n  disable() {\n    XMLHttpRequest.setInterceptor(null);\n    this._interceptor = null;\n  }\n\n  getResponseBody({requestId}: {requestId: RequestId})\n      : {body: ?string, base64Encoded: boolean} {\n    return {body: this.interceptor().getData(requestId), base64Encoded: false};\n  }\n\n  interceptor(): Interceptor {\n    if (this._interceptor) {\n      return this._interceptor;\n    } else {\n      throw Error('_interceptor can not be null');\n    }\n\n  }\n}\n\nmodule.exports = NetworkAgent;\n"]}]