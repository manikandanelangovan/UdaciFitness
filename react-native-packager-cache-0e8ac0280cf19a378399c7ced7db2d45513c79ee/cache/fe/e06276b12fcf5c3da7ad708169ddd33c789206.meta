["57cb1da87f68563079c66e403b2039b38b7da4d1","33ab372773f020d5c00b0e1e95caf729892e3fee",["react","react-native"],[116,213],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/modal/ModalImplementation.js"],"names":["ModalImplementation","props","_handleHardwareBack","onRequestClose","visible","state","Value","rendered","addEventListener","nextProps","animationType","setState","timing","toValue","duration","easing","quad","useNativeDriver","start","onShow","finished","removeEventListener","transparent","layout","opacity","translate","interpolate","inputRange","outputRange","height","styles","container","backdrop","content","background","transform","translateY","children","create","position","top","left","right","bottom","flex","backgroundColor"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport React, { Component } from 'react';\nimport { Animated, BackHandler, Easing, StyleSheet, View } from 'react-native';\n\nexport type ModalProps = {\n  visible: boolean,\n  onRequestClose: Function,\n  onShow?: Function,\n  animationType?: 'none' | 'slide' | 'fade',\n  transparent?: boolean,\n  children?: any,\n};\n\ntype Props = ModalProps & {\n  layout: { height: number, width: number },\n};\n\ntype State = {\n  visible: Animated.Value,\n  rendered: boolean,\n};\n\nexport default class ModalImplementation extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      visible: new Animated.Value(props.visible ? 1 : 0),\n      rendered: props.visible,\n    };\n  }\n\n  state: State;\n\n  componentDidMount() {\n    BackHandler.addEventListener('hardwareBackPress', this._handleHardwareBack);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.visible !== nextProps.visible) {\n      if (nextProps.animationType === 'none') {\n        this.setState({ rendered: nextProps.visible });\n      } else {\n        if (nextProps.visible) {\n          this.setState(\n            {\n              rendered: true,\n            },\n            () =>\n              Animated.timing(this.state.visible, {\n                toValue: 1,\n                duration: 300,\n                easing: Easing.quad,\n                useNativeDriver: true,\n              }).start(nextProps.onShow)\n          );\n        } else {\n          Animated.timing(this.state.visible, {\n            toValue: 0,\n            duration: 250,\n            easing: Easing.quad,\n            useNativeDriver: true,\n          }).start(finished => {\n            if (finished) {\n              this.setState({\n                rendered: false,\n              });\n            }\n          });\n        }\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener(\n      'hardwareBackPress',\n      this._handleHardwareBack\n    );\n  }\n\n  _handleHardwareBack = () => {\n    if (this.props.onRequestClose && this.props.visible) {\n      this.props.onRequestClose();\n      return true;\n    }\n    return false;\n  };\n\n  render() {\n    const { animationType, transparent, layout } = this.props;\n    const { visible, rendered } = this.state;\n\n    if (!rendered) {\n      return null;\n    }\n\n    const opacity = animationType === 'fade' ? visible : 1;\n    const translate =\n      animationType === 'slide'\n        ? visible.interpolate({\n            inputRange: [0, 1],\n            outputRange: [layout.height, 0],\n          })\n        : 0;\n\n    return (\n      <View style={styles.container} pointerEvents={visible ? 'auto' : 'none'}>\n        {transparent ? null : (\n          <Animated.View\n            style={[styles.backdrop, styles.container, { opacity: visible }]}\n          />\n        )}\n        <Animated.View\n          style={[\n            styles.content,\n            transparent ? null : styles.background,\n            { opacity, transform: [{ translateY: translate }] },\n          ]}>\n          {this.props.children}\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  content: {\n    flex: 1,\n  },\n  background: {\n    backgroundColor: 'white',\n  },\n  backdrop: {\n    backgroundColor: 'rgba(0, 0, 0, .6)',\n  },\n});\n"]}]