["6504065020dbcb3c5fd0e533dab3938748711295","f1d01ed95fd4c861710f209399d7f78d8343144b",["../Asset","regenerator-runtime"],[405,511],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/av/AV.js"],"names":["_DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS","_DEFAULT_INITIAL_PLAYBACK_STATUS","positionMillis","progressUpdateIntervalMillis","shouldPlay","rate","shouldCorrectPitch","volume","isMuted","isLooping","_getAssetFromPlaybackSource","source","asset","fromModule","constructor","name","_getURIFromSource","uri","localUri","_throwErrorIfValuesOutOfBoundsInStatus","status","Error","_getURIAndFullInitialStatusForLoadAsync","initialStatus","downloadFirst","downloadAsync","fullInitialStatus","_getUnloadedStatus","error","isLoaded","_COMMON_AV_PLAYBACK_METHODS","playAsync","setStatusAsync","playFromPositionAsync","pauseAsync","stopAsync","setPositionAsync","setRateAsync","setVolumeAsync","setIsMutedAsync","setIsLoopingAsync","setProgressUpdateIntervalAsync"],"mappings":"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","sourcesContent":["// @flow\n\nimport Asset from '../Asset';\n\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\nexport type PlaybackSource = number | { uri: string } | Asset;\n\nexport type PlaybackStatus =\n  | {\n      isLoaded: false,\n      androidImplementation?: string,\n      error?: string, // populated exactly once when an error forces the object to unload\n    }\n  | {\n      isLoaded: true,\n      androidImplementation?: string,\n\n      uri: string,\n\n      progressUpdateIntervalMillis: number,\n      durationMillis?: number,\n      positionMillis: number,\n      playableDurationMillis?: number,\n\n      shouldPlay: boolean,\n      isPlaying: boolean,\n      isBuffering: boolean,\n\n      rate: number,\n      shouldCorrectPitch: boolean,\n      volume: number,\n      isMuted: boolean,\n      isLooping: boolean,\n\n      didJustFinish: boolean, // true exactly once when the track plays to finish\n    };\n\nexport type PlaybackStatusToSet = {\n  androidImplementation?: string,\n  progressUpdateIntervalMillis?: number,\n  positionMillis?: number,\n  shouldPlay?: boolean,\n  rate?: number,\n  shouldCorrectPitch?: boolean,\n  volume?: number,\n  isMuted?: boolean,\n  isLooping?: boolean,\n};\n\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\nexport const _DEFAULT_INITIAL_PLAYBACK_STATUS: PlaybackStatusToSet = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false,\n};\n\nconst _getAssetFromPlaybackSource = (source: ?PlaybackSource): ?Asset => {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: ?Asset = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if ('constructor' in source && source.constructor.name === 'Asset') {\n    asset = source;\n  }\n  return asset;\n};\n\nexport const _getURIFromSource = (source: ?PlaybackSource): ?string => {\n  let uri: ?string = null;\n  let asset: ?Asset = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n  return uri;\n};\n\nexport const _throwErrorIfValuesOutOfBoundsInStatus = async (\n  status: PlaybackStatusToSet\n) => {\n  if (\n    typeof status.rate === 'number' &&\n    (status.rate < 0.0 || status.rate > 32.0)\n  ) {\n    throw new Error('Rate value must be between 0.0 and 32.0.');\n  }\n  if (\n    typeof status.volume === 'number' &&\n    (status.volume < 0.0 || status.volume > 1.0)\n  ) {\n    throw new Error('Volume value must be between 0.0 and 1.0.');\n  }\n};\n\nexport const _getURIAndFullInitialStatusForLoadAsync = async (\n  source: ?PlaybackSource,\n  initialStatus: ?PlaybackStatusToSet,\n  downloadFirst: boolean\n): Promise<{ uri: string, fullInitialStatus: PlaybackStatusToSet }> => {\n  // Download first if necessary.\n  let asset: ?Asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset != null) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the URI\n  const uri: ?string = _getURIFromSource(source);\n  if (uri == null) {\n    throw new Error('Cannot load null source!');\n  }\n\n  // Get the full initial status\n  const fullInitialStatus: PlaybackStatusToSet =\n    initialStatus == null\n      ? _DEFAULT_INITIAL_PLAYBACK_STATUS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_STATUS,\n          ...initialStatus,\n        };\n  _throwErrorIfValuesOutOfBoundsInStatus(fullInitialStatus);\n\n  return { uri, fullInitialStatus };\n};\n\nexport const _getUnloadedStatus = (error: ?string = null): PlaybackStatus => {\n  const status: Object = { isLoaded: false };\n  if (error) {\n    status.error = error;\n  }\n  return status;\n};\n\n// TODO Unify 8 native calls into 4 by folding out PlayerData and then setting it in the Video component.\nexport const _COMMON_AV_PLAYBACK_METHODS = {\n  // The following are separately defined in each playback object:\n  //   getStatusAsync\n  //   setOnPlaybackStatusUpdate\n  //   loadAsync\n  //   unloadAsync\n  //   setStatusAsync\n\n  async playAsync(): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ shouldPlay: true });\n  },\n  async playFromPositionAsync(positionMillis: number): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ positionMillis, shouldPlay: true });\n  },\n  async pauseAsync(): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ shouldPlay: false });\n  },\n  async stopAsync(): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ positionMillis: 0, shouldPlay: false });\n  },\n  async setPositionAsync(positionMillis: number): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ positionMillis });\n  },\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean\n  ): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ rate, shouldCorrectPitch });\n  },\n  async setVolumeAsync(volume: number): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ volume });\n  },\n  async setIsMutedAsync(isMuted: boolean): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ isMuted });\n  },\n  async setIsLoopingAsync(isLooping: boolean): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ isLooping });\n  },\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<PlaybackStatus> {\n    return this.setStatusAsync({ progressUpdateIntervalMillis });\n  },\n};\n"]}]