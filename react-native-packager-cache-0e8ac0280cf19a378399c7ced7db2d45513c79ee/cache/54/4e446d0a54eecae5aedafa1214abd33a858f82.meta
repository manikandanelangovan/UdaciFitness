["3dbcd3096728f54d423fe9ce07d06da149b3a44e","b194721f59a277b76c48aefcdba0d6d7183029eb",["react-native","react-native/Libraries/Image/AssetRegistry","react-native/Libraries/Image/AssetSourceResolver","react-native/Libraries/Image/resolveAssetSource","./Constants","regenerator-runtime"],[157,204,362,537,700,817],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Asset.js"],"names":["FS","ExponentFileSystem","pickScale","scale","meta","scales","length","get","index","findIndex","s","hash","fileHashes","suffix","name","type","OS","uri","test","httpServerLocation","manifest","xde","bundleUrl","match","replace","Asset","width","height","downloading","downloaded","downloadCallbacks","Promise","resolve","reject","push","localUri","cacheDirectory","exists","md5","getInfoAsync","cache","downloadAsync","Error","forEach","moduleId","moduleIds","all","map","fromModule","m","byModule","getAssetByID","asset","setCustomSourceTransformer","resolver","fromSource"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { NativeModules, PixelRatio, Platform } from 'react-native';\nimport AssetRegistry from 'react-native/Libraries/Image/AssetRegistry';\nimport AssetSourceResolver from 'react-native/Libraries/Image/AssetSourceResolver';\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport Constants from './Constants';\n\nconst FS = NativeModules.ExponentFileSystem;\n\n// Return { uri, hash } for an asset's file, picking the correct scale, based on\n// its React Native metadata. If the asset isn't an image just picks the first\n// file.\nconst pickScale = meta => {\n  // This logic is based on that in AssetSourceResolver.js, we just do it with\n  // our own tweaks for Exponent\n\n  const scale =\n    meta.scales.length > 1\n      ? AssetSourceResolver.pickScale(meta.scales, PixelRatio.get())\n      : 1;\n  const index = meta.scales.findIndex(s => s === scale);\n  const hash = meta.fileHashes[index] || meta.fileHashes[0];\n\n  const suffix =\n    '/' +\n    meta.name +\n    (scale === 1 ? '' : '@' + scale + 'x') +\n    '.' +\n    meta.type +\n    '?platform=' +\n    Platform.OS +\n    '&hash=' +\n    meta.hash;\n\n  // Allow asset processors to directly provide the URL that will be loaded\n  if (meta.uri) {\n    return {\n      uri: meta.uri,\n      hash,\n    };\n  }\n\n  if (/^https?:/.test(meta.httpServerLocation)) {\n    // This is a full URL, so we avoid prepending bundle URL/cloudfront\n    // This usually means Asset is on a different server, and the URL is present in the bundle\n    return {\n      uri: meta.httpServerLocation + suffix,\n      hash,\n    };\n  }\n\n  if (Constants.manifest.xde) {\n    // Development server URI is pieced together\n    return {\n      uri:\n        Constants.manifest.bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] +\n        meta.httpServerLocation.replace(/^\\/?/, '') +\n        suffix,\n      hash,\n    };\n  }\n\n  // CDN URI is based directly on the hash\n  return {\n    uri: 'https://d1wp6m56sqw74a.cloudfront.net/~assets/' + hash,\n    hash,\n  };\n};\n\nexport default class Asset {\n  static byModule = {};\n\n  constructor({ name, type, hash, uri, width, height }) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    this.downloading = false;\n    this.downloaded = false;\n    this.downloadCallbacks = [];\n  }\n\n  static loadAsync(moduleId) {\n    let moduleIds = typeof moduleId === 'number' ? [moduleId] : moduleId;\n    return Promise.all(moduleIds.map(m => Asset.fromModule(m).downloadAsync()));\n  }\n\n  static fromModule(moduleId) {\n    if (Asset.byModule[moduleId]) {\n      return Asset.byModule[moduleId];\n    }\n\n    // TODO(nikki): Make React Native's AssetRegistry save moduleId so we don't\n    //              have to do this here.\n    const meta = AssetRegistry.getAssetByID(moduleId);\n    meta.moduleId = moduleId;\n    const { uri, hash } = pickScale(meta);\n\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byModule[moduleId] = asset;\n    return asset;\n  }\n\n  async downloadAsync() {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) =>\n        this.downloadCallbacks.push({ resolve, reject })\n      );\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      const localUri = `${FS.cacheDirectory}ExponentAsset-${this.hash}.${this\n        .type}`;\n      let exists, md5;\n      ({ exists, md5 } = await FS.getInfoAsync(localUri, {\n        cache: true,\n        md5: true,\n      }));\n      if (!exists || md5 !== this.hash) {\n        ({ md5 } = await FS.downloadAsync(this.uri, localUri, {\n          cache: true,\n          md5: true,\n        }));\n        if (md5 !== this.hash) {\n          throw new Error(\n            `Downloaded file for asset '${this.name}.${this.type}' ` +\n              `Located at ${this.uri} ` +\n              `failed MD5 integrity check`\n          );\n        }\n      }\n      this.localUri = localUri;\n      this.downloaded = true;\n      this.downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this.downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this.downloadCallbacks = [];\n    }\n  }\n}\n\n// Override React Native's asset resolution for `Image` components\nresolveAssetSource.setCustomSourceTransformer(resolver => {\n  if (!resolver.asset.moduleId) {\n    return resolver.fromSource(pickScale(resolver.asset).uri);\n  }\n  const asset = Asset.fromModule(resolver.asset.moduleId);\n  return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);\n});\n"]}]