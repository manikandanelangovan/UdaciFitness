["338068e3a7968f2e00a98ce5ea9e2ea07a926f9f","517dcc589b7dea0695cf24e93ab098261db2b687",["Platform","TVEventHandler"],[40,82],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Utilities/BackHandler.ios.js"],"names":["Platform","require","TVEventHandler","emptyFunction","BackHandler","isTVOS","_tvEventHandler","_backPressSubscriptions","Set","enable","cmp","evt","eventType","backPressSubscriptions","invokeDefault","subscriptions","reverse","i","length","exitApp","addEventListener","eventName","handler","add","remove","removeEventListener","delete","module","exports"],"mappings":";;AAcA;;AAEA,IAAMA,WAAWC,OAAX,YAAN;AACA,IAAMC,iBAAiBD,OAAjB,kBAAN;;AAMA,SAASE,aAAT,GAAyB,CAAE;;AAgC3B,IAAIC,oBAAJ;;AAEA,IAAIJ,SAASK,MAAb,EAAqB;AACnB,MAAMC,kBAAkB,IAAIJ,cAAJ,EAAxB;AACA,MAAIK,0BAA0B,IAAIC,GAAJ,EAA9B;;AAEAF,kBAAgBG,MAAhB,CAAuB,IAAvB,EAA6B,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC9C,QAAIA,OAAOA,IAAIC,SAAJ,KAAkB,MAA7B,EAAqC;AACnC,UAAIC,yBAAyB,IAAIL,GAAJ,CAAQD,uBAAR,CAA7B;AACA,UAAIO,gBAAgB,IAApB;AACA,UAAIC,gBAAgB,yCAAIF,sBAAJ,GAA4BG,OAA5B,EAApB;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,cAAcG,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,YAAIF,cAAcE,CAAd,GAAJ,EAAwB;AACtBH,0BAAgB,KAAhB;AACA;AACD;AACF;;AAED,UAAIA,aAAJ,EAAmB;AACjBV,oBAAYe,OAAZ;AACD;AACF;AACF,GAhBD;;AAkBAf,gBAAc;AACZe,aAAShB,aADG;;AAGZiB,sBAAkB,0BAChBC,SADgB,EAEhBC,OAFgB,EAGM;AACtBf,8BAAwBgB,GAAxB,CAA4BD,OAA5B;AACA,aAAO;AACLE,gBAAQ;AAAA,iBAAMpB,YAAYqB,mBAAZ,CAAgCJ,SAAhC,EAA2CC,OAA3C,CAAN;AAAA;AADH,OAAP;AAGD,KAXW;;AAaZG,yBAAqB,6BACnBJ,SADmB,EAEnBC,OAFmB,EAGb;AACNf,8BAAwBmB,MAAxB,CAA+BJ,OAA/B;AACD;;AAlBW,GAAd;AAsBD,CA5CD,MA4CO;;AAELlB,gBAAc;AACZe,aAAShB,aADG;AAEZiB,oBAFY,8BAEO;AACjB,aAAO;AACLI,gBAAQrB;AADH,OAAP;AAGD,KANW;;AAOZsB,yBAAqBtB;AAPT,GAAd;AAUD;;AAEDwB,OAAOC,OAAP,GAAiBxB,WAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * On Apple TV, this implements back navigation using the TV remote's menu button.\n * On iOS, this just implements a stub.\n *\n * @providesModule BackHandler\n */\n\n'use strict';\n\nconst Platform = require('Platform');\nconst TVEventHandler = require('TVEventHandler');\n\ntype BackPressEventName = $Enum<{\n  backPress: string,\n}>;\n\nfunction emptyFunction() {}\n\n/**\n * Detect hardware button presses for back navigation.\n *\n * Android: Detect hardware back button presses, and programmatically invoke the default back button\n * functionality to exit the app if there are no listeners or if none of the listeners return true.\n *\n * tvOS: Detect presses of the menu button on the TV remote.  (Still to be implemented:\n * programmatically disable menu button handling\n * functionality to exit the app if there are no listeners or if none of the listeners return true.)\n *\n * iOS: Not applicable.\n *\n * The event subscriptions are called in reverse order (i.e. last registered subscription first),\n * and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * Example:\n *\n * ```javascript\n * BackHandler.addEventListener('hardwareBackPress', function() {\n *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n *  // Typically you would use the navigator here to go to the last state.\n *\n *  if (!this.onMainScreen()) {\n *    this.goBack();\n *    return true;\n *  }\n *  return false;\n * });\n * ```\n */\nlet BackHandler;\n\nif (Platform.isTVOS) {\n  const _tvEventHandler = new TVEventHandler();\n  var _backPressSubscriptions = new Set();\n\n  _tvEventHandler.enable(this, function(cmp, evt) {\n    if (evt && evt.eventType === 'menu') {\n      var backPressSubscriptions = new Set(_backPressSubscriptions);\n      var invokeDefault = true;\n      var subscriptions = [...backPressSubscriptions].reverse();\n      for (var i = 0; i < subscriptions.length; ++i) {\n        if (subscriptions[i]()) {\n          invokeDefault = false;\n          break;\n        }\n      }\n\n      if (invokeDefault) {\n        BackHandler.exitApp();\n      }\n    }\n  });\n\n  BackHandler = {\n    exitApp: emptyFunction,\n\n    addEventListener: function (\n      eventName: BackPressEventName,\n      handler: Function\n    ): {remove: () => void} {\n      _backPressSubscriptions.add(handler);\n      return {\n        remove: () => BackHandler.removeEventListener(eventName, handler),\n      };\n    },\n\n    removeEventListener: function(\n      eventName: BackPressEventName,\n      handler: Function\n    ): void {\n      _backPressSubscriptions.delete(handler);\n    },\n\n  };\n\n} else {\n\n  BackHandler = {\n    exitApp: emptyFunction,\n    addEventListener() {\n      return {\n        remove: emptyFunction,\n      };\n    },\n    removeEventListener: emptyFunction,\n  };\n\n}\n\nmodule.exports = BackHandler;\n"]}]