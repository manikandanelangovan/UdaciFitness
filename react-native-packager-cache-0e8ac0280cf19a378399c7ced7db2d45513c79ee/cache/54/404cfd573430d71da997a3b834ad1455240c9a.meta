["4556d04e0e51151189dd9defa116138ab185b27d","e11a59e52f949a686f57f42f20dce0f6d5f3f512",["NativeMethodsMixin","React","prop-types","StyleSheet","View","ViewPropTypes","create-react-class","requireNativeComponent"],[49,92,126,166,200,237,287,347],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js"],"names":["NativeMethodsMixin","require","React","PropTypes","StyleSheet","View","ViewPropTypes","createReactClass","requireNativeComponent","DatePickerIOS","displayName","_picker","undefined","mixins","propTypes","date","instanceOf","Date","isRequired","onDateChange","func","maximumDate","minimumDate","mode","oneOf","minuteInterval","timeZoneOffsetInMinutes","number","getDefaultProps","_onChange","event","nativeTimeStamp","nativeEvent","timestamp","props","onChange","propsTimeStamp","getTime","setNativeProps","render","style","picker","styles","datePickerIOS","create","height","RCTDatePickerIOS","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DatePickerIOS\n * @flow\n *\n * This is a controlled component version of RCTDatePickerIOS\n */\n'use strict';\n\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst requireNativeComponent = require('requireNativeComponent');\n\ntype DefaultProps = {\n  mode: 'date' | 'time' | 'datetime',\n};\n\ntype Event = Object;\n\n/**\n * Use `DatePickerIOS` to render a date/time picker (selector) on iOS.  This is\n * a controlled component, so you must hook in to the `onDateChange` callback\n * and update the `date` prop in order for the component to update, otherwise\n * the user's change will be reverted immediately to reflect `props.date` as the\n * source of truth.\n */\n// $FlowFixMe(>=0.41.0)\nconst DatePickerIOS = createReactClass({\n  displayName: 'DatePickerIOS',\n  // TOOD: Put a better type for _picker\n  _picker: (undefined: ?$FlowFixMe),\n\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * The currently selected date.\n     */\n    date: PropTypes.instanceOf(Date).isRequired,\n\n    /**\n     * Date change handler.\n     *\n     * This is called when the user changes the date or time in the UI.\n     * The first and only argument is a Date object representing the new\n     * date and time.\n     */\n    onDateChange: PropTypes.func.isRequired,\n\n    /**\n     * Maximum date.\n     *\n     * Restricts the range of possible date/time values.\n     */\n    maximumDate: PropTypes.instanceOf(Date),\n\n    /**\n     * Minimum date.\n     *\n     * Restricts the range of possible date/time values.\n     */\n    minimumDate: PropTypes.instanceOf(Date),\n\n    /**\n     * The date picker mode.\n     */\n    mode: PropTypes.oneOf(['date', 'time', 'datetime']),\n\n    /**\n     * The interval at which minutes can be selected.\n     */\n    minuteInterval: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]),\n\n    /**\n     * Timezone offset in minutes.\n     *\n     * By default, the date picker will use the device's timezone. With this\n     * parameter, it is possible to force a certain timezone offset. For\n     * instance, to show times in Pacific Standard Time, pass -7 * 60.\n     */\n    timeZoneOffsetInMinutes: PropTypes.number,\n  },\n\n  getDefaultProps: function(): DefaultProps {\n    return {\n      mode: 'datetime',\n    };\n  },\n\n  _onChange: function(event: Event) {\n    const nativeTimeStamp = event.nativeEvent.timestamp;\n    this.props.onDateChange && this.props.onDateChange(\n      new Date(nativeTimeStamp)\n    );\n    // $FlowFixMe(>=0.41.0)\n    this.props.onChange && this.props.onChange(event);\n\n    // We expect the onChange* handlers to be in charge of updating our `date`\n    // prop. That way they can also disallow/undo/mutate the selection of\n    // certain values. In other words, the embedder of this component should\n    // be the source of truth, not the native component.\n    const propsTimeStamp = this.props.date.getTime();\n    if (this._picker && nativeTimeStamp !== propsTimeStamp) {\n      this._picker.setNativeProps({\n        date: propsTimeStamp,\n      });\n    }\n  },\n\n  render: function() {\n    const props = this.props;\n    return (\n      <View style={props.style}>\n        <RCTDatePickerIOS\n          ref={ picker => { this._picker = picker; } }\n          style={styles.datePickerIOS}\n          date={props.date.getTime()}\n          maximumDate={\n            props.maximumDate ? props.maximumDate.getTime() : undefined\n          }\n          minimumDate={\n            props.minimumDate ? props.minimumDate.getTime() : undefined\n          }\n          mode={props.mode}\n          minuteInterval={props.minuteInterval}\n          timeZoneOffsetInMinutes={props.timeZoneOffsetInMinutes}\n          onChange={this._onChange}\n          onStartShouldSetResponder={() => true}\n          onResponderTerminationRequest={() => false}\n        />\n      </View>\n    );\n  }\n});\n\nconst styles = StyleSheet.create({\n  datePickerIOS: {\n    height: 216,\n  },\n});\n\nconst RCTDatePickerIOS = requireNativeComponent('RCTDatePicker', {\n  propTypes: {\n    ...DatePickerIOS.propTypes,\n    date: PropTypes.number,\n    minimumDate: PropTypes.number,\n    maximumDate: PropTypes.number,\n    onDateChange: () => null,\n    onChange: PropTypes.func,\n  }\n});\n\nmodule.exports = DatePickerIOS;\n"]}]