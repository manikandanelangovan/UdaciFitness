["68cbf218894458dc7aaf403b8bb63be48c7ff82a","54249715821e46b7f38cbb6025698d629392425a",["lodash/isEqual","lodash/pick","react","prop-types","./react-native"],[138,241,336,431,541],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/@expo/vector-icons/vendor/react-native-vector-icons/lib/toolbar-android.js"],"names":["createToolbarAndroidComponent","IconNamePropType","getImageSource","updateIconSources","props","nextProps","keys","Object","IconToolbarAndroid","propTypes","stateToEvict","logoName","logo","undefined","navIconName","navIcon","overflowIconName","overflowIcon","state","length","setState","size","iconSize","color","iconColor","titleColor","then","Promise","all","actions","map","action","iconName","icon","resolve","arrayOf","shape","title","string","isRequired","number","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends Component {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.string,\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.string,\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    componentWillMount() {\n      this.updateIconSources(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const keys = Object.keys(IconToolbarAndroid.propTypes);\n      if (!isEqual(pick(nextProps, keys), pick(this.props, keys))) {\n        const stateToEvict = {};\n        if (!nextProps.logoName) {\n          stateToEvict.logo = undefined;\n        }\n        if (!nextProps.navIconName) {\n          stateToEvict.navIcon = undefined;\n        }\n        if (!nextProps.overflowIconName) {\n          stateToEvict.overflowIcon = undefined;\n        }\n        if (this.state && Object.keys(stateToEvict).length) {\n          this.setState(stateToEvict, () => this.updateIconSources(nextProps));\n        } else {\n          this.updateIconSources(nextProps);\n        }\n      }\n    }\n\n    updateIconSources(props) {\n      const size = props.iconSize;\n      const color = props.iconColor || props.titleColor;\n      if (props.logoName) {\n        getImageSource(props.logoName, size, color).then(logo =>\n          this.setState({ logo })\n        );\n      }\n      if (props.navIconName) {\n        getImageSource(props.navIconName, size, color).then(navIcon =>\n          this.setState({ navIcon })\n        );\n      }\n      if (props.overflowIconName) {\n        getImageSource(props.overflowIconName, size, color).then(overflowIcon =>\n          this.setState({ overflowIcon })\n        );\n      }\n\n      Promise.all(\n        (props.actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || size,\n              action.iconColor || color\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      ).then(actions => this.setState({ actions }));\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]}]