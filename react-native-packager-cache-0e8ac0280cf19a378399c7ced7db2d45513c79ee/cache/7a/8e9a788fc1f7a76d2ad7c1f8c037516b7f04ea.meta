["b18b9dea951d9d7fe5e9924d5fc285b8612c55f4","faee1ac727f045d53d275c32a212b043e1a2fdee",["MetroListView","React","View","VirtualizedList","fbjs/lib/invariant"],[65,103,132,171,216],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Lists/FlatList.js"],"names":["MetroListView","require","React","View","VirtualizedList","invariant","defaultProps","numColumns","FlatList","_hasWarnedLegacy","_captureRef","_listRef","ref","_getItem","data","index","props","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","keyExtractor","Array","isArray","map","it","join","_onViewableItemsChanged","onViewableItemsChanged","changed","viewableItems","info","forEach","_pushMultiColumnViewable","v","_renderItem","renderItem","columnWrapperStyle","flexDirection","element","separators","cloneElement","key","params","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollableNode","setNativeProps","_checkProps","nextProps","getItem","getItemCount","horizontal","legacyImplementation","console","warn","arr","ii","PureComponent","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FlatList\n * @flow\n * @format\n */\n'use strict';\n\nconst MetroListView = require('MetroListView'); // Used as a fallback legacy option\nconst React = require('React');\nconst View = require('View');\nconst VirtualizedList = require('VirtualizedList');\n\nconst invariant = require('fbjs/lib/invariant');\n\nimport type {StyleObj} from 'StyleSheetTypes';\nimport type {ViewabilityConfig, ViewToken} from 'ViewabilityHelper';\nimport type {Props as VirtualizedListProps} from 'VirtualizedList';\n\ntype RequiredProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem: (info: {\n    item: ItemT,\n    index: number,\n    separators: {\n      highlight: () => void,\n      unhighlight: () => void,\n      updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n    },\n  }) => ?React.Element<any>,\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: StyleObj,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  legacyImplementation?: ?boolean,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n};\ntype Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n};\ntype DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the inner `SomeOtherWidget` has no such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         return (\n *           <SomeOtherWidget\n *             {...this.props}\n *             onPress={this._onPress}\n *           />\n *         )\n *       }\n *     }\n *\n *     class MyList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherets [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    this._listRef.scrollToEnd(params);\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    this._listRef.scrollToIndex(params);\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    this._listRef.scrollToItem(params);\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    this._listRef.scrollToOffset(params);\n  }\n\n  /**\n   * Tells the list an interaction has occured, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    this._listRef.recordInteraction();\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    this._listRef.flashScrollIndicators();\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: Object) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  componentWillMount() {\n    this._checkProps(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props<ItemT>) {\n    invariant(\n      nextProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    this._checkProps(nextProps);\n  }\n\n  _hasWarnedLegacy = false;\n  _listRef: VirtualizedList;\n\n  _captureRef = ref => {\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      legacyImplementation,\n      numColumns,\n      columnWrapperStyle,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    if (legacyImplementation) {\n      invariant(\n        numColumns === 1,\n        'Legacy list does not support multiple columns.',\n      );\n      // Warning: may not have full feature parity and is meant more for debugging and performance\n      // comparison.\n      if (!this._hasWarnedLegacy) {\n        console.warn(\n          'FlatList: Using legacyImplementation - some features not supported and performance ' +\n            'may suffer',\n        );\n        this._hasWarnedLegacy = true;\n      }\n    }\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        item && ret.push(item);\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _onViewableItemsChanged = info => {\n    const {numColumns, onViewableItemsChanged} = this.props;\n    if (!onViewableItemsChanged) {\n      return;\n    }\n    if (numColumns > 1) {\n      const changed = [];\n      const viewableItems = [];\n      info.viewableItems.forEach(v =>\n        this._pushMultiColumnViewable(viewableItems, v),\n      );\n      info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n      onViewableItemsChanged({viewableItems, changed});\n    } else {\n      onViewableItemsChanged(info);\n    }\n  };\n\n  _renderItem = (info: Object) => {\n    const {renderItem, numColumns, columnWrapperStyle} = this.props;\n    if (numColumns > 1) {\n      const {item, index} = info;\n      invariant(\n        Array.isArray(item),\n        'Expected array of items with numColumns > 1',\n      );\n      return (\n        <View style={[{flexDirection: 'row'}, columnWrapperStyle]}>\n          {item.map((it, kk) => {\n            const element = renderItem({\n              item: it,\n              index: index * numColumns + kk,\n              separators: info.separators,\n            });\n            return element && React.cloneElement(element, {key: kk});\n          })}\n        </View>\n      );\n    } else {\n      return renderItem(info);\n    }\n  };\n\n  render() {\n    if (this.props.legacyImplementation) {\n      return (\n        <MetroListView\n          {...this.props}\n          items={this.props.data}\n          ref={this._captureRef}\n        />\n      );\n    } else {\n      return (\n        <VirtualizedList\n          {...this.props}\n          renderItem={this._renderItem}\n          getItem={this._getItem}\n          getItemCount={this._getItemCount}\n          keyExtractor={this._keyExtractor}\n          ref={this._captureRef}\n          onViewableItemsChanged={\n            this.props.onViewableItemsChanged && this._onViewableItemsChanged\n          }\n        />\n      );\n    }\n  }\n}\n\nmodule.exports = FlatList;\n"]}]