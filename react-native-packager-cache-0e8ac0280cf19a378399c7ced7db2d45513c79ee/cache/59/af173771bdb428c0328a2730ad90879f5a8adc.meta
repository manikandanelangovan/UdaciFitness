["d68211cc1acbdd38518430e28f45b914359f9406","3baf24dab9cad1d92559eac5f3b945964436df3f",["prop-types","react","react-native","./decorateMapComponent"],[25,129,226,280],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-maps/lib/components/MapCircle.js"],"names":["propTypes","center","shape","latitude","number","isRequired","longitude","radius","onPress","func","strokeWidth","strokeColor","string","fillColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","lineDashPhase","lineDashPattern","arrayOf","defaultProps","MapCircle","props","circle","setNativeProps","AIRMapCircle","getAirComponent","ref","Component","module","exports","componentType","providers","google","ios","android"],"mappings":"AAAA;;;;AACA;;;;AACA;;AAGA;;;;AAKA,IAAMA;AAMJC,UAAQ,oBAAUC,KAAV,CAAgB;AAItBC,cAAU,oBAAUC,MAAV,CAAiBC,UAJL;AAKtBC,eAAW,oBAAUF,MAAV,CAAiBC;AALN,GAAhB,EAMLA,UAZC;;AAiBJE,UAAQ,oBAAUH,MAAV,CAAiBC,UAjBrB;;AAsBJG,WAAS,oBAAUC,IAtBf;;AA2BJC,eAAa,oBAAUN,MA3BnB;;AAgCJO,eAAa,oBAAUC,MAhCnB;;AAqCJC,aAAW,oBAAUD,MArCjB;;AA8CJE,UAAQ,oBAAUV,MA9Cd;;AAsDJW,WAAS,oBAAUC,KAAV,CAAgB,CACvB,MADuB,EAEvB,OAFuB,EAGvB,QAHuB,CAAhB,CAtDL;;AAkEJC,YAAU,oBAAUD,KAAV,CAAgB,CACxB,OADwB,EAExB,OAFwB,EAGxB,OAHwB,CAAhB,CAlEN;;AAkFJE,cAAY,oBAAUd,MAlFlB;;AA+FJe,iBAAe,oBAAUf,MA/FrB;;AA6GJgB,mBAAiB,oBAAUC,OAAV,CAAkB,oBAAUjB,MAA5B;AA7Gb,EAAN;;AAgHA,IAAMkB,eAAe;AACnBX,eAAa,MADM;AAEnBD,eAAa;AAFM,CAArB;;IAKMa,S;;;;;;;;;;mCACWC,K,EAAO;AACpB,WAAKC,MAAL,CAAYC,cAAZ,CAA2BF,KAA3B;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,eAAe,KAAKC,eAAL,EAArB;AACA,aACE,8BAAC,YAAD,2BAAkB,KAAKJ,KAAvB,IAA8B,KAAK,mBAAO;AAAE,iBAAKC,MAAL,GAAcI,IAAd;AAAoB,SAAhE,IADF;AAGD;;;EAVqB,gBAAMC,S;;AAa9BP,UAAUvB,SAAV,GAAsBA,SAAtB;AACAuB,UAAUD,YAAV,GAAyBA,YAAzB;;AAEAS,OAAOC,OAAP,GAAiB,oCAAqBT,SAArB,EAAgC;AAC/CU,iBAAe,QADgC;AAE/CC,aAAW;AACTC,YAAQ;AACNC,0CADM;AAENC;AAFM;AADC;AAFoC,CAAhC,CAAjB","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ViewPropTypes,\n} from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\nconst propTypes = {\n  ...ViewPropTypes,\n\n  /**\n   * The coordinate of the center of the circle\n   */\n  center: PropTypes.shape({\n    /**\n     * Coordinates for the center of the circle.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The radius of the circle to be drawn (in meters)\n   */\n  radius: PropTypes.number.isRequired,\n\n  /**\n   * Callback that is called when the user presses on the circle\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: PropTypes.string,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: PropTypes.string,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf([\n    'butt',\n    'round',\n    'square',\n  ]),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf([\n    'miter',\n    'round',\n    'bevel',\n  ]),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapCircle extends React.Component {\n  setNativeProps(props) {\n    this.circle.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapCircle = this.getAirComponent();\n    return (\n      <AIRMapCircle {...this.props} ref={ref => { this.circle = ref; }} />\n    );\n  }\n}\n\nMapCircle.propTypes = propTypes;\nMapCircle.defaultProps = defaultProps;\n\nmodule.exports = decorateMapComponent(MapCircle, {\n  componentType: 'Circle',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}]