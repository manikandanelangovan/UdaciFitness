["485729df32889880017931a77fa02533222626bb","f32ccbdcac432b2a23904045ac9dd7ab45984743",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/dedent/dist/dedent.js"],"names":["dedent","strings","raw","undefined","result","_len","arguments","length","values","Array","_key","i","replace","trim","lines","split","mindent","forEach","l","m","match","indent","Math","min","map","slice","join","module","exports"],"mappings":"AAAA;;AAEA,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;;AAEvB,MAAIC,MAAMC,SAAV;AACA,MAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiC;AAE/BC,UAAM,CAACD,OAAD,CAAN;AACD,GAHD,MAGO;AACLC,UAAMD,QAAQC,GAAd;AACD;;AAGD,MAAIE,SAAS,EAAb;;AAEA,OAAK,IAAIC,OAAOC,UAAUC,MAArB,EAA6BC,SAASC,MAAMJ,OAAO,CAAP,GAAWA,OAAO,CAAlB,GAAsB,CAA5B,CAAtC,EAAsEK,OAAO,CAAlF,EAAqFA,OAAOL,IAA5F,EAAkGK,MAAlG,EAA0G;AACxGF,WAAOE,OAAO,CAAd,IAAmBJ,UAAUI,IAAV,CAAnB;AACD;;AAED,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIT,IAAIK,MAAxB,EAAgCI,GAAhC,EAAqC;AACnCP,cAAUF,IAAIS,CAAJ,EAEVC,OAFU,CAEF,aAFE,EAEa,EAFb,EAKVA,OALU,CAKF,MALE,EAKM,GALN,CAAV;;AAOA,QAAID,IAAIH,OAAOD,MAAf,EAAuB;AACrBH,gBAAUI,OAAOG,CAAP,CAAV;AACD;AACF;;AAGDP,WAASA,OAAOS,IAAP,EAAT;;AAGA,MAAIC,QAAQV,OAAOW,KAAP,CAAa,IAAb,CAAZ;AACA,MAAIC,UAAU,IAAd;AACAF,QAAMG,OAAN,CAAc,UAAUC,CAAV,EAAa;AACzB,QAAIC,IAAID,EAAEE,KAAF,CAAQ,KAAR,CAAR;AACA,QAAID,CAAJ,EAAO;AACL,UAAIE,SAASF,EAAE,CAAF,EAAKZ,MAAlB;AACA,UAAI,CAACS,OAAL,EAAc;AAEZA,kBAAUK,MAAV;AACD,OAHD,MAGO;AACLL,kBAAUM,KAAKC,GAAL,CAASP,OAAT,EAAkBK,MAAlB,CAAV;AACD;AACF;AACF,GAXD;;AAaA,MAAIL,YAAY,IAAhB,EAAsB;AACpBZ,aAASU,MAAMU,GAAN,CAAU,UAAUN,CAAV,EAAa;AAC9B,aAAOA,EAAE,CAAF,MAAS,GAAT,GAAeA,EAAEO,KAAF,CAAQT,OAAR,CAAf,GAAkCE,CAAzC;AACD,KAFQ,EAENQ,IAFM,CAED,IAFC,CAAT;AAGD;;AAGD,SAAOtB,OAAOQ,OAAP,CAAe,MAAf,EAAuB,IAAvB,CAAP;AACD;;AAED,IAAI,OAAOe,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,SAAOC,OAAP,GAAiB5B,MAAjB;AACD","sourcesContent":["\"use strict\";\n\nfunction dedent(strings) {\n\n  var raw = undefined;\n  if (typeof strings === \"string\") {\n    // dedent can be used as a plain function\n    raw = [strings];\n  } else {\n    raw = strings.raw;\n  }\n\n  // first, perform interpolation\n  var result = \"\";\n\n  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  for (var i = 0; i < raw.length; i++) {\n    result += raw[i].\n    // join lines when there is a suppressed newline\n    replace(/\\\\\\n[ \\t]*/g, \"\").\n\n    // handle escaped backticks\n    replace(/\\\\`/g, \"`\");\n\n    if (i < values.length) {\n      result += values[i];\n    }\n  }\n\n  // dedent eats leading and trailing whitespace too\n  result = result.trim();\n\n  // now strip indentation\n  var lines = result.split(\"\\n\");\n  var mindent = null;\n  lines.forEach(function (l) {\n    var m = l.match(/^ +/);\n    if (m) {\n      var indent = m[0].length;\n      if (!mindent) {\n        // this is the first indented line\n        mindent = indent;\n      } else {\n        mindent = Math.min(mindent, indent);\n      }\n    }\n  });\n\n  if (mindent !== null) {\n    result = lines.map(function (l) {\n      return l[0] === \" \" ? l.slice(mindent) : l;\n    }).join(\"\\n\");\n  }\n\n  // handle escaped newlines at the end to ensure they don't get stripped too\n  return result.replace(/\\\\n/g, \"\\n\");\n}\n\nif (typeof module !== \"undefined\") {\n  module.exports = dedent;\n}"]}]