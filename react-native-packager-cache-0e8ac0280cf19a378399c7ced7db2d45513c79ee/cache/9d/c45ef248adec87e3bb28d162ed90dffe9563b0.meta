["4bb6335378f39f81967ce310cd2f9e9c53c463f2","97ed94e5d4feb4dda0d4391682c6bb17a7e86a7d",["react-native","expo","qs","regenerator-runtime"],[93,131,159,253],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/AuthSession.js"],"names":["BASE_URL","_authLock","startAsync","options","returnUrl","getDefaultReturnUrl","authUrl","startUrl","getStartUrl","Error","__DEV__","console","warn","type","result","_openWebBrowserAsync","url","parseUrl","params","errorCode","dismiss","dismissAuthSession","openAuthSessionAsync","queryString","stringify","getRedirectUrl","redirectUrl","manifest","id","_warnIfAnonymous","OS","appOwnership","linkingUrl","parts","split","hash","partsWithoutHash","length","parsedSearch","parse","parsedHash","startsWith","getRedirectUri"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport { Platform } from 'react-native';\nimport { Constants, WebBrowser } from 'expo';\nimport qs from 'qs';\n\ntype AuthSessionOptions = {\n  authUrl: string,\n  returnUrl?: string,\n};\n\ntype AuthSessionResult =\n  | { type: 'cancel' | 'dismissed' | 'locked' }\n  | {\n      type: 'error' | 'success',\n      errorCode: ?string,\n      params: Object,\n      url: string,\n    };\n\nconst BASE_URL = `https://auth.expo.io`;\nlet _authLock = false;\n\nasync function startAsync(\n  options: AuthSessionOptions\n): Promise<AuthSessionResult> {\n  const returnUrl = options.returnUrl || getDefaultReturnUrl();\n  const authUrl = options.authUrl;\n  const startUrl = getStartUrl(authUrl, returnUrl);\n\n  // Prevent accidentally starting to an empty url\n  if (!authUrl) {\n    throw new Error(\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n  }\n\n  // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n  // support it this makes the behavior predictable.\n  if (_authLock) {\n    if (__DEV__) {\n      console.warn(\n        'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time'\n      );\n    }\n\n    return { type: 'locked' };\n  }\n\n  // About to start session, set lock\n  _authLock = true;\n\n  let result;\n  try {\n    result = await _openWebBrowserAsync(startUrl, returnUrl);\n  } catch (e) {\n    _authLock = false;\n    throw e;\n  }\n\n  // WebBrowser session complete, unset lock\n  _authLock = false;\n\n  // Handle failures\n  if (!result) {\n    throw new Error('Unexpected AuthSession result');\n  }\n  if (!result.url) {\n    if (result.type) {\n      return result;\n    } else {\n      throw new Error('Unexpected AuthSession result');\n    }\n  }\n\n  let { params, errorCode } = parseUrl(result.url);\n\n  return {\n    type: errorCode ? 'error' : 'success',\n    params,\n    errorCode,\n    url: result.url,\n  };\n}\n\nfunction dismiss() {\n  WebBrowser.dismissAuthSession();\n}\n\nasync function _openWebBrowserAsync(startUrl, returnUrl) {\n  let result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl);\n  if (result.type === 'cancel' || result.type === 'dismissed') {\n    return { type: result.type };\n  }\n\n  return result;\n}\n\nfunction getStartUrl(authUrl: string, returnUrl: string): string {\n  let queryString = qs.stringify({\n    authUrl,\n    returnUrl,\n  });\n\n  return `${getRedirectUrl()}/start?${queryString}`;\n}\n\nfunction getRedirectUrl(): string {\n  const redirectUrl = `${BASE_URL}/${Constants.manifest.id}`;\n  if (__DEV__) {\n    _warnIfAnonymous(Constants.manifest.id, redirectUrl);\n  }\n  return redirectUrl;\n}\n\nfunction getDefaultReturnUrl(): string {\n  // TODO: remove this when we make Constants.linkingUrl consistent everywhere\n  if (Platform.OS === 'android' && Constants.appOwnership === 'standalone') {\n    return `${Constants.linkingUrl}+expo-auth-session`;\n  } else {\n    return `${Constants.linkingUrl}expo-auth-session`;\n  }\n}\n\nfunction parseUrl(url: string): { errorCode: ?string, params: Object } {\n  let parts = url.split('#');\n  let hash = parts[1];\n  let partsWithoutHash = parts[0].split('?');\n  let queryString = partsWithoutHash[partsWithoutHash.length - 1];\n\n  // Get query string (?hello=world)\n  let parsedSearch = qs.parse(queryString);\n\n  // Pull errorCode off of params\n  let { errorCode } = parsedSearch;\n  delete parsedSearch.errorCode;\n\n  // Get hash (#abc=example)\n  let parsedHash = {};\n  if (parts[1]) {\n    parsedHash = qs.parse(hash);\n  }\n\n  // Merge search and hash\n  let params = {\n    ...parsedSearch,\n    ...parsedHash,\n  };\n\n  return {\n    errorCode,\n    params,\n  };\n}\n\nfunction _warnIfAnonymous(id, url): void {\n  if (id.startsWith('@anonymous/')) {\n    console.warn(\n      `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires whitelisting redirect URLs, we recommend that you do not whitelist this URL -- instead, you should sign in to Expo to acquired a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n    );\n  }\n}\n\nexport default {\n  dismiss,\n  getRedirectUrl,\n  getStartUrl,\n  getDefaultReturnUrl,\n  get getRedirectUri() {\n    console.warn(\n      'Use AuthSession.getRedirectUrl rather than AuthSession.getRedirectUri (Url instead of Uri)'\n    );\n    return getRedirectUrl;\n  },\n  startAsync,\n};\n"]}]