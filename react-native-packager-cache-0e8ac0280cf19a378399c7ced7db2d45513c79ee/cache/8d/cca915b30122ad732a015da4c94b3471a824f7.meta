["8f555fc2f2c494a8de715801843978a24051f5e2","9638d4004082762539f75779f22d99d5f6004246",["./_baseIsEqual"],[26],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/lodash/isEqual.js"],"names":["baseIsEqual","require","isEqual","value","other","module","exports"],"mappings":"AAAA,IAAIA,cAAcC,QAAQ,gBAAR,CAAlB;;AA8BA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAC7B,SAAOJ,YAAYG,KAAZ,EAAmBC,KAAnB,CAAP;AACD;;AAEDC,OAAOC,OAAP,GAAiBJ,OAAjB","sourcesContent":["var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n"]}]