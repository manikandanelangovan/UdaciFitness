["ca3d67a7a98a07e6c2653061eba712b8c3441e93","e7944e452da54d0fb7a0695106fc64ab09ebc270",["BatchedBridge","BugReporting","NativeModules","ReactNative","SceneTracker","infoLog","fbjs/lib/invariant","renderApplication"],[44,89,134,178,221,261,297,352],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/ReactNative/AppRegistry.js"],"names":["BatchedBridge","require","BugReporting","NativeModules","ReactNative","SceneTracker","infoLog","invariant","renderApplication","runnables","runCount","sections","tasks","Map","componentProviderInstrumentationHook","component","wrapperComponentProvider","AppRegistry","setWrapperComponentProvider","provider","registerConfig","config","forEach","appConfig","run","registerRunnable","appKey","registerComponent","section","componentProvider","appParameters","initialProps","rootTag","registerSection","getAppKeys","Object","keys","getSectionKeys","getSections","getRunnable","getRegistry","setComponentProviderInstrumentationHook","hook","runApplication","msg","JSON","stringify","String","__DEV__","addSource","setActiveScene","name","unmountApplicationComponentAtRootTag","unmountComponentAtNodeAndRemoveContainer","registerHeadlessTask","taskKey","task","has","console","warn","set","startHeadlessTask","taskId","data","taskProvider","get","Error","then","HeadlessJsTaskSupport","notifyTaskFinished","catch","error","reason","registerCallableModule","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AppRegistry\n * @flow\n */\n'use strict';\n\nconst BatchedBridge = require('BatchedBridge');\nconst BugReporting = require('BugReporting');\nconst NativeModules = require('NativeModules');\nconst ReactNative = require('ReactNative');\nconst SceneTracker = require('SceneTracker');\n\nconst infoLog = require('infoLog');\nconst invariant = require('fbjs/lib/invariant');\nconst renderApplication = require('renderApplication');\n\ntype Task = (taskData: any) => Promise<void>;\ntype TaskProvider = () => Task;\nexport type ComponentProvider = () => React$ComponentType<any>;\nexport type ComponentProviderInstrumentationHook =\n  (component: ComponentProvider) => React$ComponentType<any>;\nexport type AppConfig = {\n  appKey: string,\n  component?: ComponentProvider,\n  run?: Function,\n  section?: boolean,\n};\nexport type Runnable = {\n  component?: ComponentProvider,\n  run: Function,\n};\nexport type Runnables = {\n  [appKey: string]: Runnable,\n};\nexport type Registry = {\n  sections: Array<string>,\n  runnables: Runnables,\n};\nexport type WrapperComponentProvider = any => React$ComponentType<*>;\n\nconst runnables: Runnables = {};\nlet runCount = 1;\nconst sections: Runnables = {};\nconst tasks: Map<string, TaskProvider> = new Map();\nlet componentProviderInstrumentationHook: ComponentProviderInstrumentationHook =\n  (component: ComponentProvider) => component();\n\nlet wrapperComponentProvider: ?WrapperComponentProvider;\n\n/**\n * <div class=\"banner-crna-ejected\">\n *   <h3>Project with Native Code Required</h3>\n *   <p>\n *     This API only works in projects made with <code>react-native init</code>\n *     or in those made with Create React Native App which have since ejected. For\n *     more information about ejecting, please see\n *     the <a href=\"https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md\" target=\"_blank\">guide</a> on\n *     the Create React Native App repository.\n *   </p>\n * </div>\n *\n * `AppRegistry` is the JS entry point to running all React Native apps.  App\n * root components should register themselves with\n * `AppRegistry.registerComponent`, then the native system can load the bundle\n * for the app and then actually run the app when it's ready by invoking\n * `AppRegistry.runApplication`.\n *\n * To \"stop\" an application when a view should be destroyed, call\n * `AppRegistry.unmountApplicationComponentAtRootTag` with the tag that was\n * passed into `runApplication`. These should always be used as a pair.\n *\n * `AppRegistry` should be `require`d early in the `require` sequence to make\n * sure the JS execution environment is setup before other modules are\n * `require`d.\n */\nconst AppRegistry = {\n  setWrapperComponentProvider(provider: WrapperComponentProvider) {\n    wrapperComponentProvider = provider;\n  },\n\n  registerConfig(config: Array<AppConfig>): void {\n    config.forEach((appConfig) => {\n      if (appConfig.run) {\n        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);\n      } else {\n        invariant(\n          appConfig.component != null,\n          'AppRegistry.registerConfig(...): Every config is expected to set ' +\n          'either `run` or `component`, but `%s` has neither.',\n          appConfig.appKey\n        );\n        AppRegistry.registerComponent(\n          appConfig.appKey,\n          appConfig.component,\n          appConfig.section,\n        );\n      }\n    });\n  },\n\n  registerComponent(\n    appKey: string,\n    componentProvider: ComponentProvider,\n    section?: boolean,\n  ): string {\n    runnables[appKey] = {\n      componentProvider,\n      run: (appParameters) =>\n        renderApplication(\n          componentProviderInstrumentationHook(componentProvider),\n          appParameters.initialProps,\n          appParameters.rootTag,\n          wrapperComponentProvider && wrapperComponentProvider(appParameters),\n        )\n    };\n    if (section) {\n      sections[appKey] = runnables[appKey];\n    }\n    return appKey;\n  },\n\n  registerRunnable(appKey: string, run: Function): string {\n    runnables[appKey] = {run};\n    return appKey;\n  },\n\n  registerSection(appKey: string, component: ComponentProvider): void {\n    AppRegistry.registerComponent(appKey, component, true);\n  },\n\n  getAppKeys(): Array<string> {\n    return Object.keys(runnables);\n  },\n\n  getSectionKeys(): Array<string> {\n    return Object.keys(sections);\n  },\n\n  getSections(): Runnables {\n    return {\n      ...sections\n    };\n  },\n\n  getRunnable(appKey: string): ?Runnable {\n    return runnables[appKey];\n  },\n\n  getRegistry(): Registry {\n    return {\n      sections: AppRegistry.getSectionKeys(),\n      runnables: {...runnables},\n    };\n  },\n\n  setComponentProviderInstrumentationHook(hook: ComponentProviderInstrumentationHook) {\n    componentProviderInstrumentationHook = hook;\n  },\n\n  runApplication(appKey: string, appParameters: any): void {\n    const msg =\n      'Running application \"' + appKey + '\" with appParams: ' +\n      JSON.stringify(appParameters) + '. ' +\n      '__DEV__ === ' + String(__DEV__) +\n      ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') +\n      ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');\n    infoLog(msg);\n    BugReporting.addSource('AppRegistry.runApplication' + runCount++, () => msg);\n    invariant(\n      runnables[appKey] && runnables[appKey].run,\n      'Application ' + appKey + ' has not been registered.\\n\\n' +\n      'Hint: This error often happens when you\\'re running the packager ' +\n      '(local dev server) from a wrong folder. For example you have ' +\n      'multiple apps and the packager is still running for the app you ' +\n      'were working on before.\\nIf this is the case, simply kill the old ' +\n      'packager instance (e.g. close the packager terminal window) ' +\n      'and start the packager in the correct app folder (e.g. cd into app ' +\n      'folder and run \\'npm start\\').\\n\\n' +\n      'This error can also happen due to a require() error during ' +\n      'initialization or failure to call AppRegistry.registerComponent.\\n\\n'\n    );\n\n    SceneTracker.setActiveScene({name: appKey});\n    runnables[appKey].run(appParameters);\n  },\n\n  unmountApplicationComponentAtRootTag(rootTag: number): void {\n    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);\n  },\n\n  /**\n   * Register a headless task. A headless task is a bit of code that runs without a UI.\n   * @param taskKey the key associated with this task\n   * @param task    a promise returning function that takes some data passed from the native side as\n   *                the only argument; when the promise is resolved or rejected the native side is\n   *                notified of this event and it may decide to destroy the JS context.\n   */\n  registerHeadlessTask(taskKey: string, task: TaskProvider): void {\n    if (tasks.has(taskKey)) {\n      console.warn(`registerHeadlessTask called multiple times for same key '${taskKey}'`);\n    }\n    tasks.set(taskKey, task);\n  },\n\n  /**\n   * Only called from native code. Starts a headless task.\n   *\n   * @param taskId the native id for this task instance to keep track of its execution\n   * @param taskKey the key for the task to start\n   * @param data the data to pass to the task\n   */\n  startHeadlessTask(taskId: number, taskKey: string, data: any): void {\n    const taskProvider = tasks.get(taskKey);\n    if (!taskProvider) {\n      throw new Error(`No task registered for key ${taskKey}`);\n    }\n    taskProvider()(data)\n      .then(() => NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId))\n      .catch(reason => {\n        console.error(reason);\n        NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);\n      });\n  }\n\n};\n\nBatchedBridge.registerCallableModule(\n  'AppRegistry',\n  AppRegistry\n);\n\nmodule.exports = AppRegistry;\n"]}]