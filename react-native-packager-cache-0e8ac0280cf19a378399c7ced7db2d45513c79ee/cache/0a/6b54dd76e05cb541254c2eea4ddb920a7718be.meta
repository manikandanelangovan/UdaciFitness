["4c059f895693921ee6a8d378af1e05c6cbe556f1","34756b5af482e25a43aa58272016345fcd08294a",["pretty-format","uuid-js","./Constants","./lib/Queue","regenerator-runtime","react-native/Libraries/Core/Devtools/parseErrorStack","react-native/Libraries/Core/Devtools/symbolicateStackTrace"],[186,300,399,504,613,14104,14262],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Logs.js"],"names":["enableXDELogging","disableXDELogging","logQueue","logCounter","sessionId","create","toString","isSendingLogs","groupDepth","replaceConsoleFunction","originalGroup","console","group","args","apply","queueRemoteLogAsync","__restore","originalGroupCollapsed","groupCollapsed","originalGroupEnd","groupEnd","shouldHide","originalAssert","assert","assertion","errorString","log","debug","info","warn","error","sendRemoteLogsAsync","logs","currentLog","dequeue","push","fetch","manifest","logUrl","method","headers","Connection","Accept","deviceId","deviceName","body","JSON","stringify","level","additionalFields","map","length","startsWith","lines","split","match","_serializeLogArgsAsync","includesStack","enqueue","count","consoleFunc","original","newConsoleFunc","SENTINEL_ERROR","LOG_FUNCTION_NAME","stringifiedArgs","_isUnhandledPromiseRejection","_stackTraceLogsSupported","_symbolicateAndFormatUnhandledPromiseRejectionAsync","message","stack","includes","Error","usefulStackTop","findIndex","frame","slice","join","_stringifyLogArgsAsync","argsString","_symbolicateAndFormatErrorAsync","Promise","all","arg","developer","projectRoot","__DEV__","msg","_symbolicateError","formattedStack","_formatStack","parseErrorStack","require","parsedStack","symbolicateStackTrace","symbolicatedStack","prettyStack","_cleanStack","filter","i","file","_removeProjectRoot","replace","lineNumber","column","methodName","navigator","userAgent"],"mappings":"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","sourcesContent":["import prettyFormat from 'pretty-format';\nimport UUID from 'uuid-js';\n\nimport Constants from './Constants';\nimport Queue from './lib/Queue';\n\nlet logQueue = new Queue();\nlet logCounter = 0;\nlet sessionId = UUID.create().toString();\nlet isSendingLogs = false;\nlet groupDepth = 0;\n\nexport function enableXDELogging() {\n  // don't use level below info. only use debug for things that\n  // shouldn't be shown to the developer.\n  replaceConsoleFunction('log', 'info');\n  replaceConsoleFunction('debug', 'info');\n  replaceConsoleFunction('info', 'info');\n  replaceConsoleFunction('warn', 'warn');\n  replaceConsoleFunction('error', 'error');\n\n  // console.group\n  let originalGroup = console.group;\n  console.group = function(...args) {\n    if (originalGroup) {\n      originalGroup.apply(console, args);\n    }\n\n    queueRemoteLogAsync('info', {}, args);\n    groupDepth++;\n  };\n  console.group.__restore = function() {\n    console.group = originalGroup;\n  };\n\n  let originalGroupCollapsed = console.groupCollapsed;\n  console.groupCollapsed = function(...args) {\n    if (originalGroupCollapsed) {\n      originalGroupCollapsed.apply(console, args);\n    }\n\n    queueRemoteLogAsync(\n      'info',\n      {\n        groupCollapsed: true,\n      },\n      args\n    );\n    groupDepth++;\n  };\n  console.groupCollapsed.__restore = function() {\n    console.groupCollapsed = originalGroupCollapsed;\n  };\n\n  let originalGroupEnd = console.groupEnd;\n  console.groupEnd = function(...args) {\n    if (originalGroupEnd) {\n      originalGroupEnd.apply(console, args);\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n    queueRemoteLogAsync(\n      'info',\n      {\n        shouldHide: true,\n      },\n      args\n    );\n  };\n  console.groupEnd.__restore = function() {\n    console.groupEnd = originalGroupEnd;\n  };\n\n  // console.assert\n  let originalAssert = console.assert;\n  console.assert = function(assertion, errorString) {\n    if (originalAssert) {\n      originalAssert.apply(console, [assertion, errorString]);\n    }\n\n    if (!assertion) {\n      queueRemoteLogAsync('error', {}, `Assertion failed: ${errorString}`);\n    }\n  };\n  console.assert.__restore = function() {\n    console.assert = originalAssert;\n  };\n\n  // TODO: support rest of console methods\n}\n\nexport function disableXDELogging() {\n  console.log.__restore();\n  console.debug.__restore();\n  console.info.__restore();\n  console.warn.__restore();\n  console.error.__restore();\n\n  console.group.__restore();\n  console.groupCollapsed.__restore();\n  console.groupEnd.__restore();\n\n  console.assert.__restore();\n\n  // TODO: support rest of console methods\n}\n\nasync function sendRemoteLogsAsync() {\n  if (isSendingLogs) {\n    return;\n  }\n\n  let logs = [];\n  let currentLog = logQueue.dequeue();\n  if (!currentLog) {\n    return;\n  } else {\n    isSendingLogs = true;\n  }\n\n  while (currentLog) {\n    logs.push(currentLog);\n    currentLog = logQueue.dequeue();\n  }\n\n  try {\n    await fetch(Constants.manifest.logUrl, {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json',\n        Connection: 'keep-alive',\n        'Proxy-Connection': 'keep-alive',\n        Accept: 'application/json',\n        'Device-Id': Constants.deviceId,\n        'Device-Name': Constants.deviceName,\n        'Session-Id': sessionId,\n      },\n      body: JSON.stringify(logs),\n    });\n  } catch (e) {}\n\n  isSendingLogs = false;\n  sendRemoteLogsAsync();\n}\n\nasync function queueRemoteLogAsync(level, additionalFields, args) {\n  if (!args || !args.map) {\n    return;\n  }\n\n  //  note(brentvatne): react-native does the same thing internally for yellow-box :/\n  if (\n    args.length === 1 &&\n    typeof args[0] === 'string' &&\n    args[0].startsWith('Warning: ')\n  ) {\n    level = 'warn';\n\n    // Remove the stacktrace from warning message, we will get our own\n    let lines = args[0] && args[0].split && args[0].split('\\n');\n    if (lines && lines[1] && lines[1].match(/^\\s+in /)) {\n      args[0] = lines[0];\n    }\n  }\n\n  const { body, includesStack } = await _serializeLogArgsAsync(args, level);\n\n  logQueue.enqueue({\n    count: logCounter++,\n    level,\n    groupDepth,\n    includesStack,\n    body,\n    ...additionalFields,\n  });\n\n  // don't block on this\n  sendRemoteLogsAsync();\n}\n\nfunction replaceConsoleFunction(consoleFunc, level, additionalFields) {\n  const original = console[consoleFunc];\n\n  const newConsoleFunc = function(...args) {\n    queueRemoteLogAsync(level, additionalFields, args);\n\n    if (original) {\n      original.apply(console, args);\n    }\n  };\n\n  newConsoleFunc.__restore = function() {\n    console[consoleFunc] = original;\n  };\n\n  console[consoleFunc] = newConsoleFunc;\n}\n\n/* Serialization helpers */\n\nconst SENTINEL_ERROR = 'sentinel';\nconst LOG_FUNCTION_NAME = 'newConsoleFunc';\nasync function _serializeLogArgsAsync(args, level) {\n  let stringifiedArgs;\n  let includesStack = false;\n  if (\n    level === 'warn' &&\n    _isUnhandledPromiseRejection(args[0]) &&\n    _stackTraceLogsSupported()\n  ) {\n    // Unhandled promise rejections are mangled and not so useful in their\n    // string form, so we take the string, pull the trace out and symbolicate.\n    let {\n      message,\n      stack,\n    } = await _symbolicateAndFormatUnhandledPromiseRejectionAsync(args[0]);\n    stringifiedArgs = [{ message, stack }];\n    includesStack = true;\n  } else if (\n    ['warn', 'error'].includes(level) &&\n    !(args.length === 1 && args[0] instanceof Error) &&\n    _stackTraceLogsSupported()\n  ) {\n    // For console.warn and console.error it is usually useful to know the\n    // stack that leads to the warning or error being called. So we provide\n    // this information to help out with debugging.\n    let error;\n    try {\n      throw new Error(SENTINEL_ERROR);\n    } catch (e) {\n      let usefulStackTop = e.stack\n        .split('\\n')\n        .findIndex(frame => frame && frame.includes(LOG_FUNCTION_NAME));\n      e.stack = e.stack\n        .split('\\n')\n        .slice(usefulStackTop, e.stack.length)\n        .join('\\n');\n      error = e;\n    }\n\n    // [\"hello\", \"world\"] becomes hello, world\n    let argsString = (await _stringifyLogArgsAsync(args)).join(', ');\n\n    let { message, stack } = await _symbolicateAndFormatErrorAsync(\n      error,\n      argsString\n    );\n    stringifiedArgs = [{ message, stack }];\n    includesStack = true;\n  } else {\n    // If there is only one argument to the log function, and that argument\n    // is an error, then we print its stack. If there is more than one\n    // arg, then we don't include the stack because it's not easy to display this\n    // nicely using our current UI.\n    if (\n      args.length === 1 &&\n      args[0] instanceof Error &&\n      _stackTraceLogsSupported()\n    ) {\n      includesStack = true;\n    }\n\n    stringifiedArgs = await _stringifyLogArgsAsync(args);\n  }\n\n  return {\n    body: stringifiedArgs,\n    includesStack,\n  };\n}\n\nasync function _stringifyLogArgsAsync(args) {\n  return await Promise.all(\n    args.map(async arg => {\n      if (typeof arg === 'string') {\n        return arg;\n      } else if (\n        arg instanceof Error &&\n        args.length === 1 &&\n        _stackTraceLogsSupported()\n      ) {\n        return await _symbolicateAndFormatErrorAsync(arg);\n      } else {\n        return prettyFormat(arg);\n      }\n    })\n  );\n}\n\n/* Error logging helpers */\n\n// If exp/xde versions are out of date and don't include projectRoot yet, they\n// also don't support the stack trace logging format: log with `includesStack:bool`\n//  `msg:[{message: string, stack:string}]`.\nfunction _stackTraceLogsSupported() {\n  return !!(\n    Constants.manifest.developer &&\n    Constants.manifest.developer.projectRoot &&\n    __DEV__\n  );\n}\n\nfunction _isUnhandledPromiseRejection(msg) {\n  return !!(\n    msg &&\n    msg.match &&\n    msg.match(/^Possible Unhandled Promise Rejection/)\n  );\n}\n\nasync function _symbolicateAndFormatUnhandledPromiseRejectionAsync(message) {\n  let stack = await _symbolicateError(message);\n\n  if (!stack || !stack.length) {\n    return message;\n  }\n\n  let formattedStack = _formatStack(stack);\n  let lines = message.split('\\n');\n\n  return {\n    message: `[Unhandled Promise rejection: ${lines[1]}]`,\n    stack: formattedStack,\n  };\n}\n\nasync function _symbolicateAndFormatErrorAsync(error, message) {\n  if (!message) {\n    message = error.message;\n  }\n\n  if (!error.stack || !error.stack.length) {\n    return prettyFormat(error);\n  }\n\n  let stack = await _symbolicateError(error.stack);\n  let formattedStack = _formatStack(stack);\n\n  return {\n    message,\n    stack: formattedStack,\n  };\n}\n\nasync function _symbolicateError(stack) {\n  const parseErrorStack = require('react-native/Libraries/Core/Devtools/parseErrorStack');\n  const parsedStack = parseErrorStack({ stack });\n  const symbolicateStackTrace = require('react-native/Libraries/Core/Devtools/symbolicateStackTrace');\n  try {\n    let symbolicatedStack = await symbolicateStackTrace(parsedStack);\n    let prettyStack = _cleanStack(symbolicatedStack);\n    return prettyStack || [];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction _cleanStack(stack) {\n  return stack\n    .filter(\n      (frame, i) =>\n        frame.file !== null &&\n        !(frame.file.includes('expo/src/Logs') && i === 0)\n    )\n    .map(_removeProjectRoot);\n}\n\nfunction _removeProjectRoot(frame) {\n  if (\n    Constants.manifest.developer &&\n    Constants.manifest.developer.projectRoot &&\n    frame.file &&\n    frame.file.includes(Constants.manifest.developer.projectRoot)\n  ) {\n    frame.file = frame.file.replace(\n      Constants.manifest.developer.projectRoot,\n      ''\n    );\n    if (frame.file[0] === '/' || frame.file[0] === '\\\\') {\n      frame.file = frame.file.slice(1, frame.file.length);\n    }\n    return frame;\n  } else {\n    return frame;\n  }\n}\n\nfunction _formatStack(stack) {\n  return stack\n    .map(\n      frame =>\n        `${frame.file}:${frame.lineNumber}:${frame.column} in ${frame.methodName}`\n    )\n    .join('\\n');\n}\n\n// Enable by default\nif (Constants.manifest && Constants.manifest.logUrl) {\n  // Checks if the app is running in Chrome. If it is, we do not enable XDE and display a message on the XDE.\n  if (!navigator.userAgent) {\n    enableXDELogging();\n  } else {\n    queueRemoteLogAsync('info', {}, [\n      'You are now debugging remotely, check your browser console for your application logs.',\n    ]);\n  }\n}\n"]}]