["076f84b9dca3dc90ded7bb1a8d2b5e8c477f12a5","2794e65297184296505c3e12d86c9c7015aef9f2",["react-native","regenerator-runtime"],[93,144,202],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-branch/src/branchUniversalObject.js"],"names":["RNBranch","createBranchUniversalObject","identifier","options","Error","branchUniversalObject","contentIndexingMode","canonicalIdentifier","createUniversalObject","ident","showShareSheet","shareOptions","linkProperties","controlParams","title","text","contentDescription","feature","channel","_tryFunction","registerView","generateShortUrl","listOnSpotlight","OS","Promise","resolve","userCompletedAction","event","state","userCompletedActionOnUniversalObject","release","releaseUniversalObject","func","args","catch","error","code","then","response"],"mappings":";;;;AAAA;;;;;;IAEQA,Q,8BAAAA,Q;;kBAEO,SAAeC,2BAAf,CAA2CC,UAA3C;AAAA,MAAuDC,OAAvD,uEAAiE,EAAjE;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACT,OAAOD,UAAP,KAAsB,QADb;AAAA;AAAA;AAAA;;AAAA,gBAC6B,IAAIE,KAAJ,CAAU,kDAAV,CAD7B;;AAAA;AAGPC,+BAHO;AAIXC,iCAAqB,SAJV;AAKXC,iCAAqBL;AALV,aAMRC,OANQ;AAAA;AAAA,0CASSH,SAASQ,qBAAT,CAA+BH,qBAA/B,CATT;;AAAA;AAAA;AASPI,eATO,QASPA,KATO;AAAA,2CAWN;AACLA,mBAAOA,KADF;AAELC,0BAFK,4BAEsE;AAAA,kBAA5DC,YAA4D,uEAA7C,EAA6C;AAAA,kBAAzCC,cAAyC,uEAAxB,EAAwB;AAAA,kBAApBC,aAAoB,uEAAJ,EAAI;;AACzEF;AACEG,uBAAOX,QAAQW,KAAR,IAAiB,EAD1B;AAEEC,sBAAMZ,QAAQa,kBAAR,IAA8B;AAFtC,iBAGKL,YAHL;;AAMAC;AACEK,yBAAS,OADX;AAEEC,yBAAS;AAFX,iBAGKN,cAHL;;AAMA,qBAAO,KAAKO,YAAL,CAAkBnB,SAASU,cAA3B,EAA2CC,YAA3C,EAAyDC,cAAzD,EAAyEC,aAAzE,CAAP;AACD,aAhBI;AAkBLO,wBAlBK,0BAkBU;AACb,qBAAO,KAAKD,YAAL,CAAkBnB,SAASoB,YAA3B,CAAP;AACD,aApBI;AAqBLC,4BArBK,8BAqBqD;AAAA,kBAAzCT,cAAyC,uEAAxB,EAAwB;AAAA,kBAApBC,aAAoB,uEAAJ,EAAI;;AACxD,qBAAO,KAAKM,YAAL,CAAkBnB,SAASqB,gBAA3B,EAA6CT,cAA7C,EAA6DC,aAA7D,CAAP;AACD,aAvBI;AAwBLS,2BAxBK,6BAwBa;AAChB,kBAAI,sBAASC,EAAT,KAAgB,KAApB,EAA2B,OAAOC,QAAQC,OAAR,EAAP;AAC3B,qBAAO,KAAKN,YAAL,CAAkBnB,SAASsB,eAA3B,CAAP;AACD,aA3BI;AA4BLI,+BA5BK,+BA4BeC,KA5Bf,EA4BkC;AAAA,kBAAZC,KAAY,uEAAJ,EAAI;;AACrC,qBAAO,KAAKT,YAAL,CAAkBnB,SAAS6B,oCAA3B,EAAiEF,KAAjE,EAAwEC,KAAxE,CAAP;AACD,aA9BI;AA+BLE,mBA/BK,qBA+BK;AACR9B,uBAAS+B,sBAAT,CAAgC,KAAKtB,KAArC;AACD,aAjCI;AAmCLU,wBAnCK,wBAmCQa,IAnCR,EAmCuB;AAAA;;AAAA,gDAANC,IAAM;AAANA,oBAAM;AAAA;;AAC1B,qBAAOD,uBAAK,KAAKvB,KAAV,wCAAoBwB,IAApB,IAA0BC,KAA1B,CAAgC,UAACC,KAAD,EAAW;AAChD,oBAAIA,MAAMC,IAAN,IAAc,8BAAlB,EAAkD;AAChD,wBAAMD,KAAN;AACD;;AAED,uBAAOnC,SAASQ,qBAAT,CAA+BH,qBAA/B,EAAsDgC,IAAtD,CAA2D,UAACC,QAAD,EAAc;AAC9E,wBAAK7B,KAAL,GAAa6B,SAAS7B,KAAtB;AACA,yBAAOuB,uBAAKM,SAAS7B,KAAd,wCAAwBwB,IAAxB,GAAP;AACD,iBAHM,CAAP;AAID,eATM,CAAP;AAUD;AA9CI,WAXM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","sourcesContent":["import { NativeModules, Platform } from 'react-native'\n\nconst { RNBranch } = NativeModules\n\nexport default async function createBranchUniversalObject(identifier, options = {}) {\n  if (typeof identifier !== 'string') throw new Error('react-native-branch: identifier must be a string')\n\n  const branchUniversalObject = {\n    contentIndexingMode: 'private',\n    canonicalIdentifier: identifier,\n    ...options\n  }\n\n  let { ident } = await RNBranch.createUniversalObject(branchUniversalObject)\n\n  return {\n    ident: ident,\n    showShareSheet(shareOptions = {}, linkProperties = {}, controlParams = {}) {\n      shareOptions = {\n        title: options.title || '',\n        text: options.contentDescription || '',\n        ...shareOptions,\n      }\n\n      linkProperties = {\n        feature: 'share',\n        channel: 'RNApp',\n        ...linkProperties,\n      }\n\n      return this._tryFunction(RNBranch.showShareSheet, shareOptions, linkProperties, controlParams)\n    },\n    // deprecated in favor of userCompletedAction(RegisterViewEvent)\n    registerView() {\n      return this._tryFunction(RNBranch.registerView)\n    },\n    generateShortUrl(linkProperties = {}, controlParams = {}) {\n      return this._tryFunction(RNBranch.generateShortUrl, linkProperties, controlParams)\n    },\n    listOnSpotlight() {\n      if (Platform.OS !== 'ios') return Promise.resolve()\n      return this._tryFunction(RNBranch.listOnSpotlight)\n    },\n    userCompletedAction(event, state = {}) {\n      return this._tryFunction(RNBranch.userCompletedActionOnUniversalObject, event, state)\n    },\n    release() {\n      RNBranch.releaseUniversalObject(this.ident)\n    },\n\n    _tryFunction(func, ...args) {\n      return func(this.ident, ...args).catch((error) => {\n        if (error.code != 'RNBranch::Error::BUONotFound') {\n          throw error\n        }\n\n        return RNBranch.createUniversalObject(branchUniversalObject).then((response) => {\n          this.ident = response.ident\n          return func(response.ident, ...args)\n        })\n      })\n    }\n  }\n}\n"]}]