["413e77eeed0ab5e34ebcabfe4ccdf9106d5bd019","7a995c9ea596507630eea05498be9481e2660cbc",["prop-types","react","react-native","./decorateMapComponent"],[25,129,226,280],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-maps/lib/components/MapPolyline.js"],"names":["propTypes","coordinates","arrayOf","shape","latitude","number","isRequired","longitude","onPress","func","tappable","bool","fillColor","string","strokeWidth","strokeColor","zIndex","lineCap","oneOf","lineJoin","miterLimit","geodesic","lineDashPhase","lineDashPattern","defaultProps","MapPolyline","props","polyline","setNativeProps","AIRMapPolyline","getAirComponent","ref","Component","module","exports","componentType","providers","google","ios","android"],"mappings":"AAAA;;;;AACA;;;;AACA;;AAGA;;;;AAKA,IAAMA;AAMJC,eAAa,oBAAUC,OAAV,CAAkB,oBAAUC,KAAV,CAAgB;AAI7CC,cAAU,oBAAUC,MAAV,CAAiBC,UAJkB;AAK7CC,eAAW,oBAAUF,MAAV,CAAiBC;AALiB,GAAhB,CAAlB,CANT;;AAiBJE,WAAS,oBAAUC,IAjBf;;AAsBJC,YAAU,oBAAUC,IAtBhB;;AA2BJC,aAAW,oBAAUC,MA3BjB;;AAgCJC,eAAa,oBAAUT,MAhCnB;;AAqCJU,eAAa,oBAAUF,MArCnB;;AA8CJG,UAAQ,oBAAUX,MA9Cd;;AAsDJY,WAAS,oBAAUC,KAAV,CAAgB,CACvB,MADuB,EAEvB,OAFuB,EAGvB,QAHuB,CAAhB,CAtDL;;AAkEJC,YAAU,oBAAUD,KAAV,CAAgB,CACxB,OADwB,EAExB,OAFwB,EAGxB,OAHwB,CAAhB,CAlEN;;AAkFJE,cAAY,oBAAUf,MAlFlB;;AA4FJgB,YAAU,oBAAUV,IA5FhB;;AAyGJW,iBAAe,oBAAUjB,MAzGrB;;AAuHJkB,mBAAiB,oBAAUrB,OAAV,CAAkB,oBAAUG,MAA5B;AAvHb,EAAN;;AA0HA,IAAMmB,eAAe;AACnBT,eAAa,MADM;AAEnBD,eAAa;AAFM,CAArB;;IAKMW,W;;;;;;;;;;mCACWC,K,EAAO;AACpB,WAAKC,QAAL,CAAcC,cAAd,CAA6BF,KAA7B;AACD;;;6BAEQ;AAAA;;AACP,UAAMG,iBAAiB,KAAKC,eAAL,EAAvB;AACA,aACE,8BAAC,cAAD,2BAAoB,KAAKJ,KAAzB,IAAgC,KAAK,mBAAO;AAAE,iBAAKC,QAAL,GAAgBI,IAAhB;AAAsB,SAApE,IADF;AAGD;;;EAVuB,gBAAMC,S;;AAahCP,YAAYzB,SAAZ,GAAwBA,SAAxB;AACAyB,YAAYD,YAAZ,GAA2BA,YAA3B;;AAEAS,OAAOC,OAAP,GAAiB,oCAAqBT,WAArB,EAAkC;AACjDU,iBAAe,UADkC;AAEjDC,aAAW;AACTC,YAAQ;AACNC,0CADM;AAENC;AAFM;AADC;AAFsC,CAAlC,CAAjB","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  ViewPropTypes,\n} from 'react-native';\nimport decorateMapComponent, {\n  USES_DEFAULT_IMPLEMENTATION,\n  SUPPORTED,\n} from './decorateMapComponent';\n\nconst propTypes = {\n  ...ViewPropTypes,\n\n  /**\n   * An array of coordinates to describe the polygon\n   */\n  coordinates: PropTypes.arrayOf(PropTypes.shape({\n    /**\n     * Latitude/Longitude coordinates\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  })),\n\n  /**\n   * Callback that is called when the user presses on the polyline\n   */\n  onPress: PropTypes.func,\n\n  /* Boolean to allow a polyline to be tappable and use the\n  * onPress function\n  */\n  tappable: PropTypes.bool,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: PropTypes.string,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: PropTypes.string,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf([\n    'butt',\n    'round',\n    'square',\n  ]),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf([\n    'miter',\n    'round',\n    'bevel',\n  ]),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * Boolean to indicate whether to draw each segment of the line as a geodesic as opposed to\n   * straight lines on the Mercator projection. A geodesic is the shortest path between two\n   * points on the Earth's surface. The geodesic curve is constructed assuming the Earth is\n   * a sphere.\n   *\n   * @platform android\n   */\n  geodesic: PropTypes.bool,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n};\n\nconst defaultProps = {\n  strokeColor: '#000',\n  strokeWidth: 1,\n};\n\nclass MapPolyline extends React.Component {\n  setNativeProps(props) {\n    this.polyline.setNativeProps(props);\n  }\n\n  render() {\n    const AIRMapPolyline = this.getAirComponent();\n    return (\n      <AIRMapPolyline {...this.props} ref={ref => { this.polyline = ref; }} />\n    );\n  }\n}\n\nMapPolyline.propTypes = propTypes;\nMapPolyline.defaultProps = defaultProps;\n\nmodule.exports = decorateMapComponent(MapPolyline, {\n  componentType: 'Polyline',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}]