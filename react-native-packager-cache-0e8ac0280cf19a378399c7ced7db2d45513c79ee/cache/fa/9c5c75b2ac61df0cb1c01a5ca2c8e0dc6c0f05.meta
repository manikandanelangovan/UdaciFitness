["8fd7de44ca23dc161cf0eca945a1208b81824931","c63b43c3f3c62c9611ca1a2d070e8794acf498b8",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Utilities/defineLazyObjectProperty.js"],"names":["defineLazyObjectProperty","object","name","descriptor","get","enumerable","writable","value","valueSet","getValue","setValue","newValue","Object","defineProperty","configurable","set","module","exports"],"mappings":";;AAYA;;AAKA,SAASA,wBAAT,CACEC,MADF,EAEEC,IAFF,EAGEC,UAHF,EAQQ;AAAA,MACCC,GADD,GACQD,UADR,CACCC,GADD;;AAEN,MAAMC,aAAaF,WAAWE,UAAX,KAA0B,KAA7C;AACA,MAAMC,WAAWH,WAAWG,QAAX,KAAwB,KAAzC;;AAEA,MAAIC,cAAJ;AACA,MAAIC,WAAW,KAAf;AACA,WAASC,QAAT,GAAuB;AAIrB,QAAI,CAACD,QAAL,EAAe;AAMbA,iBAAW,IAAX;AACAE,eAASN,KAAT;AACD;AACD,WAAOG,KAAP;AACD;AACD,WAASG,QAAT,CAAkBC,QAAlB,EAAqC;AACnCJ,YAAQI,QAAR;AACAH,eAAW,IAAX;AACAI,WAAOC,cAAP,CAAsBZ,MAAtB,EAA8BC,IAA9B,EAAoC;AAClCK,aAAOI,QAD2B;AAElCG,oBAAc,IAFoB;AAGlCT,4BAHkC;AAIlCC;AAJkC,KAApC;AAMD;;AAEDM,SAAOC,cAAP,CAAsBZ,MAAtB,EAA8BC,IAA9B,EAAoC;AAClCE,SAAKK,QAD6B;AAElCM,SAAKL,QAF6B;AAGlCI,kBAAc,IAHoB;AAIlCT;AAJkC,GAApC;AAMD;;AAEDW,OAAOC,OAAP,GAAiBjB,wBAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule defineLazyObjectProperty\n * @flow\n */\n\n'use strict';\n\n/**\n * Defines a lazily evaluated property on the supplied `object`.\n */\nfunction defineLazyObjectProperty<T>(\n  object: Object,\n  name: string,\n  descriptor: {\n    get: () => T,\n    enumerable?: boolean,\n    writable?: boolean,\n  },\n): void {\n  const {get} = descriptor;\n  const enumerable = descriptor.enumerable !== false;\n  const writable = descriptor.writable !== false;\n\n  let value;\n  let valueSet = false;\n  function getValue(): T {\n    // WORKAROUND: A weird infinite loop occurs where calling `getValue` calls\n    // `setValue` which calls `Object.defineProperty` which somehow triggers\n    // `getValue` again. Adding `valueSet` breaks this loop.\n    if (!valueSet) {\n      // Calling `get()` here can trigger an infinite loop if it fails to\n      // remove the getter on the property, which can happen when executing\n      // JS in a V8 context.  `valueSet = true` will break this loop, and\n      // sets the value of the property to undefined, until the code in `get()`\n      // finishes, at which point the property is set to the correct value.\n      valueSet = true;\n      setValue(get());\n    }\n    return value;\n  }\n  function setValue(newValue: T): void {\n    value = newValue;\n    valueSet = true;\n    Object.defineProperty(object, name, {\n      value: newValue,\n      configurable: true,\n      enumerable,\n      writable,\n    });\n  }\n\n  Object.defineProperty(object, name, {\n    get: getValue,\n    set: setValue,\n    configurable: true,\n    enumerable,\n  });\n}\n\nmodule.exports = defineLazyObjectProperty;\n"]}]