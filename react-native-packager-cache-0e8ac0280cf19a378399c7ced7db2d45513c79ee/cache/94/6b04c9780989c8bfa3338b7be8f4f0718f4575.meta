["d6c785d7b653cecd99e37078dd113d15e071ba2c","e9592f7850f9a89643435724fc08f7ae935e574a",["prop-types","react","react-native","react-native/Libraries/Image/resolveAssetSource","./decorateMapComponent"],[25,129,226,278,452],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-maps/lib/components/MapMarker.js"],"names":["viewConfig","uiViewClassName","validAttributes","coordinate","propTypes","identifier","string","reuseIdentifier","title","description","image","any","opacity","number","pinColor","shape","latitude","isRequired","longitude","centerOffset","x","y","calloutOffset","anchor","calloutAnchor","flat","bool","draggable","onPress","func","onSelect","onDeselect","onCalloutPress","onDragStart","onDrag","onDragEnd","defaultProps","MapMarker","props","showCallout","bind","hideCallout","marker","setNativeProps","_runCommand","name","args","OS","UIManager","dispatchViewManagerCommand","_getHandle","getUIManagerCommand","getMapManagerCommand","uri","AIRMapMarker","getAirComponent","ref","styles","style","Component","create","position","backgroundColor","Animated","createAnimatedComponent","module","exports","componentType","providers","google","ios","android"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  StyleSheet,\n  Platform,\n  NativeModules,\n  Animated,\n  findNodeHandle,\n  ViewPropTypes,\n} from 'react-native';\n\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\nimport decorateMapComponent, {\n  SUPPORTED,\n  USES_DEFAULT_IMPLEMENTATION,\n} from './decorateMapComponent';\n\nconst viewConfig = {\n  uiViewClassName: 'AIR<provider>MapMarker',\n  validAttributes: {\n    coordinate: true,\n  },\n};\n\nconst propTypes = {\n  ...ViewPropTypes,\n\n  // TODO(lmr): get rid of these?\n  identifier: PropTypes.string,\n  reuseIdentifier: PropTypes.string,\n\n  /**\n   * The title of the marker. This is only used if the <Marker /> component has no children that\n   * are an `<MapView.Callout />`, in which case the default callout behavior will be used, which\n   * will show both the `title` and the `description`, if provided.\n   */\n  title: PropTypes.string,\n\n  /**\n   * The description of the marker. This is only used if the <Marker /> component has no children\n   * that are an `<MapView.Callout />`, in which case the default callout behavior will be used,\n   * which will show both the `title` and the `description`, if provided.\n   */\n  description: PropTypes.string,\n\n  /**\n   * A custom image to be used as the marker's icon. Only local image resources are allowed to be\n   * used.\n   */\n  image: PropTypes.any,\n\n  /**\n   * Opacity level of view/image based markers\n   */\n  opacity: PropTypes.number,\n\n  /**\n   * If no custom marker view or custom image is provided, the platform default pin will be used,\n   * which can be customized by this color. Ignored if a custom marker is being used.\n   */\n  pinColor: PropTypes.string,\n\n  /**\n   * The coordinate for the marker.\n   */\n  coordinate: PropTypes.shape({\n    /**\n     * Coordinates for the anchor point of the marker.\n     */\n    latitude: PropTypes.number.isRequired,\n    longitude: PropTypes.number.isRequired,\n  }).isRequired,\n\n  /**\n   * The offset (in points) at which to display the view.\n   *\n   * By default, the center point of an annotation view is placed at the coordinate point of the\n   * associated annotation. You can use this property to reposition the annotation view as\n   * needed. This x and y offset values are measured in points. Positive offset values move the\n   * annotation view down and to the right, while negative values move it up and to the left.\n   *\n   * For android, see the `anchor` prop.\n   *\n   * @platform ios\n   */\n  centerOffset: PropTypes.shape({\n    /**\n     * Offset from the anchor point\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * The offset (in points) at which to place the callout bubble.\n   *\n   * This property determines the additional distance by which to move the callout bubble. When\n   * this property is set to (0, 0), the anchor point of the callout bubble is placed on the\n   * top-center point of the marker viewâ€™s frame. Specifying positive offset values moves the\n   * callout bubble down and to the right, while specifying negative values moves it up and to\n   * the left.\n   *\n   * For android, see the `calloutAnchor` prop.\n   *\n   * @platform ios\n   */\n  calloutOffset: PropTypes.shape({\n    /**\n     * Offset to the callout\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * Sets the anchor point for the marker.\n   *\n   * The anchor specifies the point in the icon image that is anchored to the marker's position\n   * on the Earth's surface.\n   *\n   * The anchor point is specified in the continuous space [0.0, 1.0] x [0.0, 1.0], where (0, 0)\n   * is the top-left corner of the image, and (1, 1) is the bottom-right corner. The anchoring\n   * point in a W x H image is the nearest discrete grid point in a (W + 1) x (H + 1) grid,\n   * obtained by scaling the then rounding. For example, in a 4 x 2 image, the anchor point\n   * (0.7, 0.6) resolves to the grid point at (3, 1).\n   *\n   * For ios, see the `centerOffset` prop.\n   *\n   * @platform android\n   */\n  anchor: PropTypes.shape({\n    /**\n     * Offset to the callout\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * Specifies the point in the marker image at which to anchor the callout when it is displayed.\n   * This is specified in the same coordinate system as the anchor. See the `andor` prop for more\n   * details.\n   *\n   * The default is the top middle of the image.\n   *\n   * For ios, see the `calloutOffset` prop.\n   *\n   * @platform android\n   */\n  calloutAnchor: PropTypes.shape({\n    /**\n     * Offset to the callout\n     */\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n  }),\n\n  /**\n   * Sets whether this marker should be flat against the map true or a billboard facing the\n   * camera false.\n   *\n   * @platform android\n   */\n  flat: PropTypes.bool,\n\n  draggable: PropTypes.bool,\n\n  /**\n   * Callback that is called when the user presses on the marker\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user selects the marker, before the callout is shown.\n   *\n   * @platform ios\n   */\n  onSelect: PropTypes.func,\n\n  /**\n   * Callback that is called when the marker is deselected, before the callout is hidden.\n   *\n   * @platform ios\n   */\n  onDeselect: PropTypes.func,\n\n  /**\n   * Callback that is called when the user taps the callout view.\n   */\n  onCalloutPress: PropTypes.func,\n\n  /**\n   * Callback that is called when the user initiates a drag on this marker (if it is draggable)\n   */\n  onDragStart: PropTypes.func,\n\n  /**\n   * Callback called continuously as the marker is dragged\n   */\n  onDrag: PropTypes.func,\n\n  /**\n   * Callback that is called when a drag on this marker finishes. This is usually the point you\n   * will want to setState on the marker's coordinate again\n   */\n  onDragEnd: PropTypes.func,\n};\n\nconst defaultProps = {\n  onPress() {},\n};\n\nclass MapMarker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showCallout = this.showCallout.bind(this);\n    this.hideCallout = this.hideCallout.bind(this);\n  }\n\n  setNativeProps(props) {\n    this.marker.setNativeProps(props);\n  }\n\n  showCallout() {\n    this._runCommand('showCallout', []);\n  }\n\n  hideCallout() {\n    this._runCommand('hideCallout', []);\n  }\n\n  _getHandle() {\n    return findNodeHandle(this.marker);\n  }\n\n  _runCommand(name, args) {\n    switch (Platform.OS) {\n      case 'android':\n        NativeModules.UIManager.dispatchViewManagerCommand(\n          this._getHandle(),\n          this.getUIManagerCommand(name),\n          args\n        );\n        break;\n\n      case 'ios':\n        this.getMapManagerCommand(name)(this._getHandle(), ...args);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    let image;\n    if (this.props.image) {\n      image = resolveAssetSource(this.props.image) || {};\n      image = image.uri || this.props.image;\n    }\n\n    const AIRMapMarker = this.getAirComponent();\n\n    return (\n      <AIRMapMarker\n        ref={ref => { this.marker = ref; }}\n        {...this.props}\n        image={image}\n        style={[styles.marker, this.props.style]}\n      />\n    );\n  }\n}\n\nMapMarker.propTypes = propTypes;\nMapMarker.defaultProps = defaultProps;\nMapMarker.viewConfig = viewConfig;\n\nconst styles = StyleSheet.create({\n  marker: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n  },\n});\n\nMapMarker.Animated = Animated.createAnimatedComponent(MapMarker);\n\nmodule.exports = decorateMapComponent(MapMarker, {\n  componentType: 'Marker',\n  providers: {\n    google: {\n      ios: SUPPORTED,\n      android: USES_DEFAULT_IMPLEMENTATION,\n    },\n  },\n});\n"]}]