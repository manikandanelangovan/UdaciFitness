["4925fa67df93ba5b34e13cf589c10d29644fbe3b","2f6e0ac97c9d232454bb7f8718b5094ec3bd4168",["react-native","invariant","regenerator-runtime"],[226,269,384],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Pedometer.js"],"names":["watchStepCount","getStepCountAsync","isAvailableAsync","PedometerEventEmitter","ExponentPedometer","_listenerCount","callback","listener","addListener","remove","stopWatchingStepCount","start","end","getTime"],"mappings":";;;QAegBA,c,GAAAA,c;QAwBMC,iB,GAAAA,iB;QAcAC,gB,GAAAA,gB;;AAnDtB;;AACA;;;;;;AAEA,IAAMC,wBAAwB,oCAC5B,2BAAcC,iBADc,CAA9B;;AAQA,IAAIC,iBAAiB,CAArB;;AAEO,SAASL,cAAT,CACLM,QADK,EAEc;AACnB,MAAID,mBAAmB,CAAvB,EAA0B;AACxB,+BAAcD,iBAAd,CAAgCJ,cAAhC;AACD;AACDK;;AAEA,MAAME,WAAWJ,sBAAsBK,WAAtB,CACf,0BADe,EAEfF,QAFe,CAAjB;;AAKA,SAAO;AACLG,UADK,oBACI;AACPF,eAASE,MAAT;AACAJ;AACA,UAAIA,mBAAmB,CAAvB,EAA0B;AACxB,mCAAcD,iBAAd,CAAgCM,qBAAhC;AACD;AACF;AAPI,GAAP;AASD;;AAEM,SAAeT,iBAAf,CACLU,KADK,EAELC,GAFK;AAAA;AAAA;AAAA;AAAA;AAIL,mCACED,SAASC,GADX,EAEE,8DAFF;AAJK;AAAA,0CAQQ,2BAAcR,iBAAd,CAAgCH,iBAAhC,CACXU,MAAME,OAAN,EADW,EAEXD,IAAIC,OAAJ,EAFW,CARR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAeX,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACQ,2BAAcE,iBAAd,CAAgCF,gBAAhC,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// @flow\n\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport invariant from 'invariant';\n\nconst PedometerEventEmitter = new NativeEventEmitter(\n  NativeModules.ExponentPedometer\n);\n\ntype PedometerResult = { steps: number };\ntype PedometerUpdateCallback = (result: PedometerResult) => void;\ntype PedometerListener = { remove: () => void };\n\nlet _listenerCount = 0;\n\nexport function watchStepCount(\n  callback: PedometerUpdateCallback\n): PedometerListener {\n  if (_listenerCount === 0) {\n    NativeModules.ExponentPedometer.watchStepCount();\n  }\n  _listenerCount++;\n\n  const listener = PedometerEventEmitter.addListener(\n    'Exponent.pedometerUpdate',\n    callback\n  );\n\n  return {\n    remove() {\n      listener.remove();\n      _listenerCount--;\n      if (_listenerCount === 0) {\n        NativeModules.ExponentPedometer.stopWatchingStepCount();\n      }\n    },\n  };\n}\n\nexport async function getStepCountAsync(\n  start: Date,\n  end: Date\n): Promise<PedometerResult> {\n  invariant(\n    start <= end,\n    'Pedometer: The start date must be smaller than the end date.'\n  );\n  return await NativeModules.ExponentPedometer.getStepCountAsync(\n    start.getTime(),\n    end.getTime()\n  );\n}\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await NativeModules.ExponentPedometer.isAvailableAsync();\n}\n"]}]