["8dfea611b7fd9de5122c802f0b0368c3d744aa6f","268db08eaba17ddd2941a23ad409a765c26b9431",["react-native","./Asset","./Constants","regenerator-runtime"],[254,293,390,507],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Font.js"],"names":["processFontFamily","isLoaded","isLoading","loadAsync","style","nativeName","name","sessionId","loaded","loading","onLoadPromises","systemFonts","includes","__DEV__","console","error","nameOrMapOrArray","uriOrModuleOrAsset","Array","isArray","fontObjs","Promise","all","map","fontObj","names","Object","keys","push","resolve","asset","Error","fromModule","downloadAsync","downloaded","ExponentFontLoader","localUri","forEach","options","ignoreWarning","fontFamily","undefined","warn"],"mappings":"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","sourcesContent":["// @flow\n\nimport { NativeModules } from 'react-native';\n\nimport Asset from './Asset';\nimport Constants from './Constants';\n\nfunction nativeName(name) {\n  return `${Constants.sessionId}-${name}`;\n}\n\nconst loaded = {};\nconst loading = {};\nconst onLoadPromises = {};\n\nexport function processFontFamily(name: ?string) {\n  if (!name || Constants.systemFonts.includes(name) || name === 'System') {\n    return name;\n  }\n\n  if (name.includes(Constants.sessionId)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading '${name}', but used it before it finished loading\\n\\n` +\n            `- You need to wait for Expo.Font.loadAsync to complete before using the font.\\n\\n` +\n            `- We recommend loading all fonts before rendering the app, and rendering only ` +\n            `Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily '${name}' is not a system font and has not been loaded through ` +\n            `Expo.Font.loadAsync.\\n\\n` +\n            `- If you intended to use a system font, make sure you typed the name ` +\n            `correctly and that it is supported by your device operating system.\\n\\n` +\n            `- If this is a custom font, be sure to load it with Expo.Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExponentFont-${nativeName(name)}`;\n}\n\nexport function isLoaded(name: string) {\n  return !!loaded[name];\n}\n\nexport function isLoading(name: string) {\n  return !!onLoadPromises[name];\n}\n\nexport async function loadAsync(\n  nameOrMapOrArray: any,\n  uriOrModuleOrAsset: any\n) {\n  if (typeof nameOrMapOrArray === 'object') {\n    if (Array.isArray(nameOrMapOrArray)) {\n      const fontObjs = nameOrMapOrArray;\n      await Promise.all(fontObjs.map(fontObj => loadAsync(fontObj)));\n    } else {\n      const names = Object.keys(nameOrMapOrArray);\n      await Promise.all(\n        names.map(name => loadAsync(name, nameOrMapOrArray[name]))\n      );\n    }\n\n    return;\n  }\n\n  let name = nameOrMapOrArray;\n  if (loaded[name]) {\n  } else if (loading[name]) {\n    await new Promise(resolve => {\n      onLoadPromises[name].push(resolve);\n    });\n  } else {\n    loading[name] = true;\n    onLoadPromises[name] = [];\n\n    let asset;\n    if (typeof uriOrModuleOrAsset === 'string') {\n      // TODO(nikki): need to implement Asset.fromUri(...)\n      // asset = Asset.fromUri(uriOrModuleOrAsset);\n      throw new Error(\n        'Loading fonts from remote URIs is temporarily not supported. Please download the font file and load it using require. See: https://docs.getexponent.com/versions/v8.0.0/guides/using-custom-fonts.html#downloading-the-font'\n      );\n    } else if (typeof uriOrModuleOrAsset === 'number') {\n      asset = Asset.fromModule(uriOrModuleOrAsset);\n    } else {\n      asset = uriOrModuleOrAsset;\n    }\n\n    await asset.downloadAsync();\n    if (asset.downloaded) {\n      await NativeModules.ExponentFontLoader.loadAsync(\n        nativeName(name),\n        asset.localUri\n      );\n    } else {\n      throw new Error(`Couldn't download asset for font '${name}'`);\n    }\n\n    loaded[name] = true;\n    delete loading[name];\n    if (onLoadPromises[name]) {\n      onLoadPromises[name].forEach(resolve => resolve());\n      delete onLoadPromises[name];\n    }\n  }\n}\n\nexport function style(\n  name: string,\n  options: { ignoreWarning: boolean } = { ignoreWarning: false }\n) {\n  if (!name) {\n    return {\n      fontFamily: undefined,\n    };\n  }\n\n  if (!loaded[name] && !options.ignoreWarning) {\n    console.warn(`[Expo.Font] No font '${name}', or it hasn't been loaded yet`);\n  }\n  return {\n    fontFamily: `ExponentFont-${nativeName(name)}`,\n  };\n}\n"]}]