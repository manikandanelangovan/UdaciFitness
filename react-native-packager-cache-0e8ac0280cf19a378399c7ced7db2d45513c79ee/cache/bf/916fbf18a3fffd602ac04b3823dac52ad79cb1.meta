["7de9e4f765c041384b73ddefb81974e4b855cf5e","1d3c1005e1b781c3e1519b30bd2be2644d92f7b9",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-svg/lib/Matrix2D.js"],"names":["DEG_TO_RAD","Math","PI","Matrix2D","a","b","c","d","tx","ty","setTransform","reset","toArray","copy","matrix","clone","prepend","a1","c1","tx1","append","b1","d1","appendTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","regX","regY","r","cos","sin","prependTransform"],"mappings":"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","sourcesContent":["/**\n * based on\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n */\nconst DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n *\n * @class Matrix2D\n * @param {Number} [a=1] Specifies the a property for the new matrix.\n * @param {Number} [b=0] Specifies the b property for the new matrix.\n * @param {Number} [c=0] Specifies the c property for the new matrix.\n * @param {Number} [d=1] Specifies the d property for the new matrix.\n * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n * @constructor\n **/\nexport default class Matrix2D {\n    constructor(a, b, c, d, tx, ty) {\n        this.setTransform(a, b, c, d, tx, ty);\n\n        // public properties:\n        // assigned in the setValues method.\n        /**\n         * Position (0, 0) in a 3x3 affine transformation matrix.\n         * @property a\n         * @type Number\n         **/\n\n        /**\n         * Position (0, 1) in a 3x3 affine transformation matrix.\n         * @property b\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 0) in a 3x3 affine transformation matrix.\n         * @property c\n         * @type Number\n         **/\n\n        /**\n         * Position (1, 1) in a 3x3 affine transformation matrix.\n         * @property d\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 0) in a 3x3 affine transformation matrix.\n         * @property tx\n         * @type Number\n         **/\n\n        /**\n         * Position (2, 1) in a 3x3 affine transformation matrix.\n         * @property ty\n         * @type Number\n         **/\n    }\n\n    /**\n     * Set current matrix to new absolute matrix.\n     * @method setTransform\n     * @param {Number} [a=1] Specifies the a property for the new matrix.\n     * @param {Number} [b=0] Specifies the b property for the new matrix.\n     * @param {Number} [c=0] Specifies the c property for the new matrix.\n     * @param {Number} [d=1] Specifies the d property for the new matrix.\n     * @param {Number} [tx=0] Specifies the tx property for the new matrix.\n     * @param {Number} [ty=0] Specifies the ty property for the new matrix.\n     * @return {Matrix2D} This instance. Useful for chaining method calls.\n     */\n    setTransform = function(a, b, c, d, tx, ty) {\n        /*eslint eqeqeq:0*/\n        this.a = a == null ? 1 : a;\n        this.b = b || 0;\n        this.c = c || 0;\n        this.d = d == null ? 1 : d;\n        this.tx = tx || 0;\n        this.ty = ty || 0;\n        return this;\n    };\n\n    /**\n     * Reset current matrix to an identity matrix.\n     * @method reset\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    reset = function() {\n        this.a = this.d = 1;\n        this.b = this.c = this.tx = this.ty = 0;\n        return this;\n    };\n\n    /**\n     * Returns an array with current matrix values.\n     * @method toArray\n     * @return {Array} an array with current matrix values.\n     **/\n    toArray = function() {\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\n    };\n\n    /**\n     * Copies all properties from the specified matrix to this matrix.\n     * @method copy\n     * @param {Matrix2D} matrix The matrix to copy properties from.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     */\n    copy = function(matrix) {\n        return this.setTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n    };\n\n    /**\n     * Clones current instance and returning a new matrix.\n     * @method clone\n     * @return {Matrix2D} a clone of the Matrix2D instance.\n     **/\n    clone = function() {\n        return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    };\n\n    /**\n     * Prepends the specified matrix properties to this matrix.\n     * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.\n     * All parameters are required.\n     * @method prepend\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prepend = function(a, b, c, d, tx, ty) {\n        var a1 = this.a;\n        var c1 = this.c;\n        var tx1 = this.tx;\n\n        this.a  = a * a1 + c * this.b;\n        this.b  = b * a1 + d * this.b;\n        this.c  = a * c1 + c * this.d;\n        this.d  = b * c1 + d * this.d;\n        this.tx = a * tx1 + c * this.ty + tx;\n        this.ty = b * tx1 + d * this.ty + ty;\n        return this;\n    };\n\n    /**\n     * Appends the specified matrix properties to this matrix. All parameters are required.\n     * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n     * @method append\n     * @param {Number} a\n     * @param {Number} b\n     * @param {Number} c\n     * @param {Number} d\n     * @param {Number} tx\n     * @param {Number} ty\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    append = function(a, b, c, d, tx, ty) {\n        var a1 = this.a;\n        var b1 = this.b;\n        var c1 = this.c;\n        var d1 = this.d;\n        if (a !== 1 || b !== 0 || c !== 0 || d !== 1) {\n            this.a  = a1 * a + c1 * b;\n            this.b  = b1 * a + d1 * b;\n            this.c  = a1 * c + c1 * d;\n            this.d  = b1 * c + d1 * d;\n        }\n        this.tx = a1 * tx + c1 * ty + this.tx;\n        this.ty = b1 * tx + d1 * ty + this.ty;\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n     * For example, you can use this to generate a matrix representing the transformations of a display object:\n     *\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n     * @method appendTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n        if (rotation % 360) {\n            var r = rotation * DEG_TO_RAD;\n            var cos = Math.cos(r);\n            var sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single append operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n            this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n        } else {\n            this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n        }\n\n        if (regX || regY) {\n            // append the registration offset:\n            this.tx -= regX * this.a + regY * this.c;\n            this.ty -= regX * this.b + regY * this.d;\n        }\n        return this;\n    };\n\n    /**\n     * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.\n     * For example, you could calculate the combined transformation for a child object using:\n     *\n     * \tvar o = myDisplayObject;\n     * \tvar mtx = new createjs.Matrix2D();\n     * \tdo  {\n\t * \t\t// prepend each parent's transformation in turn:\n\t * \t\tmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);\n\t * \t} while (o = o.parent);\n     *\n     * \tNote that the above example would not account for {{#crossLink \"DisplayObject/transformMatrix:property\"}}{{/crossLink}}\n     * \tvalues. See {{#crossLink \"Matrix2D/prependMatrix\"}}{{/crossLink}} for an example that does.\n     * @method prependTransform\n     * @param {Number} x\n     * @param {Number} y\n     * @param {Number} scaleX\n     * @param {Number} scaleY\n     * @param {Number} rotation\n     * @param {Number} skewX\n     * @param {Number} skewY\n     * @param {Number} regX Optional.\n     * @param {Number} regY Optional.\n     * @return {Matrix2D} This matrix. Useful for chaining method calls.\n     **/\n    prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n        if (rotation % 360) {\n            var r = rotation * DEG_TO_RAD;\n            var cos = Math.cos(r);\n            var sin = Math.sin(r);\n        } else {\n            cos = 1;\n            sin = 0;\n        }\n\n        if (regX || regY) {\n            // prepend the registration offset:\n            this.tx -= regX; this.ty -= regY;\n        }\n        if (skewX || skewY) {\n            // TODO: can this be combined into a single prepend operation?\n            skewX *= DEG_TO_RAD;\n            skewY *= DEG_TO_RAD;\n            this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);\n            this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\n        } else {\n            this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y);\n        }\n        return this;\n    };\n}\n"]}]