["f3b72136ba1c29176e9281f51322630df6d60788","3319ba7fe27e8bb0a66d34a991c39bd9349c98f7",["DeviceInfo","EventEmitter","Platform","RCTDeviceEventEmitter","fbjs/lib/invariant"],[41,83,123,172,223],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"names":["DeviceInfo","require","EventEmitter","Platform","RCTDeviceEventEmitter","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","dims","windowPhysicalPixels","JSON","parse","stringify","window","width","scale","height","fontScale","OS","screenPhysicalPixels","screen","emit","dim","type","handler","addListener","removeListener","set","update","module","exports"],"mappings":";AAWA;;AAEA,IAAIA,aAAaC,OAAb,cAAJ;AACA,IAAIC,eAAeD,OAAf,gBAAJ;AACA,IAAIE,WAAWF,OAAX,YAAJ;AACA,IAAIG,wBAAwBH,OAAxB,yBAAJ;;AAEA,IAAII,YAAYJ,OAAZ,sBAAJ;;AAEA,IAAIK,eAAe,IAAIJ,YAAJ,EAAnB;AACA,IAAIK,wBAAwB,KAA5B;AACA,IAAIC,aAAa,EAAjB;;IACMC,U;;;;;;;wBAOOC,I,EAAiC;AAI1C,UAAIA,QAAQA,KAAKC,oBAAjB,EAAuC;AAErCD,eAAOE,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeJ,IAAf,CAAX,CAAP;;AAEA,YAAIC,uBAAuBD,KAAKC,oBAAhC;AACAD,aAAKK,MAAL,GAAc;AACZC,iBAAOL,qBAAqBK,KAArB,GAA6BL,qBAAqBM,KAD7C;AAEZC,kBAAQP,qBAAqBO,MAArB,GAA8BP,qBAAqBM,KAF/C;AAGZA,iBAAON,qBAAqBM,KAHhB;AAIZE,qBAAWR,qBAAqBQ;AAJpB,SAAd;AAMA,YAAIhB,SAASiB,EAAT,KAAgB,SAApB,EAA+B;AAE7B,cAAIC,uBAAuBX,KAAKW,oBAAhC;AACAX,eAAKY,MAAL,GAAc;AACZN,mBAAOK,qBAAqBL,KAArB,GAA6BK,qBAAqBJ,KAD7C;AAEZC,oBAAQG,qBAAqBH,MAArB,GAA8BG,qBAAqBJ,KAF/C;AAGZA,mBAAOI,qBAAqBJ,KAHhB;AAIZE,uBAAWE,qBAAqBF;AAJpB,WAAd;;AAQA,iBAAOT,KAAKW,oBAAZ;AACD,SAZD,MAYO;AACLX,eAAKY,MAAL,GAAcZ,KAAKK,MAAnB;AACD;;AAED,eAAOL,KAAKC,oBAAZ;AACD;;AAED,2BAAcH,UAAd,EAA0BE,IAA1B;AACA,UAAIH,qBAAJ,EAA2B;AAEzBD,qBAAaiB,IAAb,CAAkB,QAAlB,EAA4B;AAC1BR,kBAAQP,WAAWO,MADO;AAE1BO,kBAAQd,WAAWc;AAFO,SAA5B;AAID,OAND,MAMO;AACLf,gCAAwB,IAAxB;AACD;AACF;;;wBAiBUiB,G,EAAqB;AAC9BnB,gBAAUG,WAAWgB,GAAX,CAAV,EAA2B,8BAA8BA,GAAzD;AACA,aAAOhB,WAAWgB,GAAX,CAAP;AACD;;;qCAWCC,I,EACAC,O,EACA;AACArB,gBACE,aAAaoB,IADf,EAEE,4CAFF,EAEgDA,IAFhD;AAIAnB,mBAAaqB,WAAb,CAAyBF,IAAzB,EAA+BC,OAA/B;AACD;;;wCAMCD,I,EACAC,O,EACA;AACArB,gBACE,aAAaoB,IADf,EAEE,mDAFF,EAEuDA,IAFvD;AAIAnB,mBAAasB,cAAb,CAA4BH,IAA5B,EAAkCC,OAAlC;AACD;;;;;AAGHjB,WAAWoB,GAAX,CAAe7B,WAAWS,UAA1B;AACAL,sBAAsBuB,WAAtB,CAAkC,qBAAlC,EAAyD,UAASG,MAAT,EAAiB;AACxErB,aAAWoB,GAAX,CAAeC,MAAf;AACD,CAFD;;AAIAC,OAAOC,OAAP,GAAiBvB,UAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dimensions\n * @flow\n */\n'use strict';\n\nvar DeviceInfo = require('DeviceInfo');\nvar EventEmitter = require('EventEmitter');\nvar Platform = require('Platform');\nvar RCTDeviceEventEmitter = require('RCTDeviceEventEmitter');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar eventEmitter = new EventEmitter();\nvar dimensionsInitialized = false;\nvar dimensions = {};\nclass Dimensions {\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: {[key:string]: any}): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    if (dims && dims.windowPhysicalPixels) {\n      // parse/stringify => Clone hack\n      dims = JSON.parse(JSON.stringify(dims));\n\n      var windowPhysicalPixels = dims.windowPhysicalPixels;\n      dims.window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n      if (Platform.OS === 'android') {\n        // Screen and window dimensions are different on android\n        var screenPhysicalPixels = dims.screenPhysicalPixels;\n        dims.screen = {\n          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n          scale: screenPhysicalPixels.scale,\n          fontScale: screenPhysicalPixels.fontScale,\n        };\n\n        // delete so no callers rely on this existing\n        delete dims.screenPhysicalPixels;\n      } else {\n        dims.screen = dims.window;\n      }\n      // delete so no callers rely on this existing\n      delete dims.windowPhysicalPixels;\n    }\n\n    Object.assign(dimensions, dims);\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', {\n        window: dimensions.window,\n        screen: dimensions.screen\n      });\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `var {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: string,\n    handler: Function\n  ) {\n    invariant(\n      'change' === type,\n      'Trying to subscribe to unknown event: \"%s\"', type\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(\n    type: string,\n    handler: Function\n  ) {\n    invariant(\n      'change' === type,\n      'Trying to remove listener for unknown event: \"%s\"', type\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nDimensions.set(DeviceInfo.Dimensions);\nRCTDeviceEventEmitter.addListener('didUpdateDimensions', function(update) {\n  Dimensions.set(update);\n});\n\nmodule.exports = Dimensions;\n"]}]