["a40424746d5570b640411e146f7d04e8916296ec","55d883acc2d8bb150a5d441834a55ab23f2449d8",["ReactNativeStyleAttributes","UIManager","UnimplementedView","createReactNativeComponentClass","insetsDiffer","matricesDiffer","pointsDiffer","processColor","resolveAssetSource","sizesDiffer","verifyPropTypes","fbjs/lib/warning"],[57,112,158,227,290,336,382,426,476,525,571,613],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/ReactNative/requireNativeComponent.js"],"names":["ReactNativeStyleAttributes","require","UIManager","UnimplementedView","createReactNativeComponentClass","insetsDiffer","matricesDiffer","pointsDiffer","processColor","resolveAssetSource","sizesDiffer","verifyPropTypes","warning","requireNativeComponent","viewName","componentInterface","extraConfig","viewConfig","NativeProps","uiViewClassName","validAttributes","propTypes","__propTypesSecretDontUseThesePlease","baseModuleName","nativeProps","baseModule","key","useAttribute","attribute","differ","TypeToDifferMap","diff","processor","TypeToProcessorMap","process","style","__DEV__","nativeOnly","CATransform3D","CGPoint","CGSize","UIEdgeInsets","processColorArray","colors","map","CGColor","CGColorArray","UIColor","UIColorArray","CGImage","UIImage","RCTImageSource","Color","ColorArray","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule requireNativeComponent\n * @flow\n */\n'use strict';\n\nconst ReactNativeStyleAttributes = require('ReactNativeStyleAttributes');\nconst UIManager = require('UIManager');\nconst UnimplementedView = require('UnimplementedView');\n\nconst createReactNativeComponentClass = require('createReactNativeComponentClass');\nconst insetsDiffer = require('insetsDiffer');\nconst matricesDiffer = require('matricesDiffer');\nconst pointsDiffer = require('pointsDiffer');\nconst processColor = require('processColor');\nconst resolveAssetSource = require('resolveAssetSource');\nconst sizesDiffer = require('sizesDiffer');\nconst verifyPropTypes = require('verifyPropTypes');\nconst warning = require('fbjs/lib/warning');\n\n/**\n * Used to create React components that directly wrap native component\n * implementations.  Config information is extracted from data exported from the\n * UIManager module.  You should also wrap the native component in a\n * hand-written component with full propTypes definitions and other\n * documentation - pass the hand-written component in as `componentInterface` to\n * verify all the native props are documented via `propTypes`.\n *\n * If some native props shouldn't be exposed in the wrapper interface, you can\n * pass null for `componentInterface` and call `verifyPropTypes` directly\n * with `nativePropsToIgnore`;\n *\n * Common types are lined up with the appropriate prop differs with\n * `TypeToDifferMap`.  Non-scalar types not in the map default to `deepDiffer`.\n */\nimport type { ComponentInterface } from 'verifyPropTypes';\n\nfunction requireNativeComponent(\n  viewName: string,\n  componentInterface?: ?ComponentInterface,\n  extraConfig?: ?{nativeOnly?: Object},\n): React$ComponentType<any> | string {\n  const viewConfig = UIManager[viewName];\n  if (!viewConfig || !viewConfig.NativeProps) {\n    warning(false, 'Native component for \"%s\" does not exist', viewName);\n    return UnimplementedView;\n  }\n\n  viewConfig.uiViewClassName = viewName;\n  viewConfig.validAttributes = {};\n\n  // ReactNative `View.propTypes` have been deprecated in favor of\n  // `ViewPropTypes`. In their place a temporary getter has been added with a\n  // deprecated warning message. Avoid triggering that warning here by using\n  // temporary workaround, __propTypesSecretDontUseThesePlease.\n  // TODO (bvaughn) Revert this particular change any time after April 1\n  if (componentInterface) {\n    viewConfig.propTypes =\n      typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object'\n        ? componentInterface.__propTypesSecretDontUseThesePlease\n        : componentInterface.propTypes;\n  } else {\n    viewConfig.propTypes = null;\n  }\n\n  let baseModuleName = viewConfig.baseModuleName;\n  let nativeProps = { ...viewConfig.NativeProps };\n  while (baseModuleName) {\n    const baseModule = UIManager[baseModuleName];\n    if (!baseModule) {\n      warning(false, 'Base module \"%s\" does not exist', baseModuleName);\n      baseModuleName = null;\n    } else {\n      nativeProps = { ...nativeProps, ...baseModule.NativeProps };\n      baseModuleName = baseModule.baseModuleName;\n    }\n  }\n\n  for (const key in nativeProps) {\n    let useAttribute = false;\n    const attribute = {};\n\n    const differ = TypeToDifferMap[nativeProps[key]];\n    if (differ) {\n      attribute.diff = differ;\n      useAttribute = true;\n    }\n\n    const processor = TypeToProcessorMap[nativeProps[key]];\n    if (processor) {\n      attribute.process = processor;\n      useAttribute = true;\n    }\n\n    viewConfig.validAttributes[key] = useAttribute ? attribute : true;\n  }\n\n  // Unfortunately, the current set up puts the style properties on the top\n  // level props object. We also need to add the nested form for API\n  // compatibility. This allows these props on both the top level and the\n  // nested style level. TODO: Move these to nested declarations on the\n  // native side.\n  viewConfig.validAttributes.style = ReactNativeStyleAttributes;\n\n  if (__DEV__) {\n    componentInterface && verifyPropTypes(\n      componentInterface,\n      viewConfig,\n      extraConfig && extraConfig.nativeOnly\n    );\n  }\n\n  return createReactNativeComponentClass(viewConfig);\n}\n\nconst TypeToDifferMap = {\n  // iOS Types\n  CATransform3D: matricesDiffer,\n  CGPoint: pointsDiffer,\n  CGSize: sizesDiffer,\n  UIEdgeInsets: insetsDiffer,\n  // Android Types\n  // (not yet implemented)\n};\n\nfunction processColorArray(colors: ?Array<any>): ?Array<?number> {\n  return colors && colors.map(processColor);\n}\n\nconst TypeToProcessorMap = {\n  // iOS Types\n  CGColor: processColor,\n  CGColorArray: processColorArray,\n  UIColor: processColor,\n  UIColorArray: processColorArray,\n  CGImage: resolveAssetSource,\n  UIImage: resolveAssetSource,\n  RCTImageSource: resolveAssetSource,\n  // Android Types\n  Color: processColor,\n  ColorArray: processColorArray,\n};\n\nmodule.exports = requireNativeComponent;\n"]}]