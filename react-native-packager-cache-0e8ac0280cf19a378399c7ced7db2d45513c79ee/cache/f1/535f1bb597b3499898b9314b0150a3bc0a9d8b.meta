["af6b3914a790a68e08fc6c81fffc49b4154920f7","d2ba9d6cfac3f60e5ccadeed02a90132811f5cd7",["react","react-native","@expo/vector-icons","./colors"],[251,348,393,439],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/utils/helpers.js"],"names":["getMetricMetaInfo","isBetween","caculateDirection","timeToString","metric","info","run","displayName","max","unit","step","type","getIcon","bike","swim","sleep","eat","num","x","y","heading","direction","time","Date","now","date","todayUTC","UTC","getFullYear","getMonth","getDate","toISOString","split"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { View } from 'react-native'\nimport { FontAwesome, MaterialIcons, MaterialCommunityIcons } from '@expo/vector-icons' // 6.2.0\nimport { black } from './colors'\n\nexport function getMetricMetaInfo (metric) {\n    const info = {\n        run: {\n            displayName: 'Run',\n            max: 50,\n            unit: 'miles',\n            step: 1,\n            type: 'steppers',\n            getIcon() {\n                return(\n                    <View>\n                        <MaterialIcons \n                            name='directions-run'\n                            color = {black}\n                            size={35}\n                        />\n                    </View>\n                )\n            }\n        },\n        bike: {\n            displayName: 'Bike',\n            max: 100,\n            unit: 'miles',\n            step: 1,\n            type: 'steppers',\n            getIcon() {\n                return(\n                    <View>\n                        <MaterialCommunityIcons \n                            name = 'bike'\n                            color = {black}\n                            size = {32}\n                        />\n                    </View>\n                )\n            }\n        },\n        swim: {\n            displayName: 'Swim',\n            max: 9900,\n            unit: 'meters',\n            step: 100,\n            type: 'steppers',\n            getIcon() {\n                return(\n                    <View>\n                        <MaterialCommunityIcons \n                            name='swim'\n                            color={black}\n                            size={35}\n                        />\n                    </View>\n                )\n            }\n        },\n        sleep: {\n            displayName: 'Sleep',\n            max: 24,\n            unit: 'hours',\n            step: 1,\n            type: 'slider',\n            getIcon() {\n                return(\n                    <View>\n                        <FontAwesome \n                            name='bed'\n                            color={black}\n                            size={30}\n                        />\n                    </View>\n                )\n            }\n        },\n        eat: {\n            displayName: 'Eat',\n            max: 10,\n            unit: 'rating',\n            step: 1,\n            type: 'slider',\n            getIcon() {\n                return(\n                    <View>\n                        <MaterialCommunityIcons \n                            name='food'\n                            color={black}\n                            size={35}\n                        />\n                    </View>\n                )\n            }\n        },\n    }\n\n    return typeof metric === 'undefined' \n        ? info\n        : info[metric] \n}\n\nexport function isBetween (num, x, y) {\n    if(num >=x && num<= y) {\n        return true\n    }\n    return false\n}\n\nexport function caculateDirection (heading) {\n    let direction = ''\n\n    if(isBetween(heading, 0, 22.5)) {\n        direction = 'North'\n    } else if(isBetween(heading, 22.5, 67.5)) {\n        direction = 'North East'\n    } else if(isBetween(heading, 67.5, 112.5)) {\n        direction = 'East'\n    } else if(isBetween(heading, 112.5, 157.5)) {\n        direction = 'South East'\n    } else if(isBetween(heading, 157.5, 202.5)) {\n        direction = 'South'\n    } else if(isBetween(heading, 202.5, 247.5)) {\n        direction = 'South West'\n    } else if(isBetween(heading, 247.5, 292.5)) {\n        direction = 'West'\n    } else if(isBetween(heading, 292.5, 337.5)) {\n        direction = 'North West'\n    } else if(isBetween(heading, 337.5, 360)) {\n        direction = 'North'\n    } else {\n        direction = 'Calculating'\n    }\n    return direction\n}\n\nexport function timeToString (time = Date.now()) {\n    const date = new Date(time)\n    const todayUTC = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()))\n    return todayUTC.toISOString.split('T')[0]\n}\n"]}]