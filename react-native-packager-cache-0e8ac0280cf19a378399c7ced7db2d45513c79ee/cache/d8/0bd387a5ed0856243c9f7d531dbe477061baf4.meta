["86b3a6a3ec17234f1a59cd6a3973ce6200e541f7","8baf1e02e8ee689f61b2c2db2947dc66fe240d31",["EventEmitter","Platform","React","StyleSheet","RCTLog","infoLog","openFileInEditor","parseErrorStack","stringifySafe","symbolicateStackTrace","Text","TouchableHighlight","View","ScrollView"],[44,84,117,152,188,222,265,316,364,418,3727,3771,3815,4467,4511,5505,5541,5585,5629,10029,10069],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/ReactNative/YellowBox.js"],"names":["EventEmitter","require","Platform","React","StyleSheet","RCTLog","infoLog","openFileInEditor","parseErrorStack","stringifySafe","symbolicateStackTrace","_warningEmitter","_warningMap","Map","IGNORED_WARNINGS","__DEV__","console","error","warn","apply","arguments","startsWith","updateWarningMap","isTesting","disableYellowBox","setWarningHandler","args","sprintf","format","index","replace","String","argCount","match","length","warning","slice","map","join","warningInfo","get","count","Error","framesToPop","set","stacktrace","symbolicated","emit","ensureSymbolicatedWarning","prevWarningInfo","then","nextWarningInfo","stack","isWarningIgnored","isIgnored","some","ignoredWarning","Array","isArray","ignoredYellowBox","ignorePrefix","WarningRow","onPress","Text","TouchableHighlight","View","countText","styles","listRowCount","listRow","listRowContent","listRowText","StackRow","frame","file","lineNumber","fileName","fileParts","split","openInEditorButton","bind","inspectorCountText","WarningInspector","stacktraceVisible","onDismiss","onDismissAll","onMinimize","toggleStacktrace","ScrollView","countSentence","stacktraceList","ii","inspector","inspectorCount","inspectorButtonText","inspectorWarning","inspectorWarningText","inspectorButtons","inspectorButton","YellowBox","props","context","state","inspecting","warningMap","dismissWarning","delete","clear","setState","scheduled","_listener","addListener","setImmediate","remove","size","rows","forEach","push","listStyle","list","height","Math","min","rowGutter","rowHeight","fullScreen","warnings","indexOf","Component","backgroundColor","opacity","textColor","elevation","OS","Number","MAX_SAFE_INTEGER","undefined","create","width","position","paddingTop","flexDirection","flex","paddingVertical","paddingBottom","color","fontSize","textAlign","padding","justifyContent","paddingHorizontal","fontWeight","left","right","bottom","marginTop","top","marginLeft","marginRight","module","exports"],"mappings":";;AAYA;;AAEA,IAAMA,eAAeC,OAAf,gBAAN;AACA,IAAMC,WAAWD,OAAX,YAAN;AACA,IAAME,QAAQF,OAAR,SAAN;AACA,IAAMG,aAAaH,OAAb,cAAN;AACA,IAAMI,SAASJ,OAAT,UAAN;;AAEA,IAAMK,UAAUL,OAAV,WAAN;AACA,IAAMM,mBAAmBN,OAAnB,oBAAN;AACA,IAAMO,kBAAkBP,OAAlB,mBAAN;AACA,IAAMQ,gBAAgBR,OAAhB,iBAAN;AACA,IAAMS,wBAAwBT,OAAxB,yBAAN;;AAWA,IAAMU,kBAAkB,IAAIX,YAAJ,EAAxB;AACA,IAAMY,cAAwC,IAAIC,GAAJ,EAA9C;AACA,IAAMC,mBAAkC,EAAxC;;AA2BA,IAAIC,OAAJ,EAAa;AAAA,iBACWC,OADX;AAAA,MACJC,KADI,YACJA,KADI;AAAA,MACGC,IADH,YACGA,IADH;;;AAGVF,SAAD,CAAeC,KAAf,GAAuB,YAAW;AAChCA,UAAME,KAAN,CAAYH,OAAZ,EAAqBI,SAArB;;AAEA,QAAI,OAAOA,UAAU,CAAV,CAAP,KAAwB,QAAxB,IACAA,UAAU,CAAV,EAAaC,UAAb,CAAwB,WAAxB,CADJ,EAC0C;AACxCC,uBAAiBH,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B;AACD;AACF,GAPD;;AASCJ,SAAD,CAAeE,IAAf,GAAsB,YAAW;AAC/BA,SAAKC,KAAL,CAAWH,OAAX,EAAoBI,SAApB;AACAE,qBAAiBH,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B;AACD,GAHD;;AAKA,MAAIlB,SAASqB,SAAb,EAAwB;AACrBP,WAAD,CAAeQ,gBAAf,GAAkC,IAAlC;AACD;;AAEDnB,SAAOoB,iBAAP,CAAyB,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AACpCJ,qBAAiBH,KAAjB,CAAuB,IAAvB,EAA6BO,IAA7B;AACD,GAFD;AAGD;;AAWD,SAASC,OAAT,CAAiBC,MAAjB,EAAkC;AAAA,qCAANF,IAAM;AAANA,QAAM;AAAA;;AAChC,MAAIG,QAAQ,CAAZ;AACA,SAAOD,OAAOE,OAAP,CAAe,KAAf,EAAsB;AAAA,WAASJ,KAAKG,OAAL,CAAT;AAAA,GAAtB,CAAP;AACD;;AAED,SAASP,gBAAT,CAA0BM,MAA1B,EAAiD;AAC/C,MAAIZ,QAAQQ,gBAAZ,EAA8B;AAC5B;AACD;;AAEDI,WAASG,OAAOH,MAAP,CAAT;AACA,MAAMI,WAAW,CAACJ,OAAOK,KAAP,CAAa,KAAb,KAAuB,EAAxB,EAA4BC,MAA7C;;AAN+C,qCAAZR,IAAY;AAAZA,QAAY;AAAA;;AAO/C,MAAMS,UAAU,CACdR,0BAAQC,MAAR,wCAAmBF,KAAKU,KAAL,CAAW,CAAX,EAAcJ,QAAd,CAAnB,GADc,wCAEXN,KAAKU,KAAL,CAAWJ,QAAX,EAAqBK,GAArB,CAAyB5B,aAAzB,CAFW,GAGd6B,IAHc,CAGT,GAHS,CAAhB;;AAKA,MAAIH,QAAQd,UAAR,CAAmB,UAAnB,CAAJ,EAAoC;AAClC;AACD;;AAED,MAAMkB,cAAc3B,YAAY4B,GAAZ,CAAgBL,OAAhB,CAApB;AACA,MAAII,WAAJ,EAAiB;AACfA,gBAAYE,KAAZ,IAAqB,CAArB;AACD,GAFD,MAEO;AACL,QAAMxB,SAAa,IAAIyB,KAAJ,EAAnB;AACAzB,WAAM0B,WAAN,GAAoB,CAApB;;AAEA/B,gBAAYgC,GAAZ,CAAgBT,OAAhB,EAAyB;AACvBM,aAAO,CADgB;AAEvBI,kBAAYrC,gBAAgBS,MAAhB,CAFW;AAGvB6B,oBAAc;AAHS,KAAzB;AAKD;;AAEDnC,kBAAgBoC,IAAhB,CAAqB,SAArB,EAAgCnC,WAAhC;AACD;;AAED,SAASoC,yBAAT,CAAmCb,OAAnC,EAA0D;AACxD,MAAMc,kBAAkBrC,YAAY4B,GAAZ,CAAgBL,OAAhB,CAAxB;AACA,MAAI,CAACc,eAAD,IAAoBA,gBAAgBH,YAAxC,EAAsD;AACpD;AACD;AACDG,kBAAgBH,YAAhB,GAA+B,IAA/B;;AAEApC,wBAAsBuC,gBAAgBJ,UAAtC,EAAkDK,IAAlD,CACE,iBAAS;AACP,QAAMC,kBAAkBvC,YAAY4B,GAAZ,CAAgBL,OAAhB,CAAxB;AACA,QAAIgB,eAAJ,EAAqB;AACnBA,sBAAgBN,UAAhB,GAA6BO,KAA7B;AACAzC,sBAAgBoC,IAAhB,CAAqB,SAArB,EAAgCnC,WAAhC;AACD;AACF,GAPH,EAQE,iBAAS;AACP,QAAMuC,kBAAkBvC,YAAY4B,GAAZ,CAAgBL,OAAhB,CAAxB;AACA,QAAIgB,eAAJ,EAAqB;AACnB7C,cAAQ,sCAAR,EAAgD6B,OAAhD,EAAyDlB,KAAzD;AACAN,sBAAgBoC,IAAhB,CAAqB,SAArB,EAAgCnC,WAAhC;AACD;AACF,GAdH;AAgBD;;AAED,SAASyC,gBAAT,CAA0BlB,OAA1B,EAAoD;AAClD,MAAMmB,YACJxC,iBAAiByC,IAAjB,CACE,UAACC,cAAD;AAAA,WAA4BrB,QAAQd,UAAR,CAAmBmC,cAAnB,CAA5B;AAAA,GADF,CADF;;AAKA,MAAIF,SAAJ,EAAe;AACb,WAAO,IAAP;AACD;;AAGD,SACEG,MAAMC,OAAN,CAAc1C,QAAQ2C,gBAAtB,KACA3C,QAAQ2C,gBAAR,CAAyBJ,IAAzB,CACE;AAAA,WAAgBpB,QAAQd,UAAR,CAAmBU,OAAO6B,YAAP,CAAnB,CAAhB;AAAA,GADF,CAFF;AAMD;;AAED,IAAMC,aAAa,SAAbA,UAAa,OAA+B;AAAA,MAA7BpB,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBN,OAAsB,QAAtBA,OAAsB;AAAA,MAAb2B,OAAa,QAAbA,OAAa;;AAChD,MAAMC,OAAO9D,OAAP,QAAN;AACA,MAAM+D,qBAAqB/D,OAArB,sBAAN;AACA,MAAMgE,OAAOhE,OAAP,QAAN;;AAEA,MAAMiE,YAAYzB,QAAQ,CAAR,GAChB;AAAC,QAAD;AAAA,MAAM,OAAO0B,OAAOC,YAApB;AAAmC,UAAM3B,KAAN,GAAc;AAAjD,GADgB,GAEhB,IAFF;;AAIA,SACE;AAAC,QAAD;AAAA,MAAM,OAAO0B,OAAOE,OAApB;AACE;AAAC,wBAAD;AAAA;AACE,uBAAe,GADjB;AAEE,iBAASP,OAFX;AAGE,eAAOK,OAAOG,cAHhB;AAIE,uBAAc,aAJhB;AAKE;AAAC,YAAD;AAAA,UAAM,OAAOH,OAAOI,WAApB,EAAiC,eAAe,CAAhD;AACGL,iBADH;AAEG/B;AAFH;AALF;AADF,GADF;AAcD,CAvBD;;AA0BA,IAAMqC,WAAW,SAAXA,QAAW,QAA4B;AAAA,MAA1BC,KAA0B,SAA1BA,KAA0B;;AAC3C,MAAMV,OAAO9D,OAAP,QAAN;AACA,MAAM+D,qBAAqB/D,OAArB,sBAAN;AAF2C,MAGpCyE,IAHoC,GAGhBD,KAHgB,CAGpCC,IAHoC;AAAA,MAG9BC,UAH8B,GAGhBF,KAHgB,CAG9BE,UAH8B;;AAI3C,MAAIC,iBAAJ;AACA,MAAIF,IAAJ,EAAU;AACR,QAAMG,YAAYH,KAAKI,KAAL,CAAW,GAAX,CAAlB;AACAF,eAAWC,UAAUA,UAAU3C,MAAV,GAAmB,CAA7B,CAAX;AACD,GAHD,MAGO;AACL0C,eAAW,gBAAX;AACD;;AAED,SACE;AAAC,sBAAD;AAAA;AACE,qBAAe,GADjB;AAEE,aAAOT,OAAOY,kBAFhB;AAGE,qBAAc,aAHhB;AAIE,eAASxE,iBAAiByE,IAAjB,CAAsB,IAAtB,EAA4BN,IAA5B,EAAkCC,UAAlC,CAJX;AAKE;AAAC,UAAD;AAAA,QAAM,OAAOR,OAAOc,kBAApB;AACGL,cADH;AAAA;AACcD;AADd;AALF,GADF;AAWD,CAvBD;;AAyBA,IAAMO,mBAAmB,SAAnBA,gBAAmB,QAQnB;AAAA,MAPJ3C,WAOI,SAPJA,WAOI;AAAA,MANJJ,OAMI,SANJA,OAMI;AAAA,MALJgD,iBAKI,SALJA,iBAKI;AAAA,MAJJC,SAII,SAJJA,SAII;AAAA,MAHJC,YAGI,SAHJA,YAGI;AAAA,MAFJC,UAEI,SAFJA,UAEI;AAAA,MADJC,gBACI,SADJA,gBACI;;AACJ,MAAMC,aAAavF,OAAb,cAAN;AACA,MAAM8D,OAAO9D,OAAP,QAAN;AACA,MAAM+D,qBAAqB/D,OAArB,sBAAN;AACA,MAAMgE,OAAOhE,OAAP,QAAN;;AAJI,cAKwBsC,eAAe,EALvC;AAAA,MAKGE,KALH,SAKGA,KALH;AAAA,MAKUI,UALV,SAKUA,UALV;;AAOJ,MAAM4C,gBACJ,yBAAyBhD,KAAzB,GAAiC,OAAjC,IAA4CA,QAAQ,CAAR,GAAY,GAAZ,GAAkB,EAA9D,IAAoE,GADtE;;AAGA,MAAIiD,uBAAJ;AACA,MAAIP,qBAAqBtC,UAAzB,EAAqC;AACnC6C,qBACE;AAAC,UAAD;AAAA,QAAM,OAAOvB,OAAOuB,cAApB;AACG7C,iBAAWR,GAAX,CAAe,UAACoC,KAAD,EAAQkB,EAAR;AAAA,eAAe,oBAAC,QAAD,IAAU,OAAOlB,KAAjB,EAAwB,KAAKkB,EAA7B,GAAf;AAAA,OAAf;AADH,KADF;AAKD;;AAED,SACE;AAAC,QAAD;AAAA,MAAM,OAAOxB,OAAOyB,SAApB;AACE;AAAC,UAAD;AAAA,QAAM,OAAOzB,OAAO0B,cAApB;AACE;AAAC,YAAD;AAAA,UAAM,OAAO1B,OAAOc,kBAApB;AAAyCQ;AAAzC,OADF;AAEE;AAAC,0BAAD;AAAA,UAAoB,SAASF,gBAA7B,EAA+C,eAAc,aAA7D;AACE;AAAC,cAAD;AAAA,YAAM,OAAOpB,OAAO2B,mBAApB;AACGX,8BAAoB,QAApB,GAAiC,QADpC;AAAA;AAAA;AADF;AAFF,KADF;AASE;AAAC,gBAAD;AAAA,QAAY,OAAOhB,OAAO4B,gBAA1B;AACGL,oBADH;AAEE;AAAC,YAAD;AAAA,UAAM,OAAOvB,OAAO6B,oBAApB;AAA2C7D;AAA3C;AAFF,KATF;AAaE;AAAC,UAAD;AAAA,QAAM,OAAOgC,OAAO8B,gBAApB;AACE;AAAC,0BAAD;AAAA;AACE,yBAAe,GADjB;AAEE,mBAASX,UAFX;AAGE,iBAAOnB,OAAO+B,eAHhB;AAIE,yBAAc,aAJhB;AAKE;AAAC,cAAD;AAAA,YAAM,OAAO/B,OAAO2B,mBAApB;AAAA;AAAA;AALF,OADF;AAUE;AAAC,0BAAD;AAAA;AACE,yBAAe,GADjB;AAEE,mBAASV,SAFX;AAGE,iBAAOjB,OAAO+B,eAHhB;AAIE,yBAAc,aAJhB;AAKE;AAAC,cAAD;AAAA,YAAM,OAAO/B,OAAO2B,mBAApB;AAAA;AAAA;AALF,OAVF;AAmBE;AAAC,0BAAD;AAAA;AACE,yBAAe,GADjB;AAEE,mBAAST,YAFX;AAGE,iBAAOlB,OAAO+B,eAHhB;AAIE,yBAAc,aAJhB;AAKE;AAAC,cAAD;AAAA,YAAM,OAAO/B,OAAO2B,mBAApB;AAAA;AAAA;AALF;AAnBF;AAbF,GADF;AA6CD,CAxED;;IA0EMK,S;;;AAQJ,qBAAYC,KAAZ,EAA0BC,OAA1B,EAA0C;AAAA;;AAAA,kIAClCD,KADkC,EAC3BC,OAD2B;;AAExC,UAAKC,KAAL,GAAa;AACXC,kBAAY,IADD;AAEXpB,yBAAmB,KAFR;AAGXqB,kBAAY5F;AAHD,KAAb;AAKA,UAAK6F,cAAL,GAAsB,mBAAW;AAAA,wBACE,MAAKH,KADP;AAAA,UACxBC,UADwB,eACxBA,UADwB;AAAA,UACZC,UADY,eACZA,UADY;;AAE/B,UAAIrE,OAAJ,EAAa;AACXqE,mBAAWE,MAAX,CAAkBvE,OAAlB;AACD,OAFD,MAEO;AACLqE,mBAAWG,KAAX;AACD;AACD,YAAKC,QAAL,CAAc;AACZL,oBAAapE,WAAWoE,eAAepE,OAA3B,GAAsCoE,UAAtC,GAAmD,IADnD;AAEZC;AAFY,OAAd;AAID,KAXD;AAPwC;AAmBzC;;;;wCAUmB;AAAA;;AAClB,UAAIK,YAAY,IAAhB;AACA,WAAKC,SAAL,GAAiBnG,gBAAgBoG,WAAhB,CAA4B,SAA5B,EAAuC,sBAAc;AAGpEF,oBAAYA,aAAaG,aAAa,YAAM;AAC1CH,sBAAY,IAAZ;AACA,iBAAKD,QAAL,CAAc;AACZJ;AADY,WAAd;AAGD,SALwB,CAAzB;AAMD,OATgB,CAAjB;AAUD;;;yCAEoB;AAAA,UACZD,UADY,GACE,KAAKD,KADP,CACZC,UADY;;AAEnB,UAAIA,cAAc,IAAlB,EAAwB;AACtBvD,kCAA0BuD,UAA1B;AACD;AACF;;;2CAEsB;AACrB,UAAI,KAAKO,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAeG,MAAf;AACD;AACF;;;6BAEQ;AAAA;;AACP,UAAIjG,QAAQQ,gBAAR,IAA4B,KAAK8E,KAAL,CAAWE,UAAX,CAAsBU,IAAtB,KAA+B,CAA/D,EAAkE;AAChE,eAAO,IAAP;AACD;AACD,UAAM1B,aAAavF,OAAb,cAAN;AACA,UAAMgE,OAAOhE,OAAP,QAAN;;AALO,mBAOiC,KAAKqG,KAPtC;AAAA,UAOAC,UAPA,UAOAA,UAPA;AAAA,UAOYpB,iBAPZ,UAOYA,iBAPZ;;AAQP,UAAMS,YAAYW,eAAe,IAAf,GAChB,oBAAC,gBAAD;AACE,qBAAa,KAAKD,KAAL,CAAWE,UAAX,CAAsBhE,GAAtB,CAA0B+D,UAA1B,CADf;AAEE,iBAASA,UAFX;AAGE,2BAAmBpB,iBAHrB;AAIE,mBAAW;AAAA,iBAAM,OAAKsB,cAAL,CAAoBF,UAApB,CAAN;AAAA,SAJb;AAKE,sBAAc;AAAA,iBAAM,OAAKE,cAAL,CAAoB,IAApB,CAAN;AAAA,SALhB;AAME,oBAAY;AAAA,iBAAM,OAAKG,QAAL,CAAc,EAACL,YAAY,IAAb,EAAd,CAAN;AAAA,SANd;AAOE,0BAAkB;AAAA,iBAAM,OAAKK,QAAL,CAAc,EAACzB,mBAAmB,CAACA,iBAArB,EAAd,CAAN;AAAA;AAPpB,QADgB,GAUhB,IAVF;;AAYA,UAAMgC,OAAO,EAAb;AACA,WAAKb,KAAL,CAAWE,UAAX,CAAsBY,OAAtB,CAA8B,UAAC7E,WAAD,EAAcJ,OAAd,EAA0B;AACtD,YAAI,CAACkB,iBAAiBlB,OAAjB,CAAL,EAAgC;AAC9BgF,eAAKE,IAAL,CACE,oBAAC,UAAD;AACE,iBAAKlF,OADP;AAEE,mBAAOI,YAAYE,KAFrB;AAGE,qBAASN,OAHX;AAIE,qBAAS;AAAA,qBAAM,OAAKyE,QAAL,CAAc,EAACL,YAAYpE,OAAb,EAAd,CAAN;AAAA,aAJX;AAKE,uBAAW;AAAA,qBAAM,OAAKsE,cAAL,CAAoBtE,OAApB,CAAN;AAAA;AALb,YADF;AASD;AACF,OAZD;;AAcA,UAAMmF,YAAY,CAChBnD,OAAOoD,IADS,EAGhB,EAACC,QAAQC,KAAKC,GAAL,CAASP,KAAKjF,MAAd,EAAsB,GAAtB,KAA8ByF,YAAYC,SAA1C,CAAT,EAHgB,CAAlB;AAKA,aACE;AAAC,YAAD;AAAA,UAAM,OAAOhC,YAAYzB,OAAO0D,UAAnB,GAAgCP,SAA7C;AACE;AAAC,oBAAD;AAAA,YAAY,OAAOA,SAAnB,EAA8B,cAAc,KAA5C;AACGH;AADH,SADF;AAIGvB;AAJH,OADF;AAQD;;;mCAnFqBkC,Q,EAA+B;AACnDA,eAASV,OAAT,CAAiB,UAACjF,OAAD,EAAqB;AACpC,YAAIrB,iBAAiBiH,OAAjB,CAAyB5F,OAAzB,MAAsC,CAAC,CAA3C,EAA8C;AAC5CrB,2BAAiBuG,IAAjB,CAAsBlF,OAAtB;AACD;AACF,OAJD;AAKD;;;EAnCqBhC,MAAM6H,S;;AAmH9B,IAAMC,kBAAkB,SAAlBA,eAAkB;AAAA,SAAW,wBAAwBC,OAAxB,GAAkC,GAA7C;AAAA,CAAxB;AACA,IAAMC,YAAY,OAAlB;AACA,IAAMR,YAAY,CAAlB;AACA,IAAMC,YAAY,EAAlB;;AAMA,IAAMQ,YAAYlI,SAASmI,EAAT,KAAgB,SAAhB,GAA4BC,OAAOC,gBAAnC,GAAsDC,SAAxE;;AAEA,IAAIrE,SAAS/D,WAAWqI,MAAX,CAAkB;AAC7BZ,cAAY;AACVL,YAAQ,MADE;AAEVkB,WAAO,MAFG;AAGVN,eAAWA,SAHD;AAIVO,cAAU;AAJA,GADiB;AAO7B/C,aAAW;AACTqC,qBAAiBA,gBAAgB,IAAhB,CADR;AAETT,YAAQ,MAFC;AAGToB,gBAAY,CAHH;AAITR,eAAUA;AAJD,GAPkB;AAa7BnC,oBAAkB;AAChB4C,mBAAe;AADC,GAbW;AAgB7B3C,mBAAiB;AACf4C,UAAM,CADS;AAEfC,qBAAiB,EAFF;AAGfd,qBAAiBA,gBAAgB,CAAhB;AAHF,GAhBY;AAqB7BvC,kBAAgB;AACdsD,mBAAe;AADD,GArBa;AAwB7BlD,uBAAqB;AACnBmD,WAAOd,SADY;AAEnBe,cAAU,EAFS;AAGnBhB,aAAS,GAHU;AAInBiB,eAAW;AAJQ,GAxBQ;AA8B7BpE,sBAAoB;AAClB6D,gBAAY,CADM;AAElBI,mBAAe;AAFG,GA9BS;AAkC7BnD,kBAAgB;AACduD,aAAS,EADK;AAEdJ,mBAAe,CAFD;AAGdH,mBAAe,KAHD;AAIdQ,oBAAgB;AAJF,GAlCa;AAwC7BpE,sBAAoB;AAClBgE,WAAOd,SADW;AAElBe,cAAU;AAFQ,GAxCS;AA4C7BnD,oBAAkB;AAChB+C,UAAM,CADU;AAEhBQ,uBAAmB;AAFH,GA5CW;AAgD7BtD,wBAAsB;AACpBiD,WAAOd,SADa;AAEpBe,cAAU,EAFU;AAGpBK,gBAAY;AAHQ,GAhDO;AAqD7BhC,QAAM;AACJU,qBAAiB,aADb;AAEJU,cAAU,UAFN;AAGJa,UAAM,CAHF;AAIJC,WAAO,CAJH;AAKJC,YAAQ,CALJ;AAMJtB,eAAWA;AANP,GArDuB;AA6D7B/D,WAAS;AACP4D,qBAAiBA,gBAAgB,IAAhB,CADV;AAEPT,YAAQI,SAFD;AAGP+B,eAAWhC;AAHJ,GA7DoB;AAkE7BrD,kBAAgB;AACdwE,UAAM;AADQ,GAlEa;AAqE7B1E,gBAAc;AACZ6E,WAAO;AADK,GArEe;AAwE7B1E,eAAa;AACX0E,WAAOd,SADI;AAEXQ,cAAU,UAFC;AAGXa,UAAM,CAHK;AAIXI,SAAK1J,SAASmI,EAAT,KAAgB,SAAhB,GAA4B,CAA5B,GAAgC,CAJ1B;AAKXwB,gBAAY,EALD;AAMXC,iBAAa;AANF;AAxEgB,CAAlB,CAAb;;AAkFAC,OAAOC,OAAP,GAAiB7D,SAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule YellowBox\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('EventEmitter');\nconst Platform = require('Platform');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\nconst RCTLog = require('RCTLog');\n\nconst infoLog = require('infoLog');\nconst openFileInEditor = require('openFileInEditor');\nconst parseErrorStack = require('parseErrorStack');\nconst stringifySafe = require('stringifySafe');\nconst symbolicateStackTrace = require('symbolicateStackTrace');\n\nimport type EmitterSubscription from 'EmitterSubscription';\nimport type {StackFrame} from 'parseErrorStack';\n\ntype WarningInfo = {\n  count: number,\n  stacktrace: Array<StackFrame>,\n  symbolicated: boolean,\n};\n\nconst _warningEmitter = new EventEmitter();\nconst _warningMap: Map<string, WarningInfo> = new Map();\nconst IGNORED_WARNINGS: Array<string> = [];\n\n/**\n * YellowBox renders warnings at the bottom of the app being developed.\n *\n * Warnings help guard against subtle yet significant issues that can impact the\n * quality of the app. This \"in your face\" style of warning allows developers to\n * notice and correct these issues as quickly as possible.\n *\n * By default, the warning box is enabled in `__DEV__`. Set the following flag\n * to disable it (and call `console.warn` to update any rendered <YellowBox>):\n *\n *   console.disableYellowBox = true;\n *   console.warn('YellowBox is disabled.');\n *\n * Ignore specific warnings by calling:\n *\n *   YellowBox.ignoreWarnings(['Warning: ...']);\n *\n * (DEPRECATED) Warnings can be ignored programmatically by setting the array:\n *\n *   console.ignoredYellowBox = ['Warning: ...'];\n *\n * Strings in `console.ignoredYellowBox` can be a prefix of the warning that\n * should be ignored.\n */\n\nif (__DEV__) {\n  const {error, warn} = console;\n\n  (console: any).error = function() {\n    error.apply(console, arguments);\n    // Show yellow box for the `warning` module.\n    if (typeof arguments[0] === 'string' &&\n        arguments[0].startsWith('Warning: ')) {\n      updateWarningMap.apply(null, arguments);\n    }\n  };\n\n  (console: any).warn = function() {\n    warn.apply(console, arguments);\n    updateWarningMap.apply(null, arguments);\n  };\n\n  if (Platform.isTesting) {\n    (console: any).disableYellowBox = true;\n  }\n\n  RCTLog.setWarningHandler((...args) => {\n    updateWarningMap.apply(null, args);\n  });\n}\n\n/**\n * Simple function for formatting strings.\n *\n * Replaces placeholders with values passed as extra arguments\n *\n * @param {string} format the base string\n * @param ...args the values to insert\n * @return {string} the replaced string\n */\nfunction sprintf(format, ...args) {\n  let index = 0;\n  return format.replace(/%s/g, match => args[index++]);\n}\n\nfunction updateWarningMap(format, ...args): void {\n  if (console.disableYellowBox) {\n    return;\n  }\n\n  format = String(format);\n  const argCount = (format.match(/%s/g) || []).length;\n  const warning = [\n    sprintf(format, ...args.slice(0, argCount)),\n    ...args.slice(argCount).map(stringifySafe),\n  ].join(' ');\n\n  if (warning.startsWith('(ADVICE)')) {\n    return;\n  }\n\n  const warningInfo = _warningMap.get(warning);\n  if (warningInfo) {\n    warningInfo.count += 1;\n  } else {\n    const error: any = new Error();\n    error.framesToPop = 2;\n\n    _warningMap.set(warning, {\n      count: 1,\n      stacktrace: parseErrorStack(error),\n      symbolicated: false,\n    });\n  }\n\n  _warningEmitter.emit('warning', _warningMap);\n}\n\nfunction ensureSymbolicatedWarning(warning: string): void {\n  const prevWarningInfo = _warningMap.get(warning);\n  if (!prevWarningInfo || prevWarningInfo.symbolicated) {\n    return;\n  }\n  prevWarningInfo.symbolicated = true;\n\n  symbolicateStackTrace(prevWarningInfo.stacktrace).then(\n    stack => {\n      const nextWarningInfo = _warningMap.get(warning);\n      if (nextWarningInfo) {\n        nextWarningInfo.stacktrace = stack;\n        _warningEmitter.emit('warning', _warningMap);\n      }\n    },\n    error => {\n      const nextWarningInfo = _warningMap.get(warning);\n      if (nextWarningInfo) {\n        infoLog('Failed to symbolicate warning, \"%s\":', warning, error);\n        _warningEmitter.emit('warning', _warningMap);\n      }\n    }\n  );\n}\n\nfunction isWarningIgnored(warning: string): boolean {\n  const isIgnored =\n    IGNORED_WARNINGS.some(\n      (ignoredWarning: string) => warning.startsWith(ignoredWarning)\n    );\n\n  if (isIgnored) {\n    return true;\n  }\n\n  // DEPRECATED\n  return (\n    Array.isArray(console.ignoredYellowBox) &&\n    console.ignoredYellowBox.some(\n      ignorePrefix => warning.startsWith(String(ignorePrefix))\n    )\n  );\n}\n\nconst WarningRow = ({count, warning, onPress}) => {\n  const Text = require('Text');\n  const TouchableHighlight = require('TouchableHighlight');\n  const View = require('View');\n\n  const countText = count > 1 ?\n    <Text style={styles.listRowCount}>{'(' + count + ') '}</Text> :\n    null;\n\n  return (\n    <View style={styles.listRow}>\n      <TouchableHighlight\n        activeOpacity={0.5}\n        onPress={onPress}\n        style={styles.listRowContent}\n        underlayColor=\"transparent\">\n        <Text style={styles.listRowText} numberOfLines={2}>\n          {countText}\n          {warning}\n        </Text>\n      </TouchableHighlight>\n    </View>\n  );\n};\n\ntype StackRowProps = { frame: StackFrame };\nconst StackRow = ({frame}: StackRowProps) => {\n  const Text = require('Text');\n  const TouchableHighlight = require('TouchableHighlight');\n  const {file, lineNumber} = frame;\n  let fileName;\n  if (file) {\n    const fileParts = file.split('/');\n    fileName = fileParts[fileParts.length - 1];\n  } else {\n    fileName = '<unknown file>';\n  }\n\n  return (\n    <TouchableHighlight\n      activeOpacity={0.5}\n      style={styles.openInEditorButton}\n      underlayColor=\"transparent\"\n      onPress={openFileInEditor.bind(null, file, lineNumber)}>\n      <Text style={styles.inspectorCountText}>\n        {fileName}:{lineNumber}\n      </Text>\n    </TouchableHighlight>\n  );\n};\n\nconst WarningInspector = ({\n  warningInfo,\n  warning,\n  stacktraceVisible,\n  onDismiss,\n  onDismissAll,\n  onMinimize,\n  toggleStacktrace,\n}) => {\n  const ScrollView = require('ScrollView');\n  const Text = require('Text');\n  const TouchableHighlight = require('TouchableHighlight');\n  const View = require('View');\n  const {count, stacktrace} = warningInfo || {};\n\n  const countSentence =\n    'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';\n\n  let stacktraceList;\n  if (stacktraceVisible && stacktrace) {\n    stacktraceList = (\n      <View style={styles.stacktraceList}>\n        {stacktrace.map((frame, ii) => <StackRow frame={frame} key={ii} />)}\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.inspector}>\n      <View style={styles.inspectorCount}>\n        <Text style={styles.inspectorCountText}>{countSentence}</Text>\n        <TouchableHighlight onPress={toggleStacktrace} underlayColor=\"transparent\">\n          <Text style={styles.inspectorButtonText}>\n            {stacktraceVisible ? '\\u{25BC}' : '\\u{25B6}'} Stacktrace\n          </Text>\n        </TouchableHighlight>\n      </View>\n      <ScrollView style={styles.inspectorWarning}>\n        {stacktraceList}\n        <Text style={styles.inspectorWarningText}>{warning}</Text>\n      </ScrollView>\n      <View style={styles.inspectorButtons}>\n        <TouchableHighlight\n          activeOpacity={0.5}\n          onPress={onMinimize}\n          style={styles.inspectorButton}\n          underlayColor=\"transparent\">\n          <Text style={styles.inspectorButtonText}>\n            Minimize\n          </Text>\n        </TouchableHighlight>\n        <TouchableHighlight\n          activeOpacity={0.5}\n          onPress={onDismiss}\n          style={styles.inspectorButton}\n          underlayColor=\"transparent\">\n          <Text style={styles.inspectorButtonText}>\n            Dismiss\n          </Text>\n        </TouchableHighlight>\n        <TouchableHighlight\n          activeOpacity={0.5}\n          onPress={onDismissAll}\n          style={styles.inspectorButton}\n          underlayColor=\"transparent\">\n          <Text style={styles.inspectorButtonText}>\n            Dismiss All\n          </Text>\n        </TouchableHighlight>\n      </View>\n    </View>\n  );\n};\n\nclass YellowBox extends React.Component<mixed, {\n  stacktraceVisible: boolean,\n  inspecting: ?string,\n  warningMap: Map<any, any>,\n}> {\n  _listener: ?EmitterSubscription;\n  dismissWarning: (warning: ?string) => void;\n\n  constructor(props: mixed, context: mixed) {\n    super(props, context);\n    this.state = {\n      inspecting: null,\n      stacktraceVisible: false,\n      warningMap: _warningMap,\n    };\n    this.dismissWarning = warning => {\n      const {inspecting, warningMap} = this.state;\n      if (warning) {\n        warningMap.delete(warning);\n      } else {\n        warningMap.clear();\n      }\n      this.setState({\n        inspecting: (warning && inspecting !== warning) ? inspecting : null,\n        warningMap,\n      });\n    };\n  }\n\n  static ignoreWarnings(warnings: Array<string>): void {\n    warnings.forEach((warning: string) => {\n      if (IGNORED_WARNINGS.indexOf(warning) === -1) {\n        IGNORED_WARNINGS.push(warning);\n      }\n    });\n  }\n\n  componentDidMount() {\n    let scheduled = null;\n    this._listener = _warningEmitter.addListener('warning', warningMap => {\n      // Use `setImmediate` because warnings often happen during render, but\n      // state cannot be set while rendering.\n      scheduled = scheduled || setImmediate(() => {\n        scheduled = null;\n        this.setState({\n          warningMap,\n        });\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    const {inspecting} = this.state;\n    if (inspecting != null) {\n      ensureSymbolicatedWarning(inspecting);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._listener) {\n      this._listener.remove();\n    }\n  }\n\n  render() {\n    if (console.disableYellowBox || this.state.warningMap.size === 0) {\n      return null;\n    }\n    const ScrollView = require('ScrollView');\n    const View = require('View');\n\n    const {inspecting, stacktraceVisible} = this.state;\n    const inspector = inspecting !== null ?\n      <WarningInspector\n        warningInfo={this.state.warningMap.get(inspecting)}\n        warning={inspecting}\n        stacktraceVisible={stacktraceVisible}\n        onDismiss={() => this.dismissWarning(inspecting)}\n        onDismissAll={() => this.dismissWarning(null)}\n        onMinimize={() => this.setState({inspecting: null})}\n        toggleStacktrace={() => this.setState({stacktraceVisible: !stacktraceVisible})}\n      /> :\n      null;\n\n    const rows = [];\n    this.state.warningMap.forEach((warningInfo, warning) => {\n      if (!isWarningIgnored(warning)) {\n        rows.push(\n          <WarningRow\n            key={warning}\n            count={warningInfo.count}\n            warning={warning}\n            onPress={() => this.setState({inspecting: warning})}\n            onDismiss={() => this.dismissWarning(warning)}\n          />\n        );\n      }\n    });\n\n    const listStyle = [\n      styles.list,\n      // Additional `0.4` so the 5th row can peek into view.\n      {height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight)},\n    ];\n    return (\n      <View style={inspector ? styles.fullScreen : listStyle}>\n        <ScrollView style={listStyle} scrollsToTop={false}>\n          {rows}\n        </ScrollView>\n        {inspector}\n      </View>\n    );\n  }\n}\n\nconst backgroundColor = opacity => 'rgba(250, 186, 48, ' + opacity + ')';\nconst textColor = 'white';\nconst rowGutter = 1;\nconst rowHeight = 46;\n\n// For unknown reasons, setting elevation: Number.MAX_VALUE causes remote debugging to\n// hang on iOS (some sort of overflow maybe). Setting it to Number.MAX_SAFE_INTEGER fixes the iOS issue, but since\n// elevation is an android-only style property we might as well remove it altogether for iOS.\n// See: https://github.com/facebook/react-native/issues/12223\nconst elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;\n\nvar styles = StyleSheet.create({\n  fullScreen: {\n    height: '100%',\n    width: '100%',\n    elevation: elevation,\n    position: 'absolute',\n  },\n  inspector: {\n    backgroundColor: backgroundColor(0.95),\n    height: '100%',\n    paddingTop: 5,\n    elevation:elevation\n  },\n  inspectorButtons: {\n    flexDirection: 'row',\n  },\n  inspectorButton: {\n    flex: 1,\n    paddingVertical: 22,\n    backgroundColor: backgroundColor(1),\n  },\n  stacktraceList: {\n    paddingBottom: 5,\n  },\n  inspectorButtonText: {\n    color: textColor,\n    fontSize: 14,\n    opacity: 0.8,\n    textAlign: 'center',\n  },\n  openInEditorButton: {\n    paddingTop: 5,\n    paddingBottom: 5,\n  },\n  inspectorCount: {\n    padding: 15,\n    paddingBottom: 0,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  inspectorCountText: {\n    color: textColor,\n    fontSize: 14,\n  },\n  inspectorWarning: {\n    flex: 1,\n    paddingHorizontal: 15,\n  },\n  inspectorWarningText: {\n    color: textColor,\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  list: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: elevation\n  },\n  listRow: {\n    backgroundColor: backgroundColor(0.95),\n    height: rowHeight,\n    marginTop: rowGutter,\n  },\n  listRowContent: {\n    flex: 1,\n  },\n  listRowCount: {\n    color: 'rgba(255, 255, 255, 0.5)',\n  },\n  listRowText: {\n    color: textColor,\n    position: 'absolute',\n    left: 0,\n    top: Platform.OS === 'android' ? 5 : 7,\n    marginLeft: 15,\n    marginRight: 15,\n  },\n});\n\nmodule.exports = YellowBox;\n"]}]