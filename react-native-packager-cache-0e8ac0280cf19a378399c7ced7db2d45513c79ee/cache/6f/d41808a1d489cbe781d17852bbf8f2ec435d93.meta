["1db9a6a4fc58ed9b064e756c6006a54ce8c04143","bed5091b711751fe03e8c6fb640cd52d2d5c0caf",["invariant","react-native","./Permissions","regenerator-runtime"],[91,200,245,367],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/Location.js"],"names":["Permissions","LocationEventEmitter","ExponentLocation","nextWatchId","headingId","_getNextWatchId","_getCurrentWatchId","watchCallbacks","deviceEventSubscription","headingEventSub","googleApiKey","googleApiUrl","getProviderStatusAsync","getCurrentPositionAsync","options","OS","Promise","resolve","reject","done","subscription","watchPositionAsync","location","remove","getHeadingAsync","tries","headingSub","addListener","watchId","heading","accuracy","removeSubscription","watchHeadingAsync","callback","_removeHeadingWatcher","removeWatchAsync","watchDeviceHeading","_maybeInitializeEmitterSubscription","_askPermissionForWatchAsync","success","error","askAsync","LOCATION","status","watchPositionImplAsync","_removeWatcher","message","geocodeAsync","address","catch","code","Error","_googleGeocodeAsync","reverseGeocodeAsync","latitude","longitude","TypeError","_googleReverseGeocodeAsync","setApiKey","apiKey","fetch","encodeURI","result","json","resultObject","results","map","geometry","lat","lng","address_components","forEach","component","types","includes","city","long_name","street","region","country","postalCode","name","watchPosition","clearWatch","Object","keys","length","getCurrentPosition","_getCurrentPositionAsyncWrapper","Location","window","navigator","geolocation","stopObserving","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\nimport invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules, Platform } from 'react-native';\n\nimport * as Permissions from './Permissions';\n\nconst LocationEventEmitter = new NativeEventEmitter(\n  NativeModules.ExponentLocation\n);\n\ntype ProviderStatus = {\n  locationServicesEnabled: boolean,\n  gpsAvailable: ?boolean,\n  networkAvailable: ?boolean,\n  passiveAvailable: ?boolean,\n};\n\ntype LocationOptions = {\n  enableHighAccuracy?: boolean,\n  timeInterval?: number,\n  distanceInterval?: number,\n};\n\ntype LocationData = {\n  coords: {\n    latitude: number,\n    longitude: number,\n    altitude: number,\n    accuracy: number,\n    heading: number,\n    speed: number,\n  },\n  timestamp: number,\n};\n\ntype HeadingData = {\n  trueHeading: number,\n  magHeading: number,\n  accuracy: number,\n};\n\ntype LocationCallback = (data: LocationData) => any;\ntype HeadingCallback = (data: HeadingData) => any;\n\nconst { ExponentLocation } = NativeModules;\n\nlet nextWatchId = 0;\nlet headingId;\nfunction _getNextWatchId() {\n  nextWatchId++;\n  return nextWatchId;\n}\nfunction _getCurrentWatchId() {\n  return nextWatchId;\n}\n\nlet watchCallbacks: {\n  [watchId: number]: LocationCallback | HeadingCallback,\n} = {};\nlet deviceEventSubscription: ?Function;\nlet headingEventSub: ?Function;\nlet googleApiKey;\nconst googleApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\nfunction getProviderStatusAsync(): Promise<ProviderStatus> {\n  return ExponentLocation.getProviderStatusAsync();\n}\n\nfunction getCurrentPositionAsync(\n  options: LocationOptions\n): Promise<LocationData> {\n  // On Android we have a native method for this case.\n  if (Platform.OS === 'android') {\n    return ExponentLocation.getCurrentPositionAsync(options);\n  }\n\n  // On iOS we implement it in terms of `.watchPositionAsync(...)`\n  // TODO: Use separate native method for iOS too?\n  return new Promise(async (resolve, reject) => {\n    try {\n      let done = false; // To make sure we only resolve once.\n      let subscription;\n      subscription = await watchPositionAsync(options, location => {\n        if (!done) {\n          resolve(location);\n          done = true;\n        }\n        subscription.remove();\n      });\n\n      // In case the callback is fired before we get here.\n      if (done) {\n        subscription.remove();\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n// Start Compass Module\n\n// To simplify, we will call watchHeadingAsync and wait for one update\n// To ensure accuracy, we wait for a couple of watch updates if the data has low accuracy\nasync function getHeadingAsync() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // If there is already a compass active (would be a watch)\n      if (headingEventSub) {\n        let tries = 0;\n        const headingSub = LocationEventEmitter.addListener(\n          'Exponent.headingChanged',\n          ({ watchId, heading }) => {\n            if (heading.accuracy > 1 || tries > 5) {\n              resolve(heading);\n              LocationEventEmitter.removeSubscription(headingSub);\n            } else {\n              tries += 1;\n            }\n          }\n        );\n      } else {\n        let done = false;\n        let subscription;\n        let tries = 0;\n        subscription = await watchHeadingAsync(heading => {\n          if (!done) {\n            if (heading.accuracy > 1 || tries > 5) {\n              subscription.remove();\n              resolve(heading);\n              done = true;\n            } else {\n              tries += 1;\n            }\n          } else {\n            subscription.remove();\n          }\n        });\n\n        if (done) {\n          subscription.remove();\n        }\n      }\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nasync function watchHeadingAsync(callback: HeadingCallback) {\n  // Check if there is already a compass event watch.\n  if (headingEventSub) {\n    _removeHeadingWatcher(headingId);\n  }\n\n  headingEventSub = LocationEventEmitter.addListener(\n    'Exponent.headingChanged',\n    ({ watchId, heading }) => {\n      const callback = watchCallbacks[watchId];\n      if (callback) {\n        callback(heading);\n      } else {\n        ExponentLocation.removeWatchAsync(watchId);\n      }\n    }\n  );\n\n  headingId = _getNextWatchId();\n  watchCallbacks[headingId] = callback;\n  await ExponentLocation.watchDeviceHeading(headingId);\n  return {\n    remove() {\n      _removeHeadingWatcher(headingId);\n    },\n  };\n}\n\n// Removes the compass listener and sub from JS and Native\nfunction _removeHeadingWatcher(watchId) {\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n  delete watchCallbacks[watchId];\n  ExponentLocation.removeWatchAsync(watchId);\n  LocationEventEmitter.removeSubscription(headingEventSub);\n  headingEventSub = null;\n}\n// End Compass Module\n\nfunction _maybeInitializeEmitterSubscription() {\n  if (!deviceEventSubscription) {\n    deviceEventSubscription = LocationEventEmitter.addListener(\n      'Exponent.locationChanged',\n      ({ watchId, location }) => {\n        const callback = watchCallbacks[watchId];\n        if (callback) {\n          callback(location);\n        } else {\n          ExponentLocation.removeWatchAsync(watchId);\n        }\n      }\n    );\n  }\n}\n\nasync function _askPermissionForWatchAsync(success, error, options, watchId) {\n  let { status } = await Permissions.askAsync(Permissions.LOCATION);\n  if (status === 'granted') {\n    ExponentLocation.watchPositionImplAsync(watchId, options);\n  } else {\n    _removeWatcher(watchId);\n    error({ watchId, message: 'No permission to access location' });\n  }\n}\n\nasync function geocodeAsync(address: string) {\n  return ExponentLocation.geocodeAsync(address).catch(error => {\n    if (Platform.OS === 'android' && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new Error(\n          error.message + ' Please set a Google API Key to use geocoding.'\n        );\n      }\n      return _googleGeocodeAsync(address);\n    }\n    throw error;\n  });\n}\n\nasync function reverseGeocodeAsync(location: {\n  latitude: number,\n  longitude: number,\n}) {\n  if (\n    typeof location.latitude !== 'number' ||\n    typeof location.longitude !== 'number'\n  ) {\n    throw new TypeError(\n      'Location should be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  return ExponentLocation.reverseGeocodeAsync(location).catch(error => {\n    if (Platform.OS === 'android' && error.code === 'E_NO_GEOCODER') {\n      if (!googleApiKey) {\n        throw new Error(\n          error.message + ' Please set a Google API Key to use geocoding.'\n        );\n      }\n      return _googleReverseGeocodeAsync(location);\n    }\n    throw error;\n  });\n}\n\nfunction setApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nasync function _googleGeocodeAsync(address: string) {\n  const result = await fetch(\n    `${googleApiUrl}?key=${googleApiKey}&address=${encodeURI(address)}`\n  );\n  const resultObject = await result.json();\n\n  if (resultObject.status !== 'OK') {\n    throw new Error('An error occurred during geocoding.');\n  }\n\n  return resultObject.results.map(result => {\n    let location = result.geometry.location;\n    return {\n      latitude: location.lat,\n      longitude: location.lng,\n    };\n  });\n}\n\nasync function _googleReverseGeocodeAsync(options: {\n  latitude: number,\n  longitude: number,\n}) {\n  const result = await fetch(\n    `${googleApiUrl}?key=${googleApiKey}&latlng=${options.latitude},${options.longitude}`\n  );\n  const resultObject = await result.json();\n\n  if (resultObject.status !== 'OK') {\n    throw new Error('An error occurred during geocoding.');\n  }\n\n  return resultObject.results.map(result => {\n    let address = {};\n    result.address_components.forEach(component => {\n      if (component.types.includes('locality')) {\n        address.city = component.long_name;\n      } else if (component.types.includes('street_address')) {\n        address.street = component.long_name;\n      } else if (component.types.includes('administrative_area_level_1')) {\n        address.region = component.long_name;\n      } else if (component.types.includes('country')) {\n        address.country = component.long_name;\n      } else if (component.types.includes('postal_code')) {\n        address.postalCode = component.long_name;\n      } else if (component.types.includes('point_of_interest')) {\n        address.name = component.long_name;\n      }\n    });\n    return address;\n  });\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = success;\n  _askPermissionForWatchAsync(success, error, options, watchId);\n\n  return watchId;\n}\n\nasync function watchPositionAsync(\n  options: LocationOptions,\n  callback: LocationCallback\n) {\n  _maybeInitializeEmitterSubscription();\n\n  const watchId = _getNextWatchId();\n  watchCallbacks[watchId] = callback;\n  await ExponentLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      _removeWatcher(watchId);\n    },\n  };\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  _removeWatcher(watchId);\n}\n\nfunction _removeWatcher(watchId) {\n  // Do nothing if we have already removed the subscription\n  if (!watchCallbacks[watchId]) {\n    return;\n  }\n\n  ExponentLocation.removeWatchAsync(watchId);\n  delete watchCallbacks[watchId];\n  if (Object.keys(watchCallbacks).length === 0) {\n    LocationEventEmitter.removeSubscription(deviceEventSubscription);\n    deviceEventSubscription = null;\n  }\n}\n\ntype GeoSuccessCallback = (data: LocationData) => void;\ntype GeoErrorCallback = (error: any) => void;\n\nfunction getCurrentPosition(\n  success: GeoSuccessCallback,\n  error?: GeoErrorCallback = () => {},\n  options?: LocationOptions = {}\n): void {\n  invariant(\n    typeof success === 'function',\n    'Must provide a valid success callback.'\n  );\n\n  invariant(typeof options === 'object', 'options must be an object.');\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from\n// getCurrentPosition, while still using async/await for the internal\n// implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeoSuccessCallback,\n  error: GeoErrorCallback,\n  options: LocationOptions\n): Promise<*> {\n  try {\n    let { status } = await Permissions.askAsync(Permissions.LOCATION);\n    if (status !== 'granted') {\n      throw new Error(\n        'Permission to access location not granted. User must now enable it manually in settings'\n      );\n    }\n\n    let result = await Location.getCurrentPositionAsync(options);\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill navigator.geolocation for interop with the core react-native and\n// web API approach to geolocation\nwindow.navigator.geolocation = {\n  getCurrentPosition,\n  watchPosition,\n  clearWatch,\n\n  // We don't polyfill stopObserving, this is an internal method that probably\n  // should not even exist in react-native docs\n  stopObserving: () => {},\n};\n\nconst Location = {\n  getProviderStatusAsync,\n  getCurrentPositionAsync,\n  watchPositionAsync,\n  getHeadingAsync,\n  watchHeadingAsync,\n  geocodeAsync,\n  reverseGeocodeAsync,\n  setApiKey,\n\n  // For internal purposes\n  EventEmitter: LocationEventEmitter,\n  _getCurrentWatchId,\n};\n\nexport default Location;\n"]}]