["f5c29b8dcb150e7b5a32c1b7f8869ec691eee169","03cc03ae0aaa3fe4f1fcd34e72aab0fb63b029d6",["react","fbemitter","./AppLoadingNativeWrapper","regenerator-runtime"],[187,282,336,495],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/expo/src/launch/AppLoading.js"],"names":["getAppLoadingLifecycleEmitter","AppLoading","_startLoadingAppResourcesAsync","props","onFinish","Error","startAsync","_isMounted","onError","_emitEvent","done","Component","_lifecycleEmitter","event","emit"],"mappings":";;;;QA6EgBA,6B,GAAAA,6B;;AA5EhB;;;;AACA;;AACA;;;;;;IAcqBC,U;;;;;;;;;;;;;;;0MAoBnBC,8B,GAAiC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAC1B,MAAKC,KAAL,CAAWC,QADe;AAAA;AAAA;AAAA;;AAAA,oBAEvB,IAAIC,KAAJ,CACJ,gEADI,CAFuB;;AAAA;AAAA;AAAA;AAAA,8CAQvB,MAAKF,KAAL,CAAWG,UAAX,EARuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAUxB,MAAKC,UAVmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,mBAYzB,MAAKJ,KAAL,CAAWK,OAZc;AAAA;AAAA;AAAA;;AAa3B,oBAAKL,KAAL,CAAWK,OAAX;AAb2B;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,kBAkBxB,MAAKD,UAlBmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAsB7B,kBAAI,MAAKJ,KAAL,CAAWC,QAAf,EAAyB;AACvB,sBAAKD,KAAL,CAAWC,QAAX;AACD;AAxB4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;wCAjBb;AAClB,WAAKG,UAAL,GAAkB,IAAlB;AACAE,iBAAW,mBAAX;;AAIA,UAAI,KAAKN,KAAL,CAAWG,UAAf,EAA2B;AAEzB,aAAKJ,8BAAL,GAAsCQ,IAAtC;AACD;AACF;;;2CAEsB;AACrB,WAAKH,UAAL,GAAkB,KAAlB;AACAE,iBAAW,sBAAX;AACD;;;6BA8BQ;AACP,aAAO,sEAAP;AACD;;;EAlDqC,gBAAME,S;;kBAAzBV,U;;;AAqDrB,IAAIW,0BAAJ;AACA,SAASH,UAAT,CAAoBI,KAApB,EAAmC;AACjC,MAAID,iBAAJ,EAAuB;AACrBA,sBAAkBE,IAAlB,CAAuBD,KAAvB;AACD;AACF;;AAEM,SAASb,6BAAT,GAAyC;AAC9C,MAAI,CAACY,iBAAL,EAAwB;AACtBA,wBAAoB,6BAApB;AACD;AACD,SAAOA,iBAAP;AACD","sourcesContent":["/* @flow */\nimport React from 'react';\nimport { EventEmitter } from 'fbemitter';\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      startAsync: () => Promise<any>,\n      onError?: (error: Error) => void,\n      onFinish: () => void,\n    }\n  | {\n      startAsync: null,\n      onError: null,\n      onFinish: null,\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean;\n\n  componentDidMount() {\n    this._isMounted = true;\n    _emitEvent('componentDidMount');\n\n    // startAsync is optional, you can do this process manually if you prefer\n    // (this is mainly for backwards compatibility and it is not recommended)\n    if (this.props.startAsync) {\n      /* $FlowFixMe */\n      this._startLoadingAppResourcesAsync().done();\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    _emitEvent('componentWillUnmount');\n  }\n\n  _startLoadingAppResourcesAsync = async () => {\n    if (!this.props.onFinish) {\n      throw new Error(\n        'AppLoading onFinish prop is required if startAsync is provided'\n      );\n    }\n\n    try {\n      await this.props.startAsync();\n    } catch (e) {\n      if (!this._isMounted) return;\n\n      if (this.props.onError) {\n        this.props.onError(e);\n      } else {\n        throw e;\n      }\n    } finally {\n      if (!this._isMounted) return;\n\n      // If we get to this point then we know that either there\n      // was no error, or the error was handled.\n      if (this.props.onFinish) {\n        this.props.onFinish();\n      }\n    }\n  };\n\n  render() {\n    return <NativeAppLoading />;\n  }\n}\n\nlet _lifecycleEmitter: ?EventEmitter;\nfunction _emitEvent(event: string) {\n  if (_lifecycleEmitter) {\n    _lifecycleEmitter.emit(event);\n  }\n}\n\nexport function getAppLoadingLifecycleEmitter() {\n  if (!_lifecycleEmitter) {\n    _lifecycleEmitter = new EventEmitter();\n  }\n  return _lifecycleEmitter;\n}\n"]}]