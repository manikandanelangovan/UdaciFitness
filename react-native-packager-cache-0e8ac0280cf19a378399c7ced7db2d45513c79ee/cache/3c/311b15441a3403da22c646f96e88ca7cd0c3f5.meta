["3fd79051a8d8622ea4eb878da8275ae756763563","044b97f3873678774d0de1d453ae860b9d50d154",["Animated","ColorPropType","EdgeInsetsPropType","Platform","PointPropType","prop-types","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","create-react-class","dismissKeyboard","flattenStyle","fbjs/lib/invariant","processDecelerationRate","requireNativeComponent","fbjs/lib/warning"],[39,80,131,177,218,260,295,331,377,434,486,534,576,613,664,719,772,819,860,921,986,1035],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"],"names":["Animated","require","ColorPropType","EdgeInsetsPropType","Platform","PointPropType","PropTypes","React","ReactNative","ScrollResponder","ScrollViewStickyHeader","StyleSheet","StyleSheetPropType","View","ViewPropTypes","ViewStylePropTypes","createReactClass","dismissKeyboard","flattenStyle","invariant","processDecelerationRate","requireNativeComponent","warning","ScrollView","displayName","propTypes","automaticallyAdjustContentInsets","bool","contentInset","contentOffset","bounces","bouncesZoom","alwaysBounceHorizontal","alwaysBounceVertical","centerContent","contentContainerStyle","decelerationRate","oneOfType","oneOf","number","horizontal","indicatorStyle","directionalLockEnabled","canCancelContentTouches","keyboardDismissMode","keyboardShouldPersistTaps","maximumZoomScale","minimumZoomScale","onMomentumScrollBegin","func","onMomentumScrollEnd","onScroll","onContentSizeChange","pagingEnabled","pinchGestureEnabled","scrollEnabled","scrollEventThrottle","scrollIndicatorInsets","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","stickyHeaderIndices","arrayOf","style","snapToInterval","snapToAlignment","removeClippedSubviews","zoomScale","contentInsetAdjustmentBehavior","refreshControl","element","endFillColor","scrollPerfTag","string","overScrollMode","DEPRECATED_sendUpdatedChildFrames","mixins","Mixin","_scrollAnimatedValue","Value","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","getInitialState","scrollResponderMixinGetInitialState","componentWillMount","componentDidMount","_updateAnimatedNodeAttachment","componentDidUpdate","componentWillUnmount","detach","setNativeProps","props","_scrollViewRef","getScrollResponder","getScrollableNode","findNodeHandle","getInnerViewNode","_innerViewRef","scrollTo","y","x","animated","console","warn","scrollResponderScrollTo","scrollToEnd","options","scrollResponderScrollToEnd","scrollWithoutAnimationTo","flashScrollIndicators","scrollResponderFlashScrollIndicators","_getKeyForIndex","index","childArray","child","key","length","attachNativeEvent","nativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","layout","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","get","setNextHeaderY","_handleScroll","e","__DEV__","OS","log","scrollResponderHandleScroll","_handleContentOnLayout","width","height","_setScrollViewRef","_setInnerViewRef","render","ScrollViewClass","ScrollContentContainerViewClass","RCTScrollView","RCTScrollContentView","AndroidHorizontalScrollView","AndroidScrollView","undefined","styles","contentContainerHorizontal","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","onLayout","hasStickyHeaders","map","nextIndex","contentContainer","baseStyle","baseHorizontal","baseVertical","scrollResponderHandleMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onResponderGrant","scrollResponderHandleResponderGrant","onResponderReject","scrollResponderHandleResponderReject","onResponderRelease","scrollResponderHandleResponderRelease","onResponderTerminate","scrollResponderHandleTerminate","onResponderTerminationRequest","scrollResponderHandleTerminationRequest","onScrollBeginDrag","scrollResponderHandleScrollBeginDrag","onScrollEndDrag","scrollResponderHandleScrollEndDrag","onScrollShouldSetResponder","scrollResponderHandleScrollShouldSetResponder","onStartShouldSetResponder","scrollResponderHandleStartShouldSetResponder","onStartShouldSetResponderCapture","scrollResponderHandleStartShouldSetResponderCapture","onTouchEnd","scrollResponderHandleTouchEnd","onTouchMove","scrollResponderHandleTouchMove","onTouchStart","scrollResponderHandleTouchStart","sendMomentumEvents","isTVOS","cloneElement","create","flexGrow","flexShrink","flexDirection","overflow","nativeOnlyProps","nativeOnly","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ScrollView\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst ColorPropType = require('ColorPropType');\nconst EdgeInsetsPropType = require('EdgeInsetsPropType');\nconst Platform = require('Platform');\nconst PointPropType = require('PointPropType');\nconst PropTypes = require('prop-types');\nconst React = require('React');\nconst ReactNative = require('ReactNative');\nconst ScrollResponder = require('ScrollResponder');\nconst ScrollViewStickyHeader = require('ScrollViewStickyHeader');\nconst StyleSheet = require('StyleSheet');\nconst StyleSheetPropType = require('StyleSheetPropType');\nconst View = require('View');\nconst ViewPropTypes = require('ViewPropTypes');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nconst createReactClass = require('create-react-class');\nconst dismissKeyboard = require('dismissKeyboard');\nconst flattenStyle = require('flattenStyle');\nconst invariant = require('fbjs/lib/invariant');\nconst processDecelerationRate = require('processDecelerationRate');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {NativeMethodsMixinType} from 'ReactNativeTypes';\n\n/**\n * Component that wraps platform ScrollView while providing\n * integration with touch locking \"responder\" system.\n *\n * Keep in mind that ScrollViews must have a bounded height in order to work,\n * since they contain unbounded-height children into a bounded container (via\n * a scroll interaction). In order to bound the height of a ScrollView, either\n * set the height of the view directly (discouraged) or make sure all parent\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\n * view stack can lead to errors here, which the element inspector makes\n * easy to debug.\n *\n * Doesn't yet support other contained responders from blocking this scroll\n * view from becoming the responder.\n *\n *\n * `<ScrollView>` vs [`<FlatList>`](/react-native/docs/flatlist.html) - which one to use?\n *\n * `ScrollView` simply renders all its react child components at once. That\n * makes it very easy to understand and use.\n *\n * On the other hand, this has a performance downside. Imagine you have a very\n * long list of items you want to display, maybe several screens worth of\n * content. Creating JS components and native views for everything all at once,\n * much of which may not even be shown, will contribute to slow rendering and\n * increased memory usage.\n *\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\n * just when they are about to appear, and removes items that scroll way off\n * screen to save memory and processing time.\n *\n * `FlatList` is also handy if you want to render separators between your items,\n * multiple columns, infinite scroll loading, or any number of other features it\n * supports out of the box.\n */\n// $FlowFixMe(>=0.41.0)\nconst ScrollView = createReactClass({\n  displayName: 'ScrollView',\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Controls whether iOS should automatically adjust the content inset\n     * for scroll views that are placed behind a navigation bar or\n     * tab bar/ toolbar. The default value is true.\n     * @platform ios\n     */\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    /**\n     * The amount by which the scroll view content is inset from the edges\n     * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\n     * @platform ios\n     */\n    contentInset: EdgeInsetsPropType,\n    /**\n     * Used to manually set the starting scroll offset.\n     * The default value is `{x: 0, y: 0}`.\n     * @platform ios\n     */\n    contentOffset: PointPropType,\n    /**\n     * When true, the scroll view bounces when it reaches the end of the\n     * content if the content is larger then the scroll view along the axis of\n     * the scroll direction. When false, it disables all bouncing even if\n     * the `alwaysBounce*` props are true. The default value is true.\n     * @platform ios\n     */\n    bounces: PropTypes.bool,\n    /**\n     * When true, gestures can drive zoom past min/max and the zoom will animate\n     * to the min/max value at gesture end, otherwise the zoom will not exceed\n     * the limits.\n     * @platform ios\n     */\n    bouncesZoom: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces horizontally when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is true when `horizontal={true}` and false otherwise.\n     * @platform ios\n     */\n    alwaysBounceHorizontal: PropTypes.bool,\n    /**\n     * When true, the scroll view bounces vertically when it reaches the end\n     * even if the content is smaller than the scroll view itself. The default\n     * value is false when `horizontal={true}` and true otherwise.\n     * @platform ios\n     */\n    alwaysBounceVertical: PropTypes.bool,\n    /**\n     * When true, the scroll view automatically centers the content when the\n     * content is smaller than the scroll view bounds; when the content is\n     * larger than the scroll view, this property has no effect. The default\n     * value is false.\n     * @platform ios\n     */\n    centerContent: PropTypes.bool,\n    /**\n     * These styles will be applied to the scroll view content container which\n     * wraps all of the child views. Example:\n     *\n     * ```\n     * return (\n     *   <ScrollView contentContainerStyle={styles.contentContainer}>\n     *   </ScrollView>\n     * );\n     * ...\n     * const styles = StyleSheet.create({\n     *   contentContainer: {\n     *     paddingVertical: 20\n     *   }\n     * });\n     * ```\n     */\n    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use string\n     * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\n     * for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively.\n     *\n     *   - `'normal'`: 0.998 (the default)\n     *   - `'fast'`: 0.99\n     *\n     * @platform ios\n     */\n    decelerationRate: PropTypes.oneOfType([\n      PropTypes.oneOf(['fast', 'normal']),\n      PropTypes.number,\n    ]),\n    /**\n     * When true, the scroll view's children are arranged horizontally in a row\n     * instead of vertically in a column. The default value is false.\n     */\n    horizontal: PropTypes.bool,\n    /**\n     * The style of the scroll indicators.\n     *\n     *   - `'default'` (the default), same as `black`.\n     *   - `'black'`, scroll indicator is black. This style is good against a light background.\n     *   - `'white'`, scroll indicator is white. This style is good against a dark background.\n     *\n     * @platform ios\n     */\n    indicatorStyle: PropTypes.oneOf([\n      'default', // default\n      'black',\n      'white',\n    ]),\n    /**\n     * When true, the ScrollView will try to lock to only vertical or horizontal\n     * scrolling while dragging.  The default value is false.\n     * @platform ios\n     */\n    directionalLockEnabled: PropTypes.bool,\n    /**\n     * When false, once tracking starts, won't try to drag if the touch moves.\n     * The default value is true.\n     * @platform ios\n     */\n    canCancelContentTouches: PropTypes.bool,\n    /**\n     * Determines whether the keyboard gets dismissed in response to a drag.\n     *\n     * *Cross platform*\n     *\n     *   - `'none'` (the default), drags do not dismiss the keyboard.\n     *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\n     *\n     * *iOS Only*\n     *\n     *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\n     *     synchrony with the touch; dragging upwards cancels the dismissal.\n     *     On android this is not supported and it will have the same behavior as 'none'.\n     */\n    keyboardDismissMode: PropTypes.oneOf([\n      'none', // default\n      'on-drag', // Cross-platform\n      'interactive', // iOS-only\n    ]),\n    /**\n     * Determines when the keyboard should stay visible after a tap.\n     *\n     *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\n     *     is up dismisses the keyboard. When this happens, children won't receive the tap.\n     *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\n     *     catch taps, but children of the scroll view can catch taps.\n     *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\n     *     a children, (or captured by an ancestor).\n     *   - `false`, deprecated, use 'never' instead\n     *   - `true`, deprecated, use 'always' instead\n     */\n    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),\n    /**\n     * The maximum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    maximumZoomScale: PropTypes.number,\n    /**\n     * The minimum allowed zoom scale. The default value is 1.0.\n     * @platform ios\n     */\n    minimumZoomScale: PropTypes.number,\n    /**\n     * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\n     */\n    onMomentumScrollBegin: PropTypes.func,\n    /**\n     * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\n     */\n    onMomentumScrollEnd: PropTypes.func,\n    /**\n     * Fires at most once per frame during scrolling. The frequency of the\n     * events can be controlled using the `scrollEventThrottle` prop.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * Called when scrollable content view of the ScrollView changes.\n     *\n     * Handler function is passed the content width and content height as parameters:\n     * `(contentWidth, contentHeight)`\n     *\n     * It's implemented using onLayout handler attached to the content container\n     * which this ScrollView renders.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * When true, the scroll view stops on multiples of the scroll view's size\n     * when scrolling. This can be used for horizontal pagination. The default\n     * value is false.\n     *\n     * Note: Vertical pagination is not supported on Android.\n     */\n    pagingEnabled: PropTypes.bool,\n    /**\n    * When true, ScrollView allows use of pinch gestures to zoom in and out.\n    * The default value is true.\n    * @platform ios\n    */\n    pinchGestureEnabled: PropTypes.bool,\n    /**\n     * When false, the view cannot be scrolled via touch interaction.\n     * The default value is true.\n     *\n     * Note that the view can be always be scrolled by calling `scrollTo`.\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * This controls how often the scroll event will be fired while scrolling\n     * (as a time interval in ms). A lower number yields better accuracy for code\n     * that is tracking the scroll position, but can lead to scroll performance\n     * problems due to the volume of information being send over the bridge.\n     * You will not notice a difference between values set between 1-16 as the\n     * JS run loop is synced to the screen refresh rate. If you do not need precise\n     * scroll position tracking, set this value higher to limit the information\n     * being sent across the bridge. The default value is zero, which results in\n     * the scroll event being sent only once each time the view is scrolled.\n     * @platform ios\n     */\n    scrollEventThrottle: PropTypes.number,\n    /**\n     * The amount by which the scroll view indicators are inset from the edges\n     * of the scroll view. This should normally be set to the same value as\n     * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\n     * @platform ios\n     */\n    scrollIndicatorInsets: EdgeInsetsPropType,\n    /**\n     * When true, the scroll view scrolls to top when the status bar is tapped.\n     * The default value is true.\n     * @platform ios\n     */\n    scrollsToTop: PropTypes.bool,\n    /**\n     * When true, shows a horizontal scroll indicator.\n     * The default value is true.\n     */\n    showsHorizontalScrollIndicator: PropTypes.bool,\n    /**\n     * When true, shows a vertical scroll indicator.\n     * The default value is true.\n     */\n    showsVerticalScrollIndicator: PropTypes.bool,\n    /**\n     * An array of child indices determining which children get docked to the\n     * top of the screen when scrolling. For example, passing\n     * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\n     * top of the scroll view. This property is not supported in conjunction\n     * with `horizontal={true}`.\n     */\n    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),\n    style: StyleSheetPropType(ViewStylePropTypes),\n    /**\n     * When set, causes the scroll view to stop at multiples of the value of\n     * `snapToInterval`. This can be used for paginating through children\n     * that have lengths smaller than the scroll view. Typically used in\n     * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\n     * Overrides less configurable `pagingEnabled` prop.\n     *\n     * @platform ios\n     */\n    snapToInterval: PropTypes.number,\n    /**\n     * When `snapToInterval` is set, `snapToAlignment` will define the relationship\n     * of the snapping to the scroll view.\n     *\n     *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\n     *   - `'center'` will align the snap in the center\n     *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\n     *\n     * @platform ios\n     */\n    snapToAlignment: PropTypes.oneOf([\n      'start', // default\n      'center',\n      'end',\n    ]),\n    /**\n     * Experimental: When true, offscreen child views (whose `overflow` value is\n     * `hidden`) are removed from their native backing superview when offscreen.\n     * This can improve scrolling performance on long lists. The default value is\n     * true.\n     */\n    removeClippedSubviews: PropTypes.bool,\n    /**\n     * The current scale of the scroll view content. The default value is 1.0.\n     * @platform ios\n     */\n    zoomScale: PropTypes.number,\n    /**\n     * This property specifies how the safe area insets are used to modify the\n     * content area of the scroll view. The default value of this property is\n     * \"never\". Available on iOS 11 and later.\n     * @platform ios\n     */\n    contentInsetAdjustmentBehavior: PropTypes.oneOf([\n      'automatic',\n      'scrollableAxes',\n      'never', // default\n      'always',\n    ]),\n    /**\n     * A RefreshControl component, used to provide pull-to-refresh\n     * functionality for the ScrollView. Only works for vertical ScrollViews\n     * (`horizontal` prop must be `false`).\n     *\n     * See [RefreshControl](docs/refreshcontrol.html).\n     */\n    refreshControl: PropTypes.element,\n\n    /**\n     * Sometimes a scrollview takes up more space than its content fills. When this is\n     * the case, this prop will fill the rest of the scrollview with a color to avoid setting\n     * a background and creating unnecessary overdraw. This is an advanced optimization\n     * that is not needed in the general case.\n     * @platform android\n     */\n    endFillColor: ColorPropType,\n\n    /**\n     * Tag used to log scroll performance on this scroll view. Will force\n     * momentum events to be turned on (see sendMomentumEvents). This doesn't do\n     * anything out of the box and you need to implement a custom native\n     * FpsListener for it to be useful.\n     * @platform android\n     */\n    scrollPerfTag: PropTypes.string,\n\n     /**\n     * Used to override default value of overScroll mode.\n     *\n     * Possible values:\n     *\n     *  - `'auto'` - Default value, allow a user to over-scroll\n     *    this view only if the content is large enough to meaningfully scroll.\n     *  - `'always'` - Always allow a user to over-scroll this view.\n     *  - `'never'` - Never allow a user to over-scroll this view.\n     *\n     * @platform android\n     */\n    overScrollMode: PropTypes.oneOf([\n      'auto',\n      'always',\n      'never',\n    ]),\n    /**\n     * When true, ScrollView will emit updateChildFrames data in scroll events,\n     * otherwise will not compute or emit child frame data.  This only exists\n     * to support legacy issues, `onLayout` should be used instead to retrieve\n     * frame data.\n     * The default value is false.\n     * @platform ios\n     */\n    DEPRECATED_sendUpdatedChildFrames: PropTypes.bool,\n  },\n\n  mixins: [ScrollResponder.Mixin],\n\n  _scrollAnimatedValue: (new Animated.Value(0): Animated.Value),\n  _scrollAnimatedValueAttachment: (null: ?{detach: () => void}),\n  _stickyHeaderRefs: (new Map(): Map<number, ScrollViewStickyHeader>),\n  _headerLayoutYs: (new Map(): Map<string, number>),\n  getInitialState: function() {\n    return this.scrollResponderMixinGetInitialState();\n  },\n\n  componentWillMount: function() {\n    this._scrollAnimatedValue = new Animated.Value(0);\n    this._stickyHeaderRefs = new Map();\n    this._headerLayoutYs = new Map();\n  },\n\n  componentDidMount: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentDidUpdate: function() {\n    this._updateAnimatedNodeAttachment();\n  },\n\n  componentWillUnmount: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n  },\n\n  setNativeProps: function(props: Object) {\n    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);\n  },\n\n  /**\n   * Returns a reference to the underlying scroll responder, which supports\n   * operations like `scrollTo`. All ScrollView-like components should\n   * implement this method so that they can be composed while providing access\n   * to the underlying scroll responder's methods.\n   */\n  getScrollResponder: function(): ScrollView {\n    return this;\n  },\n\n  getScrollableNode: function(): any {\n    return ReactNative.findNodeHandle(this._scrollViewRef);\n  },\n\n  getInnerViewNode: function(): any {\n    return ReactNative.findNodeHandle(this._innerViewRef);\n  },\n\n  /**\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\n   *\n   * Example:\n   *\n   * `scrollTo({x: 0, y: 0, animated: true})`\n   *\n   * Note: The weird function signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as an alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollTo: function(\n    y?: number | { x?: number, y?: number, animated?: boolean },\n    x?: number,\n    animated?: boolean\n  ) {\n    if (typeof y === 'number') {\n      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\n        'animated: true})` instead.');\n    } else {\n      ({x, y, animated} = y || {});\n    }\n    this.getScrollResponder().scrollResponderScrollTo(\n      {x: x || 0, y: y || 0, animated: animated !== false}\n    );\n  },\n\n  /**\n   * If this is a vertical ScrollView scrolls to the bottom.\n   * If this is a horizontal ScrollView scrolls to the right.\n   *\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\n   * `scrollToEnd({animated: false})` for immediate scrolling.\n   * If no options are passed, `animated` defaults to true.\n   */\n  scrollToEnd: function(\n    options?: { animated?: boolean },\n  ) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    this.getScrollResponder().scrollResponderScrollToEnd({\n      animated: animated,\n    });\n  },\n\n  /**\n   * Deprecated, use `scrollTo` instead.\n   */\n  scrollWithoutAnimationTo: function(y: number = 0, x: number = 0) {\n    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');\n    this.scrollTo({x, y, animated: false});\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators: function() {\n    this.getScrollResponder().scrollResponderFlashScrollIndicators();\n  },\n\n  _getKeyForIndex: function(index, childArray) {\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    const child = childArray[index];\n    return child && child.key;\n  },\n\n  _updateAnimatedNodeAttachment: function() {\n    if (this._scrollAnimatedValueAttachment) {\n      this._scrollAnimatedValueAttachment.detach();\n    }\n    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {\n      this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(\n        this._scrollViewRef,\n        'onScroll',\n        [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}]\n      );\n    }\n  },\n\n  _setStickyHeaderRef: function(key, ref) {\n    if (ref) {\n      this._stickyHeaderRefs.set(key, ref);\n    } else {\n      this._stickyHeaderRefs.delete(key);\n    }\n  },\n\n  _onStickyHeaderLayout: function(index, event, key) {\n    if (!this.props.stickyHeaderIndices) {\n      return;\n    }\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    const childArray = React.Children.toArray(this.props.children);\n    if (key !== this._getKeyForIndex(index, childArray)) {\n      // ignore stale layout update\n      return;\n    }\n\n    const layoutY = event.nativeEvent.layout.y;\n    this._headerLayoutYs.set(key, layoutY);\n\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    const indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    const previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];\n    if (previousHeaderIndex != null) {\n      const previousHeader = this._stickyHeaderRefs.get(\n        this._getKeyForIndex(previousHeaderIndex, childArray)\n      );\n      previousHeader && previousHeader.setNextHeaderY(layoutY);\n    }\n  },\n\n  _handleScroll: function(e: Object) {\n    if (__DEV__) {\n      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {\n        console.log( // eslint-disable-line no-console-disallow\n          'You specified `onScroll` on a <ScrollView> but not ' +\n          '`scrollEventThrottle`. You will only receive one event. ' +\n          'Using `16` you get all the events but be aware that it may ' +\n          'cause frame drops, use a bigger number if you don\\'t need as ' +\n          'much precision.'\n        );\n      }\n    }\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n    }\n    this.scrollResponderHandleScroll(e);\n  },\n\n  _handleContentOnLayout: function(e: Object) {\n    const {width, height} = e.nativeEvent.layout;\n    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);\n  },\n\n  _scrollViewRef: (null: ?ScrollView),\n  _setScrollViewRef: function(ref: ?ScrollView) {\n    this._scrollViewRef = ref;\n  },\n\n  _innerViewRef: (null: ?NativeMethodsMixinType),\n  _setInnerViewRef: function(ref: ?NativeMethodsMixinType) {\n    this._innerViewRef = ref;\n  },\n\n  render: function() {\n    let ScrollViewClass;\n    let ScrollContentContainerViewClass;\n    if (Platform.OS === 'ios') {\n      ScrollViewClass = RCTScrollView;\n      ScrollContentContainerViewClass = RCTScrollContentView;\n      warning(\n        !this.props.snapToInterval || !this.props.pagingEnabled,\n        'snapToInterval is currently ignored when pagingEnabled is true.'\n      );\n    } else if (Platform.OS === 'android') {\n      if (this.props.horizontal) {\n        ScrollViewClass = AndroidHorizontalScrollView;\n      } else {\n        ScrollViewClass = AndroidScrollView;\n      }\n      ScrollContentContainerViewClass = View;\n    }\n\n    invariant(\n      ScrollViewClass !== undefined,\n      'ScrollViewClass must not be undefined'\n    );\n\n    invariant(\n      ScrollContentContainerViewClass !== undefined,\n      'ScrollContentContainerViewClass must not be undefined'\n    );\n\n    const contentContainerStyle = [\n      this.props.horizontal && styles.contentContainerHorizontal,\n      this.props.contentContainerStyle,\n    ];\n    let style, childLayoutProps;\n    if (__DEV__ && this.props.style) {\n      style = flattenStyle(this.props.style);\n      childLayoutProps = ['alignItems', 'justifyContent']\n        .filter((prop) => style && style[prop] !== undefined);\n      invariant(\n        childLayoutProps.length === 0,\n        'ScrollView child layout (' + JSON.stringify(childLayoutProps) +\n          ') must be applied through the contentContainerStyle prop.'\n      );\n    }\n\n    let contentSizeChangeProps = {};\n    if (this.props.onContentSizeChange) {\n      contentSizeChangeProps = {\n        onLayout: this._handleContentOnLayout,\n      };\n    }\n\n    const {stickyHeaderIndices} = this.props;\n    const hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    const childArray = hasStickyHeaders && React.Children.toArray(this.props.children);\n    const children = hasStickyHeaders ?\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      childArray.map((child, index) => {\n        /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n         * comment suppresses an error when upgrading Flow's support for React.\n         * To see the error delete this comment and run Flow. */\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n        if (indexOfIndex > -1) {\n          const key = child.key;\n          /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n           * comment suppresses an error when upgrading Flow's support for\n           * React. To see the error delete this comment and run Flow. */\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n          return (\n            <ScrollViewStickyHeader\n              key={key}\n              ref={(ref) => this._setStickyHeaderRef(key, ref)}\n              nextHeaderLayoutY={\n                /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss)\n                 * This comment suppresses an error when upgrading Flow's\n                 * support for React. To see the error delete this comment and\n                 * run Flow. */\n                this._headerLayoutYs.get(this._getKeyForIndex(nextIndex, childArray))\n              }\n              onLayout={(event) => this._onStickyHeaderLayout(index, event, key)}\n              scrollAnimatedValue={this._scrollAnimatedValue}>\n              {child}\n            </ScrollViewStickyHeader>\n          );\n        } else {\n          return child;\n        }\n      }) :\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      this.props.children;\n    const contentContainer =\n      <ScrollContentContainerViewClass\n        {...contentSizeChangeProps}\n        /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n         * comment suppresses an error when upgrading Flow's support for React.\n         * To see the error delete this comment and run Flow. */\n        ref={this._setInnerViewRef}\n        style={contentContainerStyle}\n        removeClippedSubviews={\n          // Subview clipping causes issues with sticky headers on Android and\n          // would be hard to fix properly in a performant way.\n          Platform.OS === 'android' && hasStickyHeaders ?\n            false :\n            this.props.removeClippedSubviews\n        }\n        collapsable={false}>\n        {children}\n      </ScrollContentContainerViewClass>;\n\n    const alwaysBounceHorizontal =\n      this.props.alwaysBounceHorizontal !== undefined ?\n        this.props.alwaysBounceHorizontal :\n        this.props.horizontal;\n\n    const alwaysBounceVertical =\n      this.props.alwaysBounceVertical !== undefined ?\n        this.props.alwaysBounceVertical :\n        !this.props.horizontal;\n\n    const DEPRECATED_sendUpdatedChildFrames =\n      !!this.props.DEPRECATED_sendUpdatedChildFrames;\n\n    const baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;\n    const props = {\n      ...this.props,\n      alwaysBounceHorizontal,\n      alwaysBounceVertical,\n      style: ([baseStyle, this.props.style]: ?Array<any>),\n      // Override the onContentSizeChange from props, since this event can\n      // bubble up from TextInputs\n      onContentSizeChange: null,\n      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,\n      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,\n      onResponderGrant: this.scrollResponderHandleResponderGrant,\n      onResponderReject: this.scrollResponderHandleResponderReject,\n      onResponderRelease: this.scrollResponderHandleResponderRelease,\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      onResponderTerminate: this.scrollResponderHandleTerminate,\n      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,\n      onScroll: this._handleScroll,\n      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,\n      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,\n      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,\n      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,\n      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,\n      onTouchEnd: this.scrollResponderHandleTouchEnd,\n      onTouchMove: this.scrollResponderHandleTouchMove,\n      onTouchStart: this.scrollResponderHandleTouchStart,\n      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,\n      sendMomentumEvents: (this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd) ?\n        true : false,\n      DEPRECATED_sendUpdatedChildFrames,\n    };\n\n    const { decelerationRate } = this.props;\n    if (decelerationRate) {\n      props.decelerationRate = processDecelerationRate(decelerationRate);\n    }\n\n    const refreshControl = this.props.refreshControl;\n\n    if (refreshControl) {\n      if (Platform.OS === 'ios') {\n        // On iOS the RefreshControl is a child of the ScrollView.\n        // tvOS lacks native support for RefreshControl, so don't include it in that case\n        return (\n          /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n           * comment suppresses an error when upgrading Flow's support for\n           * React. To see the error delete this comment and run Flow. */\n          <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n            {Platform.isTVOS ? null : refreshControl}\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      } else if (Platform.OS === 'android') {\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\n        // Since the ScrollView is wrapped add the style props to the\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\n        // Note: we should only apply props.style on the wrapper\n        // however, the ScrollView still needs the baseStyle to be scrollable\n\n        return React.cloneElement(\n          refreshControl,\n          {style: props.style},\n          /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n           * comment suppresses an error when upgrading Flow's support for\n           * React. To see the error delete this comment and run Flow. */\n          <ScrollViewClass {...props} style={baseStyle} ref={this._setScrollViewRef}>\n            {contentContainer}\n          </ScrollViewClass>\n        );\n      }\n    }\n    return (\n      /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This\n       * comment suppresses an error when upgrading Flow's support for React.\n       * To see the error delete this comment and run Flow. */\n      <ScrollViewClass {...props} ref={this._setScrollViewRef}>\n        {contentContainer}\n      </ScrollViewClass>\n    );\n  }\n});\n\nconst styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll',\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll',\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row',\n  },\n});\n\nlet nativeOnlyProps,\n  AndroidScrollView,\n  AndroidHorizontalScrollView,\n  RCTScrollView,\n  RCTScrollContentView;\nif (Platform.OS === 'android') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      sendMomentumEvents: true,\n    }\n  };\n  AndroidScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: React.ComponentType<any>),\n    nativeOnlyProps\n  );\n  AndroidHorizontalScrollView = requireNativeComponent(\n    'AndroidHorizontalScrollView',\n    (ScrollView: React.ComponentType<any>),\n    nativeOnlyProps\n  );\n} else if (Platform.OS === 'ios') {\n  nativeOnlyProps = {\n    nativeOnly: {\n      onMomentumScrollBegin: true,\n      onMomentumScrollEnd : true,\n      onScrollBeginDrag: true,\n      onScrollEndDrag: true,\n    }\n  };\n  RCTScrollView = requireNativeComponent(\n    'RCTScrollView',\n    (ScrollView: React.ComponentType<any>),\n    nativeOnlyProps,\n  );\n  // $FlowFixMe (bvaughn) Update ComponentInterface in ViewPropTypes to include a string type (for Fiber host components) in a follow-up.\n  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);\n}\n\nmodule.exports = ScrollView;\n"]}]