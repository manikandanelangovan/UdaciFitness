["03c4e49cbfd7b237687015c147fec96e3c24cae4","e2529e3b5bc077486341f32278e49b4be153cbfc",["NativeEventEmitter","NativeModules","fbjs/lib/invariant"],[69,133,199],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/PushNotificationIOS/PushNotificationIOS.js"],"names":["NativeEventEmitter","require","RCTPushNotificationManager","PushNotificationManager","invariant","PushNotificationEmitter","_notifHandlers","Map","DEVICE_NOTIF_EVENT","NOTIF_REGISTER_EVENT","NOTIF_REGISTRATION_ERROR_EVENT","DEVICE_LOCAL_NOTIF_EVENT","PushNotificationIOS","details","presentLocalNotification","scheduleLocalNotification","cancelAllLocalNotifications","removeAllDeliveredNotifications","callback","getDeliveredNotifications","identifiers","removeDeliveredNotifications","number","setApplicationIconBadgeNumber","getApplicationIconBadgeNumber","userInfo","cancelLocalNotifications","getScheduledLocalNotifications","type","handler","listener","addListener","notifData","registrationInfo","deviceToken","errorInfo","set","get","remove","delete","permissions","requestedPermissions","alert","badge","sound","requestPermissions","abandonPermissions","checkPermissions","getInitialNotification","then","notification","nativeNotif","_data","_remoteNotificationCompleteCallbackCalled","_isRemote","remote","_notificationId","notificationId","Object","keys","forEach","notifKey","notifVal","_alert","_sound","_badgeCount","_category","category","_contentAvailable","applicationIconBadgeNumber","soundName","alertBody","fetchResult","onFinishRemoteNotification","FetchResult","NewData","NoData","ResultFailed","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PushNotificationIOS\n * @flow\n */\n'use strict';\n\nconst NativeEventEmitter = require('NativeEventEmitter');\nconst RCTPushNotificationManager = require('NativeModules').PushNotificationManager;\nconst invariant = require('fbjs/lib/invariant');\n\nconst PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);\n\nconst _notifHandlers = new Map();\n\nconst DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';\nconst NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';\nconst NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';\nconst DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';\n\nexport type ContentAvailable = 1 | null | void;\n\nexport type FetchResult = {\n  NewData: string,\n  NoData: string,\n  ResultFailed: string,\n};\n\n/**\n * An event emitted by PushNotificationIOS.\n */\nexport type PushNotificationEventName = $Enum<{\n  /**\n   * Fired when a remote notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  notification: string,\n  /**\n   * Fired when a local notification is received. The handler will be invoked\n   * with an instance of `PushNotificationIOS`.\n   */\n  localNotification: string,\n  /**\n   * Fired when the user registers for remote notifications. The handler will be\n   * invoked with a hex string representing the deviceToken.\n   */\n  register: string,\n  /**\n   * Fired when the user fails to register for remote notifications. Typically\n   * occurs when APNS is having issues, or the device is a simulator. The\n   * handler will be invoked with {message: string, code: number, details: any}.\n   */\n  registrationError: string,\n}>;\n\n/**\n * <div class=\"banner-crna-ejected\">\n *   <h3>Projects with Native Code Only</h3>\n *   <p>\n *     This section only applies to projects made with <code>react-native init</code>\n *     or to those made with Create React Native App which have since ejected. For\n *     more information about ejecting, please see\n *     the <a href=\"https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md\" target=\"_blank\">guide</a> on\n *     the Create React Native App repository.\n *   </p>\n * </div>\n *\n * Handle push notifications for your app, including permission handling and\n * icon badge number.\n *\n * To get up and running, [configure your notifications with Apple](https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AddingCapabilities/AddingCapabilities.html#//apple_ref/doc/uid/TP40012582-CH26-SW6)\n * and your server-side system.\n *\n * [Manually link](docs/linking-libraries-ios.html#manual-linking) the PushNotificationIOS library\n *\n * - Add the following to your Project: `node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotification.xcodeproj`\n * - Add the following to `Link Binary With Libraries`: `libRCTPushNotification.a`\n *\n * Finally, to enable support for `notification` and `register` events you need to augment your AppDelegate.\n *\n * At the top of your `AppDelegate.m`:\n *\n *   `#import <React/RCTPushNotificationManager.h>`\n *\n * And then in your AppDelegate implementation add the following:\n *\n *   ```\n *    // Required to register for notifications\n *    - (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings\n *    {\n *     [RCTPushNotificationManager didRegisterUserNotificationSettings:notificationSettings];\n *    }\n *    // Required for the register event.\n *    - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n *    {\n *     [RCTPushNotificationManager didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n *    }\n *    // Required for the notification event. You must call the completion handler after handling the remote notification.\n *    - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\n *                                                           fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n *    {\n *      [RCTPushNotificationManager didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];\n *    }\n *    // Required for the registrationError event.\n *    - (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error\n *    {\n *     [RCTPushNotificationManager didFailToRegisterForRemoteNotificationsWithError:error];\n *    }\n *    // Required for the localNotification event.\n *    - (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification\n *    {\n *     [RCTPushNotificationManager didReceiveLocalNotification:notification];\n *    }\n *   ```\n */\nclass PushNotificationIOS {\n  _data: Object;\n  _alert: string | Object;\n  _sound: string;\n  _category: string;\n  _contentAvailable: ContentAvailable;\n  _badgeCount: number;\n  _notificationId: string;\n  _isRemote: boolean;\n  _remoteNotificationCompleteCallbackCalled: boolean;\n\n  static FetchResult: FetchResult = {\n    NewData: 'UIBackgroundFetchResultNewData',\n    NoData: 'UIBackgroundFetchResultNoData',\n    ResultFailed: 'UIBackgroundFetchResultFailed',\n  };\n\n  /**\n   * Schedules the localNotification for immediate presentation.\n   *\n   * details is an object containing:\n   *\n   * - `alertBody` : The message displayed in the notification alert.\n   * - `alertAction` : The \"action\" displayed beneath an actionable notification. Defaults to \"view\";\n   * - `soundName` : The sound played when the notification is fired (optional).\n   * - `isSilent`  : If true, the notification will appear without sound (optional).\n   * - `category`  : The category of this notification, required for actionable notifications (optional).\n   * - `userInfo`  : An optional object containing additional notification data.\n   * - `applicationIconBadgeNumber` (optional) : The number to display as the app's icon badge. The default value of this property is 0, which means that no badge is displayed.\n   */\n  static presentLocalNotification(details: Object) {\n    RCTPushNotificationManager.presentLocalNotification(details);\n  }\n\n  /**\n   * Schedules the localNotification for future presentation.\n   *\n   * details is an object containing:\n   *\n   * - `fireDate` : The date and time when the system should deliver the notification.\n   * - `alertTitle` : The text displayed as the title of the notification alert.\n   * - `alertBody` : The message displayed in the notification alert.\n   * - `alertAction` : The \"action\" displayed beneath an actionable notification. Defaults to \"view\";\n   * - `soundName` : The sound played when the notification is fired (optional).\n   * - `isSilent`  : If true, the notification will appear without sound (optional).\n   * - `category`  : The category of this notification, required for actionable notifications (optional).\n   * - `userInfo` : An optional object containing additional notification data.\n   * - `applicationIconBadgeNumber` (optional) : The number to display as the app's icon badge. Setting the number to 0 removes the icon badge.\n   * - `repeatInterval` : The interval to repeat as a string.  Possible values: `minute`, `hour`, `day`, `week`, `month`, `year`.\n   */\n  static scheduleLocalNotification(details: Object) {\n    RCTPushNotificationManager.scheduleLocalNotification(details);\n  }\n\n  /**\n   * Cancels all scheduled localNotifications\n   */\n  static cancelAllLocalNotifications() {\n    RCTPushNotificationManager.cancelAllLocalNotifications();\n  }\n\n  /**\n   * Remove all delivered notifications from Notification Center\n   */\n  static removeAllDeliveredNotifications(): void {\n    RCTPushNotificationManager.removeAllDeliveredNotifications();\n  }\n\n  /**\n   * Provides you with a list of the app’s notifications that are still displayed in Notification Center\n   *\n   * @param callback Function which receive an array of delivered notifications\n   *\n   *  A delivered notification is an object containing:\n   *\n   * - `identifier`  : The identifier of this notification.\n   * - `title`  : The title of this notification.\n   * - `body`  : The body of this notification.\n   * - `category`  : The category of this notification, if has one.\n   * - `userInfo`  : An optional object containing additional notification data.\n   * - `thread-id`  : The thread identifier of this notification, if has one.\n   */\n  static getDeliveredNotifications(callback: (notifications: Array<Object>) => void): void {\n    RCTPushNotificationManager.getDeliveredNotifications(callback);\n  }\n\n  /**\n   * Removes the specified notifications from Notification Center\n   *\n   * @param identifiers Array of notification identifiers\n   */\n  static removeDeliveredNotifications(identifiers: Array<string>): void {\n    RCTPushNotificationManager.removeDeliveredNotifications(identifiers);\n  }\n\n  /**\n   * Sets the badge number for the app icon on the home screen\n   */\n  static setApplicationIconBadgeNumber(number: number) {\n    RCTPushNotificationManager.setApplicationIconBadgeNumber(number);\n  }\n\n  /**\n   * Gets the current badge number for the app icon on the home screen\n   */\n  static getApplicationIconBadgeNumber(callback: Function) {\n    RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);\n  }\n\n  /**\n   * Cancel local notifications.\n   *\n   * Optionally restricts the set of canceled notifications to those\n   * notifications whose `userInfo` fields match the corresponding fields\n   * in the `userInfo` argument.\n   */\n  static cancelLocalNotifications(userInfo: Object) {\n    RCTPushNotificationManager.cancelLocalNotifications(userInfo);\n  }\n\n  /**\n   * Gets the local notifications that are currently scheduled.\n   */\n  static getScheduledLocalNotifications(callback: Function) {\n    RCTPushNotificationManager.getScheduledLocalNotifications(callback);\n  }\n\n  /**\n   * Attaches a listener to remote or local notification events while the app is running\n   * in the foreground or the background.\n   *\n   * Valid events are:\n   *\n   * - `notification` : Fired when a remote notification is received. The\n   *   handler will be invoked with an instance of `PushNotificationIOS`.\n   * - `localNotification` : Fired when a local notification is received. The\n   *   handler will be invoked with an instance of `PushNotificationIOS`.\n   * - `register`: Fired when the user registers for remote notifications. The\n   *   handler will be invoked with a hex string representing the deviceToken.\n   * - `registrationError`: Fired when the user fails to register for remote\n   *   notifications. Typically occurs when APNS is having issues, or the device\n   *   is a simulator. The handler will be invoked with\n   *   {message: string, code: number, details: any}.\n   */\n  static addEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events'\n    );\n    var listener;\n    if (type === 'notification') {\n      listener =  PushNotificationEmitter.addListener(\n        DEVICE_NOTIF_EVENT,\n        (notifData) => {\n          handler(new PushNotificationIOS(notifData));\n        }\n      );\n    } else if (type === 'localNotification') {\n      listener = PushNotificationEmitter.addListener(\n        DEVICE_LOCAL_NOTIF_EVENT,\n        (notifData) => {\n          handler(new PushNotificationIOS(notifData));\n        }\n      );\n    } else if (type === 'register') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTER_EVENT,\n        (registrationInfo) => {\n          handler(registrationInfo.deviceToken);\n        }\n      );\n    } else if (type === 'registrationError') {\n      listener = PushNotificationEmitter.addListener(\n        NOTIF_REGISTRATION_ERROR_EVENT,\n        (errorInfo) => {\n          handler(errorInfo);\n        }\n      );\n    }\n    _notifHandlers.set(type, listener);\n  }\n\n  /**\n   * Removes the event listener. Do this in `componentWillUnmount` to prevent\n   * memory leaks\n   */\n  static removeEventListener(type: PushNotificationEventName, handler: Function) {\n    invariant(\n      type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification',\n      'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events'\n    );\n    var listener = _notifHandlers.get(type);\n    if (!listener) {\n      return;\n    }\n    listener.remove();\n    _notifHandlers.delete(type);\n  }\n\n  /**\n   * Requests notification permissions from iOS, prompting the user's\n   * dialog box. By default, it will request all notification permissions, but\n   * a subset of these can be requested by passing a map of requested\n   * permissions.\n   * The following permissions are supported:\n   *\n   *   - `alert`\n   *   - `badge`\n   *   - `sound`\n   *\n   * If a map is provided to the method, only the permissions with truthy values\n   * will be requested.\n\n   * This method returns a promise that will resolve when the user accepts,\n   * rejects, or if the permissions were previously rejected. The promise\n   * resolves to the current state of the permission.\n   */\n  static requestPermissions(permissions?: {\n    alert?: boolean,\n    badge?: boolean,\n    sound?: boolean\n  }): Promise<{\n    alert: boolean,\n    badge: boolean,\n    sound: boolean\n  }> {\n    var requestedPermissions = {};\n    if (permissions) {\n      requestedPermissions = {\n        alert: !!permissions.alert,\n        badge: !!permissions.badge,\n        sound: !!permissions.sound\n      };\n    } else {\n      requestedPermissions = {\n        alert: true,\n        badge: true,\n        sound: true\n      };\n    }\n    return RCTPushNotificationManager.requestPermissions(requestedPermissions);\n  }\n\n  /**\n   * Unregister for all remote notifications received via Apple Push Notification service.\n   *\n   * You should call this method in rare circumstances only, such as when a new version of\n   * the app removes support for all types of remote notifications. Users can temporarily\n   * prevent apps from receiving remote notifications through the Notifications section of\n   * the Settings app. Apps unregistered through this method can always re-register.\n   */\n  static abandonPermissions() {\n    RCTPushNotificationManager.abandonPermissions();\n  }\n\n  /**\n   * See what push permissions are currently enabled. `callback` will be\n   * invoked with a `permissions` object:\n   *\n   *  - `alert` :boolean\n   *  - `badge` :boolean\n   *  - `sound` :boolean\n   */\n  static checkPermissions(callback: Function) {\n    invariant(\n      typeof callback === 'function',\n      'Must provide a valid callback'\n    );\n    RCTPushNotificationManager.checkPermissions(callback);\n  }\n\n  /**\n   * This method returns a promise that resolves to either the notification\n   * object if the app was launched by a push notification, or `null` otherwise.\n   */\n  static getInitialNotification(): Promise<?PushNotificationIOS> {\n    return RCTPushNotificationManager.getInitialNotification().then(notification => {\n      return notification && new PushNotificationIOS(notification);\n    });\n  }\n\n  /**\n   * You will never need to instantiate `PushNotificationIOS` yourself.\n   * Listening to the `notification` event and invoking\n   * `getInitialNotification` is sufficient\n   */\n  constructor(nativeNotif: Object) {\n    this._data = {};\n    this._remoteNotificationCompleteCallbackCalled = false;\n    this._isRemote = nativeNotif.remote;\n    if (this._isRemote) {\n      this._notificationId = nativeNotif.notificationId;\n    }\n\n    if (nativeNotif.remote) {\n      // Extract data from Apple's `aps` dict as defined:\n      // https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html\n      Object.keys(nativeNotif).forEach((notifKey) => {\n        var notifVal = nativeNotif[notifKey];\n        if (notifKey === 'aps') {\n          this._alert = notifVal.alert;\n          this._sound = notifVal.sound;\n          this._badgeCount = notifVal.badge;\n          this._category = notifVal.category;\n          this._contentAvailable = notifVal['content-available'];\n        } else {\n          this._data[notifKey] = notifVal;\n        }\n      });\n    } else {\n      // Local notifications aren't being sent down with `aps` dict.\n      this._badgeCount = nativeNotif.applicationIconBadgeNumber;\n      this._sound = nativeNotif.soundName;\n      this._alert = nativeNotif.alertBody;\n      this._data = nativeNotif.userInfo;\n      this._category = nativeNotif.category;\n    }\n  }\n\n  /**\n   * This method is available for remote notifications that have been received via:\n   * `application:didReceiveRemoteNotification:fetchCompletionHandler:`\n   * https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler:\n   *\n   * Call this to execute when the remote notification handling is complete. When\n   * calling this block, pass in the fetch result value that best describes\n   * the results of your operation. You *must* call this handler and should do so\n   * as soon as possible. For a list of possible values, see `PushNotificationIOS.FetchResult`.\n   *\n   * If you do not call this method your background remote notifications could\n   * be throttled, to read more about it see the above documentation link.\n   */\n  finish(fetchResult: FetchResult) {\n    if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {\n      return;\n    }\n    this._remoteNotificationCompleteCallbackCalled = true;\n\n    RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);\n  }\n\n  /**\n   * An alias for `getAlert` to get the notification's main message string\n   */\n  getMessage(): ?string | ?Object {\n    // alias because \"alert\" is an ambiguous name\n    return this._alert;\n  }\n\n  /**\n   * Gets the sound string from the `aps` object\n   */\n  getSound(): ?string {\n    return this._sound;\n  }\n\n  /**\n   * Gets the category string from the `aps` object\n   */\n  getCategory(): ?string {\n    return this._category;\n  }\n\n  /**\n   * Gets the notification's main message from the `aps` object\n   */\n  getAlert(): ?string | ?Object {\n    return this._alert;\n  }\n\n  /**\n   * Gets the content-available number from the `aps` object\n   */\n  getContentAvailable(): ContentAvailable {\n    return this._contentAvailable;\n  }\n\n  /**\n   * Gets the badge count number from the `aps` object\n   */\n  getBadgeCount(): ?number {\n    return this._badgeCount;\n  }\n\n  /**\n   * Gets the data object on the notif\n   */\n  getData(): ?Object {\n    return this._data;\n  }\n}\n\nmodule.exports = PushNotificationIOS;\n"]}]