["6877d96abc39fdab01e5680423a1b57a536c4503","b973e087ec915a6e00a125776b1368be1414e4e7",["./AnimatedEvent","./nodes/AnimatedProps","React","ViewStylePropTypes"],[39,132,178,221],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Animated/src/createAnimatedComponent.js"],"names":["require","AnimatedEvent","AnimatedProps","React","ViewStylePropTypes","createAnimatedComponent","Component","AnimatedComponent","props","_eventDetachers","_setComponentRef","bind","_propsAnimated","__detach","_detachNativeEvents","_component","setNativeProps","_attachProps","setNativeView","_attachNativeEvents","scrollableNode","getScrollableNode","key","prop","__isNative","__attach","push","forEach","remove","nextProps","oldPropsAnimated","callback","__skipSetNativeProps_FOR_TESTS_ONLY","__getAnimatedValue","Error","forceUpdate","newProps","prevProps","_prevComponent","__getValue","collapsable","c","propTypes","__propTypesSecretDontUseThesePlease","style","propName","componentName","undefined","console","warn","module","exports"],"mappings":";AAYA;;eAEwBA,QAAQ,iBAAR,C;IAAjBC,a,YAAAA,a;;AACP,IAAMC,gBAAgBF,QAAQ,uBAAR,CAAtB;AACA,IAAMG,QAAQH,OAAR,SAAN;AACA,IAAMI,qBAAqBJ,OAArB,sBAAN;;AAEA,SAASK,uBAAT,CAAiCC,SAAjC,EAAsD;AAAA;;AAAA,MAC9CC,iBAD8C;AAAA;;AAUlD,+BAAYC,KAAZ,EAA2B;AAAA;;AAAA,oJACnBA,KADmB;;AAAA,YAL3BC,eAK2B,GALQ,EAKR;;AAEzB,YAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,OAAxB;AAFyB;AAG1B;;AAbiD;AAAA;AAAA,6CAe3B;AACrB,aAAKC,cAAL,IAAuB,KAAKA,cAAL,CAAoBC,QAApB,EAAvB;AACA,aAAKC,mBAAL;AACD;AAlBiD;AAAA;AAAA,qCAoBnCN,KApBmC,EAoB5B;AACpB,aAAKO,UAAL,CAAgBC,cAAhB,CAA+BR,KAA/B;AACD;AAtBiD;AAAA;AAAA,2CAwB7B;AACnB,aAAKS,YAAL,CAAkB,KAAKT,KAAvB;AACD;AA1BiD;AAAA;AAAA,0CA4B9B;AAClB,aAAKI,cAAL,CAAoBM,aAApB,CAAkC,KAAKH,UAAvC;AACA,aAAKI,mBAAL;AACD;AA/BiD;AAAA;AAAA,4CAiC5B;AAAA;;AAGpB,YAAMC,iBAAiB,KAAKL,UAAL,CAAgBM,iBAAhB,GACnB,KAAKN,UAAL,CAAgBM,iBAAhB,EADmB,GAEnB,KAAKN,UAFT;;AAHoB,mCAOTO,GAPS;AAQlB,cAAMC,OAAO,OAAKf,KAAL,CAAWc,GAAX,CAAb;AACA,cAAIC,gBAAgBtB,aAAhB,IAAiCsB,KAAKC,UAA1C,EAAsD;AACpDD,iBAAKE,QAAL,CAAcL,cAAd,EAA8BE,GAA9B;AACA,mBAAKb,eAAL,CAAqBiB,IAArB,CAA0B;AAAA,qBAAMH,KAAKV,QAAL,CAAcO,cAAd,EAA8BE,GAA9B,CAAN;AAAA,aAA1B;AACD;AAZiB;;AAOpB,aAAK,IAAMA,GAAX,IAAkB,KAAKd,KAAvB,EAA8B;AAAA,gBAAnBc,GAAmB;AAM7B;AACF;AA/CiD;AAAA;AAAA,4CAiD5B;AACpB,aAAKb,eAAL,CAAqBkB,OAArB,CAA6B;AAAA,iBAAUC,QAAV;AAAA,SAA7B;AACA,aAAKnB,eAAL,GAAuB,EAAvB;AACD;AApDiD;AAAA;AAAA,mCAsDrCoB,SAtDqC,EAsD1B;AAAA;;AACtB,YAAMC,mBAAmB,KAAKlB,cAA9B;;AAQA,YAAMmB,WAAW,SAAXA,QAAW,GAAM;AACrB,cACE,CAACxB,kBAAkByB,mCAAnB,IACA,OAAKjB,UAAL,CAAgBC,cAFlB,EAGE;AACA,gBAAI,CAAC,OAAKJ,cAAL,CAAoBY,UAAzB,EAAqC;AACnC,qBAAKT,UAAL,CAAgBC,cAAhB,CACE,OAAKJ,cAAL,CAAoBqB,kBAApB,EADF;AAGD,aAJD,MAIO;AACL,oBAAM,IAAIC,KAAJ,CACJ,uDACE,8DADF,GAEE,wCAHE,CAAN;AAKD;AACF,WAfD,MAeO;AACL,mBAAKC,WAAL;AACD;AACF,SAnBD;;AAqBA,aAAKvB,cAAL,GAAsB,IAAIV,aAAJ,CAAkB2B,SAAlB,EAA6BE,QAA7B,CAAtB;;AAUAD,4BAAoBA,iBAAiBjB,QAAjB,EAApB;AACD;AA/FiD;AAAA;AAAA,gDAiGxBuB,QAjGwB,EAiGd;AAClC,aAAKnB,YAAL,CAAkBmB,QAAlB;AACD;AAnGiD;AAAA;AAAA,yCAqG/BC,SArG+B,EAqGpB;AAC5B,YAAI,KAAKtB,UAAL,KAAoB,KAAKuB,cAA7B,EAA6C;AAC3C,eAAK1B,cAAL,CAAoBM,aAApB,CAAkC,KAAKH,UAAvC;AACD;AACD,YAAI,KAAKA,UAAL,KAAoB,KAAKuB,cAAzB,IAA2CD,cAAc,KAAK7B,KAAlE,EAAyE;AACvE,eAAKM,mBAAL;AACA,eAAKK,mBAAL;AACD;AACF;AA7GiD;AAAA;AAAA,+BA+GzC;AACP,YAAMX,QAAQ,KAAKI,cAAL,CAAoB2B,UAApB,EAAd;AACA,eACE,oBAAC,SAAD,2BACM/B,KADN;AAEE,eAAK,KAAKE,gBAFZ;;AAOE,uBACE,KAAKE,cAAL,CAAoBY,UAApB,GAAiC,KAAjC,GAAyChB,MAAMgC;AARnD,WADF;AAaD;AA9HiD;AAAA;AAAA,uCAgIjCC,CAhIiC,EAgI9B;AAClB,aAAKH,cAAL,GAAsB,KAAKvB,UAA3B;AACA,aAAKA,UAAL,GAAkB0B,CAAlB;AACD;AAnIiD;AAAA;AAAA,gCAuIxC;AACR,eAAO,KAAK1B,UAAZ;AACD;AAzIiD;AAAA;AAAA,IACpBZ,MAAMG,SADc,UAQ3C0B,mCAR2C,GAQL,KARK;;AAiJpD,MAAMU,YACJpC,UAAUqC,mCAAV,IAAiDrC,UAAUoC,SAD7D;;AAGAnC,oBAAkBmC,SAAlB,GAA8B;AAC5BE,WAAO,eAASpC,KAAT,EAAgBqC,QAAhB,EAA0BC,aAA1B,EAAyC;AAC9C,UAAI,CAACJ,SAAL,EAAgB;AACd;AACD;;AAED,WAAK,IAAMpB,GAAX,IAAkBlB,kBAAlB,EAAsC;AACpC,YAAI,CAACsC,UAAUpB,GAAV,CAAD,IAAmBd,MAAMc,GAAN,MAAeyB,SAAtC,EAAiD;AAC/CC,kBAAQC,IAAR,CACE,kCACE3B,GADF,GAEE,0BAFF,GAGE,oCAHF,GAIE,mBAJF,GAKEA,GALF,GAME,YAPJ;AASD;AACF;AACF;AAnB2B,GAA9B;;AAsBA,SAAOf,iBAAP;AACD;;AAED2C,OAAOC,OAAP,GAAiB9C,uBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule createAnimatedComponent\n * @flow\n * @format\n */\n'use strict';\n\nconst {AnimatedEvent} = require('./AnimatedEvent');\nconst AnimatedProps = require('./nodes/AnimatedProps');\nconst React = require('React');\nconst ViewStylePropTypes = require('ViewStylePropTypes');\n\nfunction createAnimatedComponent(Component: any): any {\n  class AnimatedComponent extends React.Component<Object> {\n    _component: any;\n    _prevComponent: any;\n    _propsAnimated: AnimatedProps;\n    _eventDetachers: Array<Function> = [];\n    _setComponentRef: Function;\n\n    static __skipSetNativeProps_FOR_TESTS_ONLY = false;\n\n    constructor(props: Object) {\n      super(props);\n      this._setComponentRef = this._setComponentRef.bind(this);\n    }\n\n    componentWillUnmount() {\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    setNativeProps(props) {\n      this._component.setNativeProps(props);\n    }\n\n    componentWillMount() {\n      this._attachProps(this.props);\n    }\n\n    componentDidMount() {\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n    }\n\n    _attachNativeEvents() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      const scrollableNode = this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && prop.__isNative) {\n          prop.__attach(scrollableNode, key);\n          this._eventDetachers.push(() => prop.__detach(scrollableNode, key));\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      this._eventDetachers.forEach(remove => remove());\n      this._eventDetachers = [];\n    }\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      // The system is best designed when setNativeProps is implemented. It is\n      // able to avoid re-rendering and directly set the attributes that\n      // changed. However, setNativeProps can only be implemented on leaf\n      // native components. If you want to animate a composite component, you\n      // need to re-render it. In this case, we have a fallback that uses\n      // forceUpdate.\n      const callback = () => {\n        if (\n          !AnimatedComponent.__skipSetNativeProps_FOR_TESTS_ONLY &&\n          this._component.setNativeProps\n        ) {\n          if (!this._propsAnimated.__isNative) {\n            this._component.setNativeProps(\n              this._propsAnimated.__getAnimatedValue(),\n            );\n          } else {\n            throw new Error(\n              'Attempting to run JS driven animation on animated ' +\n                'node that has been moved to \"native\" earlier by starting an ' +\n                'animation with `useNativeDriver: true`',\n            );\n          }\n        } else {\n          this.forceUpdate();\n        }\n      };\n\n      this._propsAnimated = new AnimatedProps(nextProps, callback);\n\n      // When you call detach, it removes the element from the parent list\n      // of children. If it goes to 0, then the parent also detaches itself\n      // and so on.\n      // An optimization is to attach the new elements and THEN detach the old\n      // ones instead of detaching and THEN attaching.\n      // This way the intermediate state isn't to go to 0 and trigger\n      // this expensive recursive detaching to then re-attach everything on\n      // the very next operation.\n      oldPropsAnimated && oldPropsAnimated.__detach();\n    }\n\n    componentWillReceiveProps(newProps) {\n      this._attachProps(newProps);\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this._component !== this._prevComponent) {\n        this._propsAnimated.setNativeView(this._component);\n      }\n      if (this._component !== this._prevComponent || prevProps !== this.props) {\n        this._detachNativeEvents();\n        this._attachNativeEvents();\n      }\n    }\n\n    render() {\n      const props = this._propsAnimated.__getValue();\n      return (\n        <Component\n          {...props}\n          ref={this._setComponentRef}\n          // The native driver updates views directly through the UI thread so we\n          // have to make sure the view doesn't get optimized away because it cannot\n          // go through the NativeViewHierachyManager since it operates on the shadow\n          // thread.\n          collapsable={\n            this._propsAnimated.__isNative ? false : props.collapsable\n          }\n        />\n      );\n    }\n\n    _setComponentRef(c) {\n      this._prevComponent = this._component;\n      this._component = c;\n    }\n\n    // A third party library can use getNode()\n    // to get the node reference of the decorated component\n    getNode() {\n      return this._component;\n    }\n  }\n\n  // ReactNative `View.propTypes` have been deprecated in favor of\n  // `ViewPropTypes`. In their place a temporary getter has been added with a\n  // deprecated warning message. Avoid triggering that warning here by using\n  // temporary workaround, __propTypesSecretDontUseThesePlease.\n  // TODO (bvaughn) Revert this particular change any time after April 1\n  const propTypes =\n    Component.__propTypesSecretDontUseThesePlease || Component.propTypes;\n\n  AnimatedComponent.propTypes = {\n    style: function(props, propName, componentName) {\n      if (!propTypes) {\n        return;\n      }\n\n      for (const key in ViewStylePropTypes) {\n        if (!propTypes[key] && props[key] !== undefined) {\n          console.warn(\n            'You are setting the style `{ ' +\n              key +\n              ': ... }` as a prop. You ' +\n              'should nest it in a style object. ' +\n              'E.g. `{ style: { ' +\n              key +\n              ': ... } }`',\n          );\n        }\n      }\n    },\n  };\n\n  return AnimatedComponent;\n}\n\nmodule.exports = createAnimatedComponent;\n"]}]