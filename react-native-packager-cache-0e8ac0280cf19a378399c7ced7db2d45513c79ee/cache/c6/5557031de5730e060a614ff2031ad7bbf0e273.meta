["21aa9f5f199ee61131fc666a5760fa0e296d6204","7ff6772ef2415f7359b784213ad0485bef5f8fad",["ActivityIndicator","EdgeInsetsPropType","React","prop-types","ReactNative","StyleSheet","Text","UIManager","View","ViewPropTypes","ScrollView","deprecatedPropType","fbjs/lib/invariant","fbjs/lib/keyMirror","processDecelerationRate","requireNativeComponent","resolveAssetSource","NativeModules"],[69,124,167,201,242,283,317,350,383,420,463,512,559,606,667,732,792,848],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/WebView/WebView.ios.js"],"names":["ActivityIndicator","require","EdgeInsetsPropType","React","PropTypes","ReactNative","StyleSheet","Text","UIManager","View","ViewPropTypes","ScrollView","deprecatedPropType","invariant","keyMirror","processDecelerationRate","requireNativeComponent","resolveAssetSource","RCTWebViewManager","WebViewManager","BGWASH","RCT_WEBVIEW_REF","WebViewState","IDLE","LOADING","ERROR","NavigationType","click","formsubmit","backforward","reload","formresubmit","other","JSNavigationScheme","DataDetectorTypes","defaultRenderLoading","styles","loadingView","defaultRenderError","errorDomain","errorCode","errorDesc","errorContainer","errorTextTitle","errorText","WebView","state","viewState","lastErrorEvent","startInLoadingState","goForward","dispatchViewManagerCommand","getWebViewHandle","RCTWebView","Commands","goBack","setState","stopLoading","postMessage","data","String","injectJavaScript","_updateNavigationState","event","props","onNavigationStateChange","nativeEvent","findNodeHandle","refs","_onLoadingStart","onLoadStart","_onLoadingError","persist","onError","onLoadEnd","console","warn","_onLoadingFinish","onLoad","_onMessage","onMessage","otherView","renderLoading","errorEvent","renderError","domain","code","description","error","loading","webViewStyles","container","webView","style","push","hidden","onShouldStartLoadWithRequest","shouldStart","startLoadWithResult","lockIdentifier","decelerationRate","source","html","url","uri","messagingEnabled","injectedJavaScript","bounces","scrollEnabled","contentInset","automaticallyAdjustContentInsets","scalesPageToFit","allowsInlineMediaPlayback","mediaPlaybackRequiresUserAction","dataDetectorTypes","Component","propTypes","string","oneOfType","shape","method","headers","object","body","baseUrl","number","func","bool","oneOf","arrayOf","javaScriptEnabled","thirdPartyCookiesEnabled","domStorageEnabled","userAgent","mixedContentMode","defaultProps","nativeOnly","onLoadingStart","onLoadingError","onLoadingFinish","create","flex","justifyContent","alignItems","backgroundColor","fontSize","textAlign","marginBottom","fontWeight","height","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule WebView\n * @noflow\n */\n'use strict';\n\nvar ActivityIndicator = require('ActivityIndicator');\nvar EdgeInsetsPropType = require('EdgeInsetsPropType');\nvar React = require('React');\nvar PropTypes = require('prop-types');\nvar ReactNative = require('ReactNative');\nvar StyleSheet = require('StyleSheet');\nvar Text = require('Text');\nvar UIManager = require('UIManager');\nvar View = require('View');\nvar ViewPropTypes = require('ViewPropTypes');\nvar ScrollView = require('ScrollView');\n\nvar deprecatedPropType = require('deprecatedPropType');\nvar invariant = require('fbjs/lib/invariant');\nvar keyMirror = require('fbjs/lib/keyMirror');\nvar processDecelerationRate = require('processDecelerationRate');\nvar requireNativeComponent = require('requireNativeComponent');\nvar resolveAssetSource = require('resolveAssetSource');\n\nvar RCTWebViewManager = require('NativeModules').WebViewManager;\n\nvar BGWASH = 'rgba(255,255,255,0.8)';\nvar RCT_WEBVIEW_REF = 'webview';\n\nvar WebViewState = keyMirror({\n  IDLE: null,\n  LOADING: null,\n  ERROR: null,\n});\n\nconst NavigationType = keyMirror({\n  click: true,\n  formsubmit: true,\n  backforward: true,\n  reload: true,\n  formresubmit: true,\n  other: true,\n});\n\nconst JSNavigationScheme = 'react-js-navigation';\n\ntype ErrorEvent = {\n  domain: any,\n  code: any,\n  description: any,\n}\n\ntype Event = Object;\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\nvar defaultRenderLoading = () => (\n  <View style={styles.loadingView}>\n    <ActivityIndicator />\n  </View>\n);\nvar defaultRenderError = (errorDomain, errorCode, errorDesc) => (\n  <View style={styles.errorContainer}>\n    <Text style={styles.errorTextTitle}>\n      Error loading page\n    </Text>\n    <Text style={styles.errorText}>\n      {'Domain: ' + errorDomain}\n    </Text>\n    <Text style={styles.errorText}>\n      {'Error Code: ' + errorCode}\n    </Text>\n    <Text style={styles.errorText}>\n      {'Description: ' + errorDesc}\n    </Text>\n  </View>\n);\n\n/**\n * `WebView` renders web content in a native view.\n *\n *```\n * import React, { Component } from 'react';\n * import { WebView } from 'react-native';\n *\n * class MyWeb extends Component {\n *   render() {\n *     return (\n *       <WebView\n *         source={{uri: 'https://github.com/facebook/react-native'}}\n *         style={{marginTop: 20}}\n *       />\n *     );\n *   }\n * }\n *```\n *\n * You can use this component to navigate back and forth in the web view's\n * history and configure various properties for the web content.\n */\nclass WebView extends React.Component {\n  static JSNavigationScheme = JSNavigationScheme;\n  static NavigationType = NavigationType;\n\n  static propTypes = {\n    ...ViewPropTypes,\n\n    html: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    url: deprecatedPropType(\n      PropTypes.string,\n      'Use the `source` prop instead.'\n    ),\n\n    /**\n     * Loads static html or a uri (with optional headers) in the WebView.\n     */\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        /*\n         * The URI to load in the `WebView`. Can be a local or remote file.\n         */\n        uri: PropTypes.string,\n        /*\n         * The HTTP Method to use. Defaults to GET if not specified.\n         * NOTE: On Android, only GET and POST are supported.\n         */\n        method: PropTypes.string,\n        /*\n         * Additional HTTP headers to send with the request.\n         * NOTE: On Android, this can only be used with GET requests.\n         */\n        headers: PropTypes.object,\n        /*\n         * The HTTP body to send with the request. This must be a valid\n         * UTF-8 string, and will be sent exactly as specified, with no\n         * additional encoding (e.g. URL-escaping or base64) applied.\n         * NOTE: On Android, this can only be used with POST requests.\n         */\n        body: PropTypes.string,\n      }),\n      PropTypes.shape({\n        /*\n         * A static HTML page to display in the WebView.\n         */\n        html: PropTypes.string,\n        /*\n         * The base URL to be used for any relative links in the HTML.\n         */\n        baseUrl: PropTypes.string,\n      }),\n      /*\n       * Used internally by packager.\n       */\n      PropTypes.number,\n    ]),\n\n    /**\n     * Function that returns a view to show if there's an error.\n     */\n    renderError: PropTypes.func, // view to show if there's an error\n    /**\n     * Function that returns a loading indicator.\n     */\n    renderLoading: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` has finished loading.\n     */\n    onLoad: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` load succeeds or fails.\n     */\n    onLoadEnd: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` starts loading.\n     */\n    onLoadStart: PropTypes.func,\n    /**\n     * Function that is invoked when the `WebView` load fails.\n     */\n    onError: PropTypes.func,\n    /**\n     * Boolean value that determines whether the web view bounces\n     * when it reaches the edge of the content. The default value is `true`.\n     * @platform ios\n     */\n    bounces: PropTypes.bool,\n    /**\n     * A floating-point number that determines how quickly the scroll view\n     * decelerates after the user lifts their finger. You may also use the\n     * string shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS\n     * settings for `UIScrollViewDecelerationRateNormal` and\n     * `UIScrollViewDecelerationRateFast` respectively:\n     *\n     *   - normal: 0.998\n     *   - fast: 0.99 (the default for iOS web view)\n     * @platform ios\n     */\n    decelerationRate: ScrollView.propTypes.decelerationRate,\n    /**\n     * Boolean value that determines whether scrolling is enabled in the\n     * `WebView`. The default value is `true`.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * Controls whether to adjust the content inset for web views that are\n     * placed behind a navigation bar, tab bar, or toolbar. The default value\n     * is `true`.\n     */\n    automaticallyAdjustContentInsets: PropTypes.bool,\n    /**\n     * The amount by which the web view content is inset from the edges of\n     * the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.\n     */\n    contentInset: EdgeInsetsPropType,\n    /**\n     * Function that is invoked when the `WebView` loading starts or ends.\n     */\n    onNavigationStateChange: PropTypes.func,\n    /**\n     * A function that is invoked when the webview calls `window.postMessage`.\n     * Setting this property will inject a `postMessage` global into your\n     * webview, but will still call pre-existing values of `postMessage`.\n     *\n     * `window.postMessage` accepts one argument, `data`, which will be\n     * available on the event object, `event.nativeEvent.data`. `data`\n     * must be a string.\n     */\n    onMessage: PropTypes.func,\n    /**\n     * Boolean value that forces the `WebView` to show the loading view\n     * on the first load.\n     */\n    startInLoadingState: PropTypes.bool,\n    /**\n     * The style to apply to the `WebView`.\n     */\n    style: ViewPropTypes.style,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the web view’s content.\n     * By default only phone numbers are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n\n    /**\n     * Boolean value to enable JavaScript in the `WebView`. Used on Android only\n     * as JavaScript is enabled by default on iOS. The default value is `true`.\n     * @platform android\n     */\n    javaScriptEnabled: PropTypes.bool,\n\n    /**\n     * Boolean value to enable third party cookies in the `WebView`. Used on\n     * Android Lollipop and above only as third party cookies are enabled by\n     * default on Android Kitkat and below and on iOS. The default value is `true`.\n     * @platform android\n     */\n    thirdPartyCookiesEnabled: PropTypes.bool,\n\n    /**\n     * Boolean value to control whether DOM Storage is enabled. Used only in\n     * Android.\n     * @platform android\n     */\n    domStorageEnabled: PropTypes.bool,\n\n    /**\n     * Set this to provide JavaScript that will be injected into the web page\n     * when the view loads.\n     */\n    injectedJavaScript: PropTypes.string,\n\n    /**\n     * Sets the user-agent for the `WebView`.\n     * @platform android\n     */\n    userAgent: PropTypes.string,\n\n    /**\n     * Boolean that controls whether the web content is scaled to fit\n     * the view and enables the user to change the scale. The default value\n     * is `true`.\n     */\n    scalesPageToFit: PropTypes.bool,\n\n    /**\n     * Function that allows custom handling of any web view requests. Return\n     * `true` from the function to continue loading the request and `false`\n     * to stop loading.\n     * @platform ios\n     */\n    onShouldStartLoadWithRequest: PropTypes.func,\n\n    /**\n     * Boolean that determines whether HTML5 videos play inline or use the\n     * native full-screen controller. The default value is `false`.\n     *\n     * **NOTE** : In order for video to play inline, not only does this\n     * property need to be set to `true`, but the video element in the HTML\n     * document must also include the `webkit-playsinline` attribute.\n     * @platform ios\n     */\n    allowsInlineMediaPlayback: PropTypes.bool,\n\n    /**\n     * Boolean that determines whether HTML5 audio and video requires the user\n     * to tap them before they start playing. The default value is `true`.\n     */\n    mediaPlaybackRequiresUserAction: PropTypes.bool,\n\n    /**\n     * Function that accepts a string that will be passed to the WebView and\n     * executed immediately as JavaScript.\n     */\n    injectJavaScript: PropTypes.func,\n\n    /**\n     * Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.\n     *\n     * Possible values for `mixedContentMode` are:\n     *\n     * - `'never'` (default) - WebView will not allow a secure origin to load content from an insecure origin.\n     * - `'always'` - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.\n     * - `'compatibility'` -  WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.\n     * @platform android\n     */\n    mixedContentMode: PropTypes.oneOf([\n      'never',\n      'always',\n      'compatibility'\n    ]),\n  };\n\n  static defaultProps = {\n    scalesPageToFit: true,\n  };\n\n  state = {\n    viewState: WebViewState.IDLE,\n    lastErrorEvent: (null: ?ErrorEvent),\n    startInLoadingState: true,\n  };\n\n  componentWillMount() {\n    if (this.props.startInLoadingState) {\n      this.setState({viewState: WebViewState.LOADING});\n    }\n  }\n\n  render() {\n    var otherView = null;\n\n    if (this.state.viewState === WebViewState.LOADING) {\n      otherView = (this.props.renderLoading || defaultRenderLoading)();\n    } else if (this.state.viewState === WebViewState.ERROR) {\n      var errorEvent = this.state.lastErrorEvent;\n      invariant(\n        errorEvent != null,\n        'lastErrorEvent expected to be non-null'\n      );\n      otherView = (this.props.renderError || defaultRenderError)(\n        errorEvent.domain,\n        errorEvent.code,\n        errorEvent.description\n      );\n    } else if (this.state.viewState !== WebViewState.IDLE) {\n      console.error(\n        'RCTWebView invalid state encountered: ' + this.state.loading\n      );\n    }\n\n    var webViewStyles = [styles.container, styles.webView, this.props.style];\n    if (this.state.viewState === WebViewState.LOADING ||\n      this.state.viewState === WebViewState.ERROR) {\n      // if we're in either LOADING or ERROR states, don't show the webView\n      webViewStyles.push(styles.hidden);\n    }\n\n    var onShouldStartLoadWithRequest = this.props.onShouldStartLoadWithRequest && ((event: Event) => {\n      var shouldStart = this.props.onShouldStartLoadWithRequest &&\n        this.props.onShouldStartLoadWithRequest(event.nativeEvent);\n      RCTWebViewManager.startLoadWithResult(!!shouldStart, event.nativeEvent.lockIdentifier);\n    });\n\n    var decelerationRate = processDecelerationRate(this.props.decelerationRate);\n\n    var source = this.props.source || {};\n    if (this.props.html) {\n      source.html = this.props.html;\n    } else if (this.props.url) {\n      source.uri = this.props.url;\n    }\n\n    const messagingEnabled = typeof this.props.onMessage === 'function';\n\n    var webView =\n      <RCTWebView\n        ref={RCT_WEBVIEW_REF}\n        key=\"webViewKey\"\n        style={webViewStyles}\n        source={resolveAssetSource(source)}\n        injectedJavaScript={this.props.injectedJavaScript}\n        bounces={this.props.bounces}\n        scrollEnabled={this.props.scrollEnabled}\n        decelerationRate={decelerationRate}\n        contentInset={this.props.contentInset}\n        automaticallyAdjustContentInsets={this.props.automaticallyAdjustContentInsets}\n        onLoadingStart={this._onLoadingStart}\n        onLoadingFinish={this._onLoadingFinish}\n        onLoadingError={this._onLoadingError}\n        messagingEnabled={messagingEnabled}\n        onMessage={this._onMessage}\n        onShouldStartLoadWithRequest={onShouldStartLoadWithRequest}\n        scalesPageToFit={this.props.scalesPageToFit}\n        allowsInlineMediaPlayback={this.props.allowsInlineMediaPlayback}\n        mediaPlaybackRequiresUserAction={this.props.mediaPlaybackRequiresUserAction}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n      />;\n\n    return (\n      <View style={styles.container}>\n        {webView}\n        {otherView}\n      </View>\n    );\n  }\n\n  /**\n   * Go forward one page in the web view's history.\n   */\n  goForward = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goForward,\n      null\n    );\n  };\n\n  /**\n   * Go back one page in the web view's history.\n   */\n  goBack = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.goBack,\n      null\n    );\n  };\n\n  /**\n   * Reloads the current page.\n   */\n  reload = () => {\n    this.setState({viewState: WebViewState.LOADING});\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.reload,\n      null\n    );\n  };\n\n  /**\n   * Stop loading the current page.\n   */\n  stopLoading = () => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.stopLoading,\n      null\n    );\n  };\n\n  /**\n   * Posts a message to the web view, which will emit a `message` event.\n   * Accepts one argument, `data`, which must be a string.\n   *\n   * In your webview, you'll need to something like the following.\n   *\n   * ```js\n   * document.addEventListener('message', e => { document.title = e.data; });\n   * ```\n   */\n  postMessage = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.postMessage,\n      [String(data)]\n    );\n  };\n\n  /**\n  * Injects a javascript string into the referenced WebView. Deliberately does not\n  * return a response because using eval() to return a response breaks this method\n  * on pages with a Content Security Policy that disallows eval(). If you need that\n  * functionality, look into postMessage/onMessage.\n  */\n  injectJavaScript = (data) => {\n    UIManager.dispatchViewManagerCommand(\n      this.getWebViewHandle(),\n      UIManager.RCTWebView.Commands.injectJavaScript,\n      [data]\n    );\n  };\n\n  /**\n   * We return an event with a bunch of fields including:\n   *  url, title, loading, canGoBack, canGoForward\n   */\n  _updateNavigationState = (event: Event) => {\n    if (this.props.onNavigationStateChange) {\n      this.props.onNavigationStateChange(event.nativeEvent);\n    }\n  };\n\n  /**\n   * Returns the native `WebView` node.\n   */\n  getWebViewHandle = (): any => {\n    return ReactNative.findNodeHandle(this.refs[RCT_WEBVIEW_REF]);\n  };\n\n  _onLoadingStart = (event: Event) => {\n    var onLoadStart = this.props.onLoadStart;\n    onLoadStart && onLoadStart(event);\n    this._updateNavigationState(event);\n  };\n\n  _onLoadingError = (event: Event) => {\n    event.persist(); // persist this event because we need to store it\n    var {onError, onLoadEnd} = this.props;\n    onError && onError(event);\n    onLoadEnd && onLoadEnd(event);\n    console.warn('Encountered an error loading page', event.nativeEvent);\n\n    this.setState({\n      lastErrorEvent: event.nativeEvent,\n      viewState: WebViewState.ERROR\n    });\n  };\n\n  _onLoadingFinish = (event: Event) => {\n    var {onLoad, onLoadEnd} = this.props;\n    onLoad && onLoad(event);\n    onLoadEnd && onLoadEnd(event);\n    this.setState({\n      viewState: WebViewState.IDLE,\n    });\n    this._updateNavigationState(event);\n  };\n\n  _onMessage = (event: Event) => {\n    var {onMessage} = this.props;\n    onMessage && onMessage(event);\n  }\n}\n\nvar RCTWebView = requireNativeComponent('RCTWebView', WebView, {\n  nativeOnly: {\n    onLoadingStart: true,\n    onLoadingError: true,\n    onLoadingFinish: true,\n    onMessage: true,\n    messagingEnabled: PropTypes.bool,\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: BGWASH,\n  },\n  errorText: {\n    fontSize: 14,\n    textAlign: 'center',\n    marginBottom: 2,\n  },\n  errorTextTitle: {\n    fontSize: 15,\n    fontWeight: '500',\n    marginBottom: 10,\n  },\n  hidden: {\n    height: 0,\n    flex: 0, // disable 'flex:1' when hiding a View\n  },\n  loadingView: {\n    backgroundColor: BGWASH,\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 100,\n  },\n  webView: {\n    backgroundColor: '#ffffff',\n  }\n});\n\nmodule.exports = WebView;\n"]}]