["e2f31d80ac55bcb9b589b5a196105a3eb57b5d7a","dcce6fca5daac09db31281603672036b1a67537c",["Animated","React","StyleSheet"],[39,72,107],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js"],"names":["Animated","require","React","StyleSheet","ScrollViewStickyHeader","props","context","_onLayout","event","setState","measured","layoutY","nativeEvent","layout","y","layoutHeight","height","onLayout","child","Children","only","children","state","nextHeaderLayoutY","inputRange","outputRange","push","collisionPoint","translateY","scrollAnimatedValue","interpolate","style","styles","header","transform","cloneElement","fill","undefined","Component","create","zIndex","flex","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ScrollViewStickyHeader\n * @flow\n */\n'use strict';\n\nconst Animated = require('Animated');\nconst React = require('React');\nconst StyleSheet = require('StyleSheet');\n\ntype Props = {\n  children?: React.Element<any>,\n  nextHeaderLayoutY: ?number,\n  onLayout: (event: Object) => void,\n  scrollAnimatedValue: Animated.Value,\n};\n\nclass ScrollViewStickyHeader extends React.Component<Props, {\n  measured: boolean,\n  layoutY: number,\n  layoutHeight: number,\n  nextHeaderLayoutY: ?number,\n}> {\n  constructor(props: Props, context: Object) {\n    super(props, context);\n    this.state = {\n      measured: false,\n      layoutY: 0,\n      layoutHeight: 0,\n      nextHeaderLayoutY: props.nextHeaderLayoutY,\n    };\n  }\n\n  setNextHeaderY(y: number) {\n    this.setState({ nextHeaderLayoutY: y });\n  }\n\n  _onLayout = (event) => {\n    this.setState({\n      measured: true,\n      layoutY: event.nativeEvent.layout.y,\n      layoutHeight: event.nativeEvent.layout.height,\n    });\n\n    this.props.onLayout(event);\n    const child = React.Children.only(this.props.children);\n    if (child.props.onLayout) {\n      child.props.onLayout(event);\n    }\n  };\n\n  render() {\n    const {measured, layoutHeight, layoutY, nextHeaderLayoutY} = this.state;\n    const inputRange: Array<number> = [-1, 0];\n    const outputRange: Array<number> = [0, 0];\n\n    if (measured) {\n      // The interpolation looks like:\n      // - Negative scroll: no translation\n      // - From 0 to the y of the header: no translation. This will cause the header\n      //   to scroll normally until it reaches the top of the scroll view.\n      // - From header y to when the next header y hits the bottom edge of the header: translate\n      //   equally to scroll. This will cause the header to stay at the top of the scroll view.\n      // - Past the collision with the next header y: no more translation. This will cause the\n      // header to continue scrolling up and make room for the next sticky header.\n      // In the case that there is no next header just translate equally to\n      // scroll indefinetly.\n      inputRange.push(layoutY);\n      outputRange.push(0);\n      // Sometimes headers jump around so we make sure we don't violate the monotonic inputRange\n      // condition.\n      const collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;\n      if (collisionPoint >= layoutY) {\n        inputRange.push(collisionPoint, collisionPoint + 1);\n        outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);\n      } else {\n        inputRange.push(layoutY + 1);\n        outputRange.push(1);\n      }\n    }\n\n    const translateY = this.props.scrollAnimatedValue.interpolate({\n      inputRange,\n      outputRange,\n    });\n    const child = React.Children.only(this.props.children);\n\n    return (\n      <Animated.View\n        collapsable={false}\n        onLayout={this._onLayout}\n        style={[child.props.style, styles.header, {transform: [{translateY}]}]}>\n        {React.cloneElement(child, {\n          style: styles.fill, // We transfer the child style to the wrapper.\n          onLayout: undefined, // we call this manually through our this._onLayout\n        })}\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    zIndex: 10,\n  },\n  fill: {\n    flex: 1,\n  },\n});\n\nmodule.exports = ScrollViewStickyHeader;\n"]}]