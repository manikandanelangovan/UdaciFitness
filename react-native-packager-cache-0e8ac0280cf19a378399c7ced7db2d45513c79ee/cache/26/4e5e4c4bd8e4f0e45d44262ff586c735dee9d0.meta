["9096ed602e69d7c973cce09c18fa218422263782","3ee088542618ae8353474bbd59e7edf59c964429",["ColorPropType","NativeMethodsMixin","Platform","React","prop-types","ViewPropTypes","create-react-class","requireNativeComponent","UIManager"],[44,95,141,174,208,251,301,361,458],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"names":["ColorPropType","require","NativeMethodsMixin","Platform","React","PropTypes","ViewPropTypes","createReactClass","requireNativeComponent","OS","RefreshLayoutConsts","AndroidSwipeRefreshLayout","Constants","SIZE","RefreshControl","displayName","statics","mixins","propTypes","onRefresh","func","refreshing","bool","isRequired","tintColor","titleColor","title","string","enabled","colors","arrayOf","progressBackgroundColor","size","oneOf","DEFAULT","LARGE","progressViewOffset","number","_nativeRef","_lastNativeRefreshing","componentDidMount","props","componentDidUpdate","prevProps","setNativeProps","render","ref","_onRefresh","forceUpdate","NativeRefreshControl","module","exports"],"mappings":";AAWA;;AAEA,IAAMA,gBAAgBC,OAAhB,iBAAN;AACA,IAAMC,qBAAqBD,OAArB,sBAAN;AACA,IAAME,WAAWF,OAAX,YAAN;AACA,IAAMG,QAAQH,OAAR,SAAN;AACA,IAAMI,YAAYJ,OAAZ,cAAN;AACA,IAAMK,gBAAgBL,OAAhB,iBAAN;;AAEA,IAAMM,mBAAmBN,OAAnB,sBAAN;AACA,IAAMO,yBAAyBP,OAAzB,0BAAN;;AAEA,IAAIE,SAASM,EAAT,KAAgB,SAApB,EAA+B;AAC7B,MAAIC,sBAAsBT,qBAAqBU,yBAArB,CAA+CC,SAAzE;AACD,CAFD,MAEO;AACL,MAAIF,sBAAsB,EAACG,MAAM,EAAP,EAA1B;AACD;;AAgDD,IAAMC,iBAAiBP,iBAAiB;AACtCQ,eAAa,gBADyB;AAEtCC,WAAS;AACPH,UAAMH,oBAAoBG;AADnB,GAF6B;;AAMtCI,UAAQ,CAACf,kBAAD,CAN8B;;AAQtCgB,sCACKZ,aADL;AAKEa,eAAWd,UAAUe,IALvB;;AASEC,gBAAYhB,UAAUiB,IAAV,CAAeC,UAT7B;;AAcEC,eAAWxB,aAdb;;AAmBEyB,gBAAYzB,aAnBd;;AAwBE0B,WAAOrB,UAAUsB,MAxBnB;;AA6BEC,aAASvB,UAAUiB,IA7BrB;;AAkCEO,YAAQxB,UAAUyB,OAAV,CAAkB9B,aAAlB,CAlCV;;AAuCE+B,6BAAyB/B,aAvC3B;;AA4CEgC,UAAM3B,UAAU4B,KAAV,CAAgB,CAACvB,oBAAoBG,IAApB,CAAyBqB,OAA1B,EAAmCxB,oBAAoBG,IAApB,CAAyBsB,KAA5D,CAAhB,CA5CR;;AAiDEC,wBAAoB/B,UAAUgC;AAjDhC,IARsC;;AA4DtCC,cAAa,IA5DyB;AA6DtCC,yBAAuB,KA7De;;AA+DtCC,mBA/DsC,+BA+DlB;AAClB,SAAKD,qBAAL,GAA6B,KAAKE,KAAL,CAAWpB,UAAxC;AACD,GAjEqC;AAmEtCqB,oBAnEsC,8BAmEnBC,SAnEmB,EAmEe;AAInD,QAAI,KAAKF,KAAL,CAAWpB,UAAX,KAA0BsB,UAAUtB,UAAxC,EAAoD;AAClD,WAAKkB,qBAAL,GAA6B,KAAKE,KAAL,CAAWpB,UAAxC;AACD,KAFD,MAEO,IAAI,KAAKoB,KAAL,CAAWpB,UAAX,KAA0B,KAAKkB,qBAAnC,EAA0D;AAC/D,WAAKD,UAAL,CAAgBM,cAAhB,CAA+B,EAACvB,YAAY,KAAKoB,KAAL,CAAWpB,UAAxB,EAA/B;AACA,WAAKkB,qBAAL,GAA6B,KAAKE,KAAL,CAAWpB,UAAxC;AACD;AACF,GA7EqC;AA+EtCwB,QA/EsC,oBA+E7B;AAAA;;AACP,WACE,oBAAC,oBAAD,2BACM,KAAKJ,KADX;AAEE,WAAK,mBAAO;AAAC,cAAKH,UAAL,GAAkBQ,IAAlB;AAAuB,OAFtC;AAGE,iBAAW,KAAKC;AAHlB,OADF;AAOD,GAvFqC;AAyFtCA,YAzFsC,wBAyFzB;AACX,SAAKR,qBAAL,GAA6B,IAA7B;;AAEA,SAAKE,KAAL,CAAWtB,SAAX,IAAwB,KAAKsB,KAAL,CAAWtB,SAAX,EAAxB;;AAIA,SAAK6B,WAAL;AACD;AAjGqC,CAAjB,CAAvB;;AAoGA,IAAI7C,SAASM,EAAT,KAAgB,KAApB,EAA2B;AACzB,MAAIwC,uBAAuBzC,uBACzB,mBADyB,EAEzBM,cAFyB,CAA3B;AAID,CALD,MAKO,IAAIX,SAASM,EAAT,KAAgB,SAApB,EAA+B;AACpC,MAAIwC,uBAAuBzC,uBACzB,2BADyB,EAEzBM,cAFyB,CAA3B;AAID;;AAEDoC,OAAOC,OAAP,GAAiBrC,cAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule RefreshControl\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst createReactClass = require('create-react-class');\nconst requireNativeComponent = require('requireNativeComponent');\n\nif (Platform.OS === 'android') {\n  var RefreshLayoutConsts = require('UIManager').AndroidSwipeRefreshLayout.Constants;\n} else {\n  var RefreshLayoutConsts = {SIZE: {}};\n}\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\n// $FlowFixMe(>=0.41.0)\nconst RefreshControl = createReactClass({\n  displayName: 'RefreshControl',\n  statics: {\n    SIZE: RefreshLayoutConsts.SIZE,\n  },\n\n  mixins: [NativeMethodsMixin],\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Called when the view starts refreshing.\n     */\n    onRefresh: PropTypes.func,\n    /**\n     * Whether the view should be indicating an active refresh.\n     */\n    refreshing: PropTypes.bool.isRequired,\n    /**\n     * The color of the refresh indicator.\n     * @platform ios\n     */\n    tintColor: ColorPropType,\n    /**\n     * Title color.\n     * @platform ios\n     */\n    titleColor: ColorPropType,\n    /**\n     * The title displayed under the refresh indicator.\n     * @platform ios\n     */\n    title: PropTypes.string,\n    /**\n     * Whether the pull to refresh functionality is enabled.\n     * @platform android\n     */\n    enabled: PropTypes.bool,\n    /**\n     * The colors (at least one) that will be used to draw the refresh indicator.\n     * @platform android\n     */\n    colors: PropTypes.arrayOf(ColorPropType),\n    /**\n     * The background color of the refresh indicator.\n     * @platform android\n     */\n    progressBackgroundColor: ColorPropType,\n    /**\n     * Size of the refresh indicator, see RefreshControl.SIZE.\n     * @platform android\n     */\n    size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),\n    /**\n     * Progress view top offset\n     * @platform android\n     */\n    progressViewOffset: PropTypes.number,\n  },\n\n  _nativeRef: (null: any),\n  _lastNativeRefreshing: false,\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  },\n\n  componentDidUpdate(prevProps: {refreshing: boolean}) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (this.props.refreshing !== this._lastNativeRefreshing) {\n      this._nativeRef.setNativeProps({refreshing: this.props.refreshing});\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  },\n\n  render() {\n    return (\n      <NativeRefreshControl\n        {...this.props}\n        ref={ref => {this._nativeRef = ref;}}\n        onRefresh={this._onRefresh}\n      />\n    );\n  },\n\n  _onRefresh() {\n    this._lastNativeRefreshing = true;\n\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  },\n});\n\nif (Platform.OS === 'ios') {\n  var NativeRefreshControl = requireNativeComponent(\n    'RCTRefreshControl',\n    RefreshControl\n  );\n} else if (Platform.OS === 'android') {\n  var NativeRefreshControl = requireNativeComponent(\n    'AndroidSwipeRefreshLayout',\n    RefreshControl\n  );\n}\n\nmodule.exports = RefreshControl;\n"]}]