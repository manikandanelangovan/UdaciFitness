["1b4b0c0026548683308ea004ae988dd470c4d5f2","f68b29e17d54d556167a1b2a21bfc76a20c9a361",["Platform","fbjs/lib/invariant","WebSocket","HMRLoadingView","NativeModules"],[39,76,408,1829,2428,2592],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Utilities/HMRClient.js"],"names":["Platform","require","invariant","HMRClient","enable","platform","bundleEntry","host","port","WebSocket","wsHostPort","wsUrl","replace","activeWS","onerror","e","error","OS","message","Error","onmessage","data","HMRLoadingView","JSON","parse","type","showMessage","body","modules","sourceMappingURLs","sourceURLs","inverseDependencies","RCTRedBox","RedBox","dismiss","RCTExceptionsManager","ExceptionsManager","dismissRedbox","forEach","i","id","code","injectFunction","global","nativeInjectHMRUpdate","eval","stringify","join","hide","description","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule HMRClient\n * @flow\n */\n'use strict';\n\nconst Platform = require('Platform');\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient = {\n  enable(platform: string, bundleEntry: string, host: string, port: number) {\n    invariant(platform, 'Missing required parameter `platform`');\n    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');\n    invariant(host, 'Missing required paramenter `host`');\n\n    // need to require WebSocket inside of `enable` function because\n    // this module is defined as a `polyfillGlobal`.\n    // See `InitializeJavascriptAppEngine.js`\n    const WebSocket = require('WebSocket');\n\n    const wsHostPort = port !== null && port !== ''\n      ? `${host}:${port}`\n      : host;\n\n    // Build the websocket url\n    const wsUrl = `ws://${wsHostPort}/hot?` +\n      `platform=${platform}&` +\n      `bundleEntry=${bundleEntry.replace('.bundle', '.js')}`;\n\n    const activeWS = new WebSocket(wsUrl);\n    activeWS.onerror = (e) => {\n      let error = (\n`Hot loading isn't working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network`\n      );\n\n      if (Platform.OS === 'ios') {\n        error += (\n`\n- Ensure that the Packager server URL is correctly set in AppDelegate`\n        );\n      } else {\n        error += (\n`\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run 'adb devices' to see a list of connected devices\n- If you're on a physical device connected to the same machine, run 'adb reverse tcp:8081 tcp:8081' to forward requests from your device\n- If your device is on the same Wi-Fi network, set 'Debug server host & port for device' in 'Dev settings' to your machine's IP address and the port of the local dev server - e.g. 10.0.1.1:8081`\n        );\n      }\n\n      error += (\n`\n\nURL: ${host}:${port}\n\nError: ${e.message}`\n      );\n\n      throw new Error(error);\n    };\n    activeWS.onmessage = ({data}) => {\n      // Moving to top gives errors due to NativeModules not being initialized\n      const HMRLoadingView = require('HMRLoadingView');\n\n      data = JSON.parse(data);\n\n      switch (data.type) {\n        case 'update-start': {\n          HMRLoadingView.showMessage('Hot Loading...');\n          break;\n        }\n        case 'update': {\n          const {\n            modules,\n            sourceMappingURLs,\n            sourceURLs,\n            inverseDependencies,\n          } = data.body;\n\n          if (Platform.OS === 'ios') {\n            const RCTRedBox = require('NativeModules').RedBox;\n            RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();\n          } else {\n            const RCTExceptionsManager = require('NativeModules').ExceptionsManager;\n            RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();\n          }\n\n          modules.forEach(({id, code}, i) => {\n            code = code + '\\n\\n' + sourceMappingURLs[i];\n\n            // on JSC we need to inject from native for sourcemaps to work\n            // (Safari doesn't support `sourceMappingURL` nor any variant when\n            // evaluating code) but on Chrome we can simply use eval\n            const injectFunction = typeof global.nativeInjectHMRUpdate === 'function'\n              ? global.nativeInjectHMRUpdate\n              : eval;\n\n            code = [\n              '__accept(',\n                `${id},`,\n                'function(global,require,module,exports){',\n                  `${code}`,\n                '\\n},',\n                `${JSON.stringify(inverseDependencies)}`,\n              ');',\n            ].join('');\n\n            injectFunction(code, sourceURLs[i]);\n          });\n\n          HMRLoadingView.hide();\n          break;\n        }\n        case 'update-done': {\n          HMRLoadingView.hide();\n          break;\n        }\n        case 'error': {\n          HMRLoadingView.hide();\n          throw new Error(data.body.type + ' ' + data.body.description);\n        }\n        default: {\n          throw new Error(`Unexpected message: ${data}`);\n        }\n      }\n    };\n  },\n};\n\nmodule.exports = HMRClient;\n"]}]