["2200b71f04df03e3f865b975ddd169ea60032815","3b28ad05b63cb1b110427bbaedac499b0f5e4036",["react","lodash","color","./extractOpacity","./extractTransform","../PATTERN_UNITS","../percentToFloat","../../elements/Stop"],[1780,1813,1907,2007,2138,2272,2399,2519],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native-svg/lib/extract/extractGradient.js"],"names":["props","id","stops","forEach","children","child","type","stopColor","offset","alpha","stopOpacity","console","warn","sorted","sortBy","map","stop","gradient","channels","rgbaArray","push","gradientTransform","transform","name","gradientUnits"],"mappings":";;;;kBAUe,UAASA,KAAT,EAAgB;AAC3B,QAAI,CAACA,MAAMC,EAAX,EAAe;AACX,eAAO,IAAP;AACH;;AAED,QAAMC,QAAQ,EAAd;AACA,oBAASC,OAAT,CAAiBH,MAAMI,QAAvB,EAAiC,iBAAS;AACtC,YAAIC,MAAMC,IAAN,mBAAJ,EAAyB;AACrB,gBAAID,MAAML,KAAN,CAAYO,SAAZ,IAAyBF,MAAML,KAAN,CAAYQ,MAAzC,EAAiD;AAE7C,oBAAIA,SAAS,8BAAeH,MAAML,KAAN,CAAYQ,MAA3B,CAAb;;AAGAN,sBAAMM,MAAN,IAAgB,qBAAMH,MAAML,KAAN,CAAYO,SAAlB,EAA6BE,KAA7B,CAAmC,8BAAeJ,MAAML,KAAN,CAAYU,WAA3B,CAAnC,CAAhB;AACH;AACJ,SARD,MAQO;AACHC,oBAAQC,IAAR,CAAa,6DAAb;AACH;AACJ,KAZD;;AAcA,QAAMC,SAAS,iBAAEC,MAAF,CAAS,iBAAEC,GAAF,CAAMb,KAAN,EAAa,UAACc,IAAD,EAAOR,MAAP,EAAkB;AACnD,eAAO,EAACQ,UAAD,EAAOR,cAAP,EAAP;AACH,KAFuB,CAAT,EAEX,QAFW,CAAf;;AAIA,QAAMS,WAAW,EAAjB;;AAEAJ,WAAOV,OAAP,CAAe,gBAAY;AAAA,YAAVa,IAAU,QAAVA,IAAU;;AACvB,YAAIE,WAAWF,KAAKG,SAAL,EAAf;AACAF,iBAASG,IAAT,CAAcF,SAAS,CAAT,IAAc,GAA5B;AACAD,iBAASG,IAAT,CAAcF,SAAS,CAAT,IAAc,GAA5B;AACAD,iBAASG,IAAT,CAAcF,SAAS,CAAT,IAAc,GAA5B;AACAD,iBAASG,IAAT,CAAcF,SAAS,CAAT,CAAd;AACH,KAND;;AAQAD,aAASG,IAAT,gDAAiBP,OAAOE,GAAP,CAAW;AAAA,YAAEP,MAAF,SAAEA,MAAF;AAAA,eAAc,CAACA,MAAf;AAAA,KAAX,CAAjB;;AAGA,QAAIa,0BAAJ;AACA,QAAIrB,MAAMsB,SAAV,EAAqB;AACjBD,4BAAoB,gCAAiBrB,MAAMsB,SAAvB,CAApB;AACH,KAFD,MAEO;AACHD,4BAAoB,gCAAiBrB,KAAjB,CAApB;AACH;;AAED,WAAO;AACHiB,0BADG;AAEHM,cAAMvB,MAAMC,EAFT;AAGHoB,4CAHG;AAIHG,uBAAe,wBAAcxB,MAAMwB,aAApB,KAAsC;AAJlD,KAAP;AAMH,C;;AA5DD;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA","sourcesContent":["import {Children} from 'react';\nimport _ from 'lodash';\nimport Color from 'color';\n\nimport extractOpacity from './extractOpacity';\nimport extractTransform from './extractTransform';\nimport PATTERN_UNITS from '../PATTERN_UNITS';\nimport percentToFloat from '../percentToFloat';\nimport Stop from '../../elements/Stop';\n\nexport default function(props) {\n    if (!props.id) {\n        return null;\n    }\n\n    const stops = {};\n    Children.forEach(props.children, child => {\n        if (child.type === Stop) {\n            if (child.props.stopColor && child.props.offset) {\n                // convert percent to float.\n                let offset = percentToFloat(child.props.offset);\n\n                // add stop\n                stops[offset] = Color(child.props.stopColor).alpha(extractOpacity(child.props.stopOpacity));\n            }\n        } else {\n            console.warn('`Gradient` elements only accept `Stop` elements as children');\n        }\n    });\n\n    const sorted = _.sortBy(_.map(stops, (stop, offset) => {\n        return {stop, offset};\n    }), 'offset');\n\n    const gradient = [];\n\n    sorted.forEach(({stop}) => {\n        let channels = stop.rgbaArray();\n        gradient.push(channels[0] / 255);\n        gradient.push(channels[1] / 255);\n        gradient.push(channels[2] / 255);\n        gradient.push(channels[3]);\n    });\n\n    gradient.push(...sorted.map(({offset}) => +offset));\n\n\n    let gradientTransform;\n    if (props.transform) {\n        gradientTransform = extractTransform(props.transform);\n    } else {\n        gradientTransform = extractTransform(props);\n    }\n\n    return {\n        gradient,\n        name: props.id,\n        gradientTransform,\n        gradientUnits: PATTERN_UNITS[props.gradientUnits] || 0\n    };\n}\n"]}]