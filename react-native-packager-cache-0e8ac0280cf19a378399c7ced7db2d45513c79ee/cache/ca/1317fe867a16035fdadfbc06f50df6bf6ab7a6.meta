["18999d67f174cb64438e2f88a562dde84087adf8","d153b459e5557a7b16bffe75a4cf89dc30b52deb",["ColorPropType","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","create-react-class","prop-types","ReactNative","StyleSheet","Text","TextInputState","react-timer-mixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","fbjs/lib/emptyFunction","fbjs/lib/invariant","requireNativeComponent","fbjs/lib/warning"],[44,99,153,203,249,282,323,370,411,452,486,524,568,629,682,724,771,822,882,931],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Components/TextInput/TextInput.js"],"names":["ColorPropType","require","DocumentSelectionState","EventEmitter","NativeMethodsMixin","Platform","React","createReactClass","PropTypes","ReactNative","StyleSheet","Text","TextInputState","TimerMixin","TouchableWithoutFeedback","UIManager","ViewPropTypes","emptyFunction","invariant","requireNativeComponent","warning","onlyMultiline","onTextInput","children","OS","AndroidTextInput","RCTTextView","RCTTextField","DataDetectorTypes","TextInput","displayName","statics","State","propTypes","autoCapitalize","oneOf","autoCorrect","bool","spellCheck","autoFocus","autoGrow","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","number","maxHeight","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","node","placeholderTextColor","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","dataDetectorTypes","oneOfType","arrayOf","caretHidden","mixins","getInitialState","layoutHeight","_layoutHeight","isFocused","currentlyFocusedField","findNodeHandle","_inputRef","contextTypes","onFocusRequested","focusEmitter","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","componentDidMount","props","context","requestAnimationFrame","focus","addListener","el","blur","componentWillUnmount","remove","getChildContext","isInAParentText","childContextTypes","clear","setNativeProps","text","render","_renderIOS","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","thatReturnsTrue","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityTraits","nativeID","testID","state","height","Constants","AutoCapitalizationType","_onContentSizeChange","_onLayout","accessibilityComponentType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","contentHeight","contentSize","Math","min","setState","max","layout","componentDidUpdate","nativeProps","Object","keys","length","update","create","paddingTop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule TextInput\n * @flow\n */\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst DocumentSelectionState = require('DocumentSelectionState');\nconst EventEmitter = require('EventEmitter');\nconst NativeMethodsMixin = require('NativeMethodsMixin');\nconst Platform = require('Platform');\nconst React = require('React');\nconst createReactClass = require('create-react-class');\nconst PropTypes = require('prop-types');\nconst ReactNative = require('ReactNative');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TextInputState = require('TextInputState');\nconst TimerMixin = require('react-timer-mixin');\nconst TouchableWithoutFeedback = require('TouchableWithoutFeedback');\nconst UIManager = require('UIManager');\nconst ViewPropTypes = require('ViewPropTypes');\n\nconst emptyFunction = require('fbjs/lib/emptyFunction');\nconst invariant = require('fbjs/lib/invariant');\nconst requireNativeComponent = require('requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nif (Platform.OS === 'android') {\n  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);\n} else if (Platform.OS === 'ios') {\n  var RCTTextView = requireNativeComponent('RCTTextView', null);\n  var RCTTextField = requireNativeComponent('RCTTextField', null);\n}\n\ntype Event = Object;\ntype Selection = {\n  start: number,\n  end?: number,\n};\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\n// $FlowFixMe(>=0.41.0)\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    /* TODO(brentvatne) docs are needed for this */\n    State: TextInputState,\n  },\n\n  propTypes: {\n    ...ViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * If true, will increase the height of the textbox if need be. If false,\n     * the textbox will become scrollable once the height is reached. The\n     * default value is false.\n     * @platform android\n     */\n    autoGrow: PropTypes.bool,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `email-address`\n     * - `phone-pad`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'number-pad',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf([\n      'default',\n      'light',\n      'dark',\n    ]),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * If autogrow is `true`, limits the height that the TextInput box can grow\n     * to. Once it reaches this height, the TextInput becomes scrollable.\n     */\n    maxHeight: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     * @platform ios\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.node,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: ColorPropType,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n    * The highlight and cursor color of the text input.\n    */\n    selectionColor: ColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported,\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: ColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     */\n    caretHidden: PropTypes.bool,\n  },\n\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin, TimerMixin],\n\n  getInitialState: function() {\n    return {layoutHeight: this._layoutHeight};\n  },\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef);\n  },\n\n  contextTypes: {\n    onFocusRequested: PropTypes.func,\n    focusEmitter: PropTypes.instanceOf(EventEmitter),\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n  _layoutHeight: (-1: number),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    if (!this.context.focusEmitter) {\n      if (this.props.autoFocus) {\n        this.requestAnimationFrame(this.focus);\n      }\n      return;\n    }\n    this._focusSubscription = this.context.focusEmitter.addListener(\n      'focus',\n      (el) => {\n        if (this === el) {\n          this.requestAnimationFrame(this.focus);\n        } else if (this.isFocused()) {\n          this.blur();\n        }\n      }\n    );\n    if (this.props.autoFocus) {\n      this.context.onFocusRequested(this);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n  },\n\n  getChildContext: function(): Object {\n    return {isInAParentText: true};\n  },\n\n  childContextTypes: {\n    isInAParentText: PropTypes.bool\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    if (Platform.OS === 'ios') {\n      return this._renderIOS();\n    } else if (Platform.OS === 'android') {\n      return this._renderAndroid();\n    }\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string' ?\n      this.props.value :\n      (\n        typeof this.props.defaultValue === 'string' ?\n        this.props.defaultValue :\n        ''\n      );\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOS: function() {\n    var textContainer;\n\n    var props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {start: props.selection.start, end: props.selection.start};\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (var propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' + propKey + '` is only supported with multiline.'\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer =\n        <RCTTextField\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n        />;\n    } else {\n      var children = props.children;\n      var childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.'\n      );\n      if (childCount >= 1) {\n        children = <Text style={props.style}>{children}</Text>;\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer =\n        <RCTTextView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunction.thatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />;\n    }\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityTraits={props.accessibilityTraits}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = this.props.style;\n    if (this.state.layoutHeight >= 0) {\n      props.style = [props.style, {height: this.state.layoutHeight}];\n    }\n    props.autoCapitalize =\n      UIManager.AndroidTextInput.Constants.AutoCapitalizationType[this.props.autoCapitalize];\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    var children = this.props.children;\n    var childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.'\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n    if (props.selection && props.selection.end == null) {\n      props.selection = {start: props.selection.start, end: props.selection.start};\n    }\n    const textContainer =\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this._onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />;\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={this._onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityComponentType={this.props.accessibilityComponentType}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: Event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: Event) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: Event) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef) {\n      this._inputRef.setNativeProps({\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    var text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onContentSizeChange: function(event: Event) {\n    let contentHeight = event.nativeEvent.contentSize.height;\n    if (this.props.autoGrow) {\n      if (this.props.maxHeight) {\n        contentHeight = Math.min(this.props.maxHeight, contentHeight);\n      }\n      this.setState({layoutHeight: Math.max(this._layoutHeight, contentHeight)});\n    }\n\n    this.props.onContentSizeChange && this.props.onContentSizeChange(event);\n  },\n\n  _onLayout: function(event: Event) {\n    const height = event.nativeEvent.layout.height;\n    if (height) {\n      this._layoutHeight = event.nativeEvent.layout.height;\n    }\n    this.props.onLayout && this.props.onLayout(event);\n  },\n\n  _onSelectionChange: function(event: Event) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function () {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (this._lastNativeSelection && selection &&\n        (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (Object.keys(nativeProps).length > 0 && this._inputRef) {\n      this._inputRef.setNativeProps(nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: Event) {\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: Event) {\n    /* $FlowFixMe(>=0.53.0 site=react_native_fb,react_native_oss) This comment\n     * suppresses an error when upgrading Flow's support for React. To see the\n     * error delete this comment and run Flow. */\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: Event) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nvar styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTTextView seem as close as possible\n    // to single-line RCTTextField defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TextInput;\n"]}]