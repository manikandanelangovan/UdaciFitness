["f99d7adf45041655fb14ec79373880e773c46ac3","3142531ecd7a599bc57a647db351596b334976f6",[],[],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Network/FormData.js"],"names":["FormData","_parts","key","value","push","map","name","contentDisposition","headers","type","fieldName","string","String","module","exports"],"mappings":";AAWA;;IAoCMA,Q;AAGJ,sBAAc;AAAA;;AACZ,SAAKC,MAAL,GAAc,EAAd;AACD;;;;2BAEMC,G,EAAaC,K,EAAsB;AAMxC,WAAKF,MAAL,CAAYG,IAAZ,CAAiB,CAACF,GAAD,EAAMC,KAAN,CAAjB;AACD;;;+BAE+B;AAC9B,aAAO,KAAKF,MAAL,CAAYI,GAAZ,CAAgB,gBAAmB;AAAA;AAAA,YAAjBC,IAAiB;AAAA,YAAXH,KAAW;;AACxC,YAAII,qBAAqB,sBAAsBD,IAAtB,GAA6B,GAAtD;;AAEA,YAAIE,UAAmB,EAAC,uBAAuBD,kBAAxB,EAAvB;;AAMA,YAAI,OAAOJ,KAAP,KAAiB,QAAjB,IAA6BA,KAAjC,EAAwC;AACtC,cAAI,OAAOA,MAAMG,IAAb,KAAsB,QAA1B,EAAoC;AAClCE,oBAAQ,qBAAR,KAAkC,iBAAiBL,MAAMG,IAAvB,GAA8B,GAAhE;AACD;AACD,cAAI,OAAOH,MAAMM,IAAb,KAAsB,QAA1B,EAAoC;AAClCD,oBAAQ,cAAR,IAA0BL,MAAMM,IAAhC;AACD;AACD,0CAAWN,KAAX,IAAkBK,gBAAlB,EAA2BE,WAAWJ,IAAtC;AACD;;AAED,eAAO,EAACK,QAAQC,OAAOT,KAAP,CAAT,EAAwBK,gBAAxB,EAAiCE,WAAWJ,IAA5C,EAAP;AACD,OApBM,CAAP;AAqBD;;;;;AAGHO,OAAOC,OAAP,GAAiBd,QAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule FormData\n * @flow\n */\n'use strict';\n\ntype FormDataValue = any;\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string};\ntype FormDataPart = {\n  string: string,\n  headers: Headers,\n} | {\n  uri: string,\n  headers: Headers,\n  name?: string,\n  type?: string,\n};\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      var contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      var headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += '; filename=\"' + value.name + '\"';\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"]}]