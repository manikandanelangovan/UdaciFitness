["7277404fa8bb8dbea785d10463c04753d9d9eea7","b1538c60628d4f39bdb7f3c5d720cfc502efda6a",["./InteractionManager","TouchHistoryMath"],[50,106],{"version":3,"sources":["/Users/mani/Documents/Udacity/Core/React_Native/UdaciFitness/node_modules/react-native/Libraries/Interaction/PanResponder.js"],"names":["InteractionManager","require","TouchHistoryMath","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","PanResponder","_initializeGestureState","gestureState","moveX","moveY","x0","y0","dx","dy","vx","vy","numberActiveTouches","_accountsForMovesUpTo","_updateGestureStateOnMove","touchHistory","movedAfter","prevX","x","prevY","y","nextDX","nextDY","dt","mostRecentTimeStamp","create","config","interactionState","handle","stateID","Math","random","panHandlers","onStartShouldSetResponder","e","onStartShouldSetPanResponder","undefined","onMoveShouldSetResponder","onMoveShouldSetPanResponder","onStartShouldSetResponderCapture","nativeEvent","touches","length","onStartShouldSetPanResponderCapture","onMoveShouldSetResponderCapture","onMoveShouldSetPanResponderCapture","onResponderGrant","createInteractionHandle","onPanResponderGrant","onShouldBlockNativeResponder","onResponderReject","clearInteractionHandle","onPanResponderReject","onResponderRelease","onPanResponderRelease","onResponderStart","onPanResponderStart","onResponderMove","onPanResponderMove","onResponderEnd","onPanResponderEnd","onResponderTerminate","onPanResponderTerminate","onResponderTerminationRequest","onPanResponderTerminationRequest","getInteractionHandle","callback","event","module","exports"],"mappings":";;AAWA;;AAEA,IAAMA,qBAAqBC,QAAQ,sBAAR,CAA3B;AACA,IAAMC,mBAAmBD,OAAnB,oBAAN;;AAEA,IAAME,wCAAwCD,iBAAiBC,qCAA/D;AACA,IAAMC,wCAAwCF,iBAAiBE,qCAA/D;AACA,IAAMC,yCAAyCH,iBAAiBG,sCAAhE;AACA,IAAMC,yCAAyCJ,iBAAiBI,sCAAhE;AACA,IAAMC,mBAAmBL,iBAAiBK,gBAA1C;AACA,IAAMC,mBAAmBN,iBAAiBM,gBAA1C;;AAoGA,IAAMC,eAAe;;AAiEnBC,2BAAyB,iCAAUC,YAAV,EAAwB;AAC/CA,iBAAaC,KAAb,GAAqB,CAArB;AACAD,iBAAaE,KAAb,GAAqB,CAArB;AACAF,iBAAaG,EAAb,GAAkB,CAAlB;AACAH,iBAAaI,EAAb,GAAkB,CAAlB;AACAJ,iBAAaK,EAAb,GAAkB,CAAlB;AACAL,iBAAaM,EAAb,GAAkB,CAAlB;AACAN,iBAAaO,EAAb,GAAkB,CAAlB;AACAP,iBAAaQ,EAAb,GAAkB,CAAlB;AACAR,iBAAaS,mBAAb,GAAmC,CAAnC;;AAEAT,iBAAaU,qBAAb,GAAqC,CAArC;AACD,GA7EkB;;AAuGnBC,6BAA2B,mCAAUX,YAAV,EAAwBY,YAAxB,EAAsC;AAC/DZ,iBAAaS,mBAAb,GAAmCG,aAAaH,mBAAhD;AACAT,iBAAaC,KAAb,GAAqBT,sCAAsCoB,YAAtC,EAAoDZ,aAAaU,qBAAjE,CAArB;AACAV,iBAAaE,KAAb,GAAqBT,sCAAsCmB,YAAtC,EAAoDZ,aAAaU,qBAAjE,CAArB;AACA,QAAMG,aAAab,aAAaU,qBAAhC;AACA,QAAMI,QAAQpB,uCAAuCkB,YAAvC,EAAqDC,UAArD,CAAd;AACA,QAAME,IAAIvB,sCAAsCoB,YAAtC,EAAoDC,UAApD,CAAV;AACA,QAAMG,QAAQrB,uCAAuCiB,YAAvC,EAAqDC,UAArD,CAAd;AACA,QAAMI,IAAIxB,sCAAsCmB,YAAtC,EAAoDC,UAApD,CAAV;AACA,QAAMK,SAASlB,aAAaK,EAAb,IAAmBU,IAAID,KAAvB,CAAf;AACA,QAAMK,SAASnB,aAAaM,EAAb,IAAmBW,IAAID,KAAvB,CAAf;;AAGA,QAAMI,KAAKR,aAAaS,mBAAb,GAAmCrB,aAAaU,qBAA3D;AACAV,iBAAaO,EAAb,GAAkB,CAACW,SAASlB,aAAaK,EAAvB,IAA6Be,EAA/C;AACApB,iBAAaQ,EAAb,GAAkB,CAACW,SAASnB,aAAaM,EAAvB,IAA6Bc,EAA/C;;AAEApB,iBAAaK,EAAb,GAAkBa,MAAlB;AACAlB,iBAAaM,EAAb,GAAkBa,MAAlB;AACAnB,iBAAaU,qBAAb,GAAqCE,aAAaS,mBAAlD;AACD,GA3HkB;;AA6JnBC,UAAQ,gBAAUC,MAAV,EAAkB;AACxB,QAAMC,mBAAmB;AACvBC,cAAS;AADc,KAAzB;AAGA,QAAMzB,eAAe;AAEnB0B,eAASC,KAAKC,MAAL;AAFU,KAArB;AAIA9B,iBAAaC,uBAAb,CAAqCC,YAArC;AACA,QAAM6B,cAAc;AAClBC,iCAA2B,mCAAUC,CAAV,EAAa;AACtC,eAAOR,OAAOS,4BAAP,KAAwCC,SAAxC,GACL,KADK,GAELV,OAAOS,4BAAP,CAAoCD,CAApC,EAAuC/B,YAAvC,CAFF;AAGD,OALiB;AAMlBkC,gCAA0B,kCAAUH,CAAV,EAAa;AACrC,eAAOR,OAAOY,2BAAP,KAAuCF,SAAvC,GACL,KADK,GAELV,OAAOY,2BAAP,CAAmCJ,CAAnC,EAAsC/B,YAAtC,CAFF;AAGD,OAViB;AAWlBoC,wCAAkC,0CAAUL,CAAV,EAAa;AAG7C,YAAIA,EAAEM,WAAF,CAAcC,OAAd,CAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACtCzC,uBAAaC,uBAAb,CAAqCC,YAArC;AACD;AACDA,qBAAaS,mBAAb,GAAmCsB,EAAEnB,YAAF,CAAeH,mBAAlD;AACA,eAAOc,OAAOiB,mCAAP,KAA+CP,SAA/C,GACLV,OAAOiB,mCAAP,CAA2CT,CAA3C,EAA8C/B,YAA9C,CADK,GAEL,KAFF;AAGD,OArBiB;;AAuBlByC,uCAAiC,yCAAUV,CAAV,EAAa;AAC5C,YAAMnB,eAAemB,EAAEnB,YAAvB;;AAIA,YAAIZ,aAAaU,qBAAb,KAAuCE,aAAaS,mBAAxD,EAA6E;AAC3E,iBAAO,KAAP;AACD;AACDvB,qBAAaa,yBAAb,CAAuCX,YAAvC,EAAqDY,YAArD;AACA,eAAOW,OAAOmB,kCAAP,GACLnB,OAAOmB,kCAAP,CAA0CX,CAA1C,EAA6C/B,YAA7C,CADK,GAEL,KAFF;AAGD,OAnCiB;;AAqClB2C,wBAAkB,0BAAUZ,CAAV,EAAa;AAC7B,YAAI,CAACP,iBAAiBC,MAAtB,EAA8B;AAC5BD,2BAAiBC,MAAjB,GAA0BpC,mBAAmBuD,uBAAnB,EAA1B;AACD;AACD5C,qBAAaG,EAAb,GAAkBP,iBAAiBmC,EAAEnB,YAAnB,CAAlB;AACAZ,qBAAaI,EAAb,GAAkBP,iBAAiBkC,EAAEnB,YAAnB,CAAlB;AACAZ,qBAAaK,EAAb,GAAkB,CAAlB;AACAL,qBAAaM,EAAb,GAAkB,CAAlB;AACA,YAAIiB,OAAOsB,mBAAX,EAAgC;AAC9BtB,iBAAOsB,mBAAP,CAA2Bd,CAA3B,EAA8B/B,YAA9B;AACD;;AAED,eAAOuB,OAAOuB,4BAAP,KAAwCb,SAAxC,GACL,IADK,GAELV,OAAOuB,4BAAP,EAFF;AAGD,OApDiB;;AAsDlBC,yBAAmB,2BAAUhB,CAAV,EAAa;AAC9BiB,+BAAuBxB,gBAAvB,EAAyCD,OAAO0B,oBAAhD,EAAsElB,CAAtE,EAAyE/B,YAAzE;AACD,OAxDiB;;AA0DlBkD,0BAAoB,4BAAUnB,CAAV,EAAa;AAC/BiB,+BAAuBxB,gBAAvB,EAAyCD,OAAO4B,qBAAhD,EAAuEpB,CAAvE,EAA0E/B,YAA1E;AACAF,qBAAaC,uBAAb,CAAqCC,YAArC;AACD,OA7DiB;;AA+DlBoD,wBAAkB,0BAAUrB,CAAV,EAAa;AAC7B,YAAMnB,eAAemB,EAAEnB,YAAvB;AACAZ,qBAAaS,mBAAb,GAAmCG,aAAaH,mBAAhD;AACA,YAAIc,OAAO8B,mBAAX,EAAgC;AAC9B9B,iBAAO8B,mBAAP,CAA2BtB,CAA3B,EAA8B/B,YAA9B;AACD;AACF,OArEiB;;AAuElBsD,uBAAiB,yBAAUvB,CAAV,EAAa;AAC5B,YAAMnB,eAAemB,EAAEnB,YAAvB;;AAGA,YAAIZ,aAAaU,qBAAb,KAAuCE,aAAaS,mBAAxD,EAA6E;AAC3E;AACD;;AAGDvB,qBAAaa,yBAAb,CAAuCX,YAAvC,EAAqDY,YAArD;AACA,YAAIW,OAAOgC,kBAAX,EAA+B;AAC7BhC,iBAAOgC,kBAAP,CAA0BxB,CAA1B,EAA6B/B,YAA7B;AACD;AACF,OApFiB;;AAsFlBwD,sBAAgB,wBAAUzB,CAAV,EAAa;AAC3B,YAAMnB,eAAemB,EAAEnB,YAAvB;AACAZ,qBAAaS,mBAAb,GAAmCG,aAAaH,mBAAhD;AACAuC,+BAAuBxB,gBAAvB,EAAyCD,OAAOkC,iBAAhD,EAAmE1B,CAAnE,EAAsE/B,YAAtE;AACD,OA1FiB;;AA4FlB0D,4BAAsB,8BAAU3B,CAAV,EAAa;AACjCiB,+BAAuBxB,gBAAvB,EAAyCD,OAAOoC,uBAAhD,EAAyE5B,CAAzE,EAA4E/B,YAA5E;AACAF,qBAAaC,uBAAb,CAAqCC,YAArC;AACD,OA/FiB;;AAiGlB4D,qCAA+B,uCAAU7B,CAAV,EAAa;AAC1C,eAAOR,OAAOsC,gCAAP,KAA4C5B,SAA5C,GACL,IADK,GAELV,OAAOsC,gCAAP,CAAwC9B,CAAxC,EAA2C/B,YAA3C,CAFF;AAGD;AArGiB,KAApB;AAuGA,WAAO;AACL6B,8BADK;AAELiC,0BAFK,kCAE2B;AAC9B,eAAOtC,iBAAiBC,MAAxB;AACD;AAJI,KAAP;AAMD;AAnRkB,CAArB;;AAsRA,SAASuB,sBAAT,CACExB,gBADF,EAEEuC,QAFF,EAGEC,KAHF,EAIEhE,YAJF,EAKE;AACA,MAAIwB,iBAAiBC,MAArB,EAA6B;AAC3BpC,uBAAmB2D,sBAAnB,CAA0CxB,iBAAiBC,MAA3D;AACAD,qBAAiBC,MAAjB,GAA0B,IAA1B;AACD;AACD,MAAIsC,QAAJ,EAAc;AACZA,aAASC,KAAT,EAAgBhE,YAAhB;AACD;AACF;;AAEDiE,OAAOC,OAAP,GAAiBpE,YAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule PanResponder\n */\n\n'use strict';\n\nconst InteractionManager = require('./InteractionManager');\nconst TouchHistoryMath = require('TouchHistoryMath');\n\nconst currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;\nconst currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;\nconst previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;\nconst previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;\nconst currentCentroidX = TouchHistoryMath.currentCentroidX;\nconst currentCentroidY = TouchHistoryMath.currentCentroidY;\n\n/**\n * `PanResponder` reconciles several touches into a single gesture. It makes\n * single-touch gestures resilient to extra touches, and can be used to\n * recognize simple multi-touch gestures.\n *\n * By default, `PanResponder` holds an `InteractionManager` handle to block\n * long-running JS events from interrupting active gestures.\n *\n * It provides a predictable wrapper of the responder handlers provided by the\n * [gesture responder system](docs/gesture-responder-system.html).\n * For each handler, it provides a new `gestureState` object alongside the\n * native event object:\n *\n * ```\n * onPanResponderMove: (event, gestureState) => {}\n * ```\n *\n * A native event is a synthetic touch event with the following form:\n *\n *  - `nativeEvent`\n *      + `changedTouches` - Array of all touch events that have changed since the last event\n *      + `identifier` - The ID of the touch\n *      + `locationX` - The X position of the touch, relative to the element\n *      + `locationY` - The Y position of the touch, relative to the element\n *      + `pageX` - The X position of the touch, relative to the root element\n *      + `pageY` - The Y position of the touch, relative to the root element\n *      + `target` - The node id of the element receiving the touch event\n *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n *      + `touches` - Array of all current touches on the screen\n *\n * A `gestureState` object has the following:\n *\n *  - `stateID` - ID of the gestureState- persisted as long as there at least\n *     one touch on screen\n *  - `moveX` - the latest screen coordinates of the recently-moved touch\n *  - `moveY` - the latest screen coordinates of the recently-moved touch\n *  - `x0` - the screen coordinates of the responder grant\n *  - `y0` - the screen coordinates of the responder grant\n *  - `dx` - accumulated distance of the gesture since the touch started\n *  - `dy` - accumulated distance of the gesture since the touch started\n *  - `vx` - current velocity of the gesture\n *  - `vy` - current velocity of the gesture\n *  - `numberActiveTouches` - Number of touches currently on screen\n *\n * ### Basic Usage\n *\n * ```\n *   componentWillMount: function() {\n *     this._panResponder = PanResponder.create({\n *       // Ask to be the responder:\n *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n *\n *       onPanResponderGrant: (evt, gestureState) => {\n *         // The gesture has started. Show visual feedback so the user knows\n *         // what is happening!\n *\n *         // gestureState.d{x,y} will be set to zero now\n *       },\n *       onPanResponderMove: (evt, gestureState) => {\n *         // The most recent move distance is gestureState.move{X,Y}\n *\n *         // The accumulated gesture distance since becoming responder is\n *         // gestureState.d{x,y}\n *       },\n *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n *       onPanResponderRelease: (evt, gestureState) => {\n *         // The user has released all touches while this view is the\n *         // responder. This typically means a gesture has succeeded\n *       },\n *       onPanResponderTerminate: (evt, gestureState) => {\n *         // Another component has become the responder, so this gesture\n *         // should be cancelled\n *       },\n *       onShouldBlockNativeResponder: (evt, gestureState) => {\n *         // Returns whether this component should block native components from becoming the JS\n *         // responder. Returns true by default. Is currently only supported on android.\n *         return true;\n *       },\n *     });\n *   },\n *\n *   render: function() {\n *     return (\n *       <View {...this._panResponder.panHandlers} />\n *     );\n *   },\n *\n * ```\n *\n * ### Working Example\n *\n * To see it in action, try the\n * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n */\n\nconst PanResponder = {\n\n  /**\n   *\n   * A graphical explanation of the touch data flow:\n   *\n   * +----------------------------+             +--------------------------------+\n   * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n   * +----------------------------+             +----------+---------------------+\n   * |Global store of touchHistory|             |Allocation-less math util       |\n   * |including activeness, start |             |on touch history (centroids     |\n   * |position, prev/cur position.|             |and multitouch movement etc)    |\n   * |                            |             |                                |\n   * +----^-----------------------+             +----^---------------------------+\n   *      |                                          |\n   *      | (records relevant history                |\n   *      |  of touches relevant for                 |\n   *      |  implementing higher level               |\n   *      |  gestures)                               |\n   *      |                                          |\n   * +----+-----------------------+             +----|---------------------------+\n   * | ResponderEventPlugin       |             |    |   Your App/Component      |\n   * +----------------------------+             +----|---------------------------+\n   * |Negotiates which view gets  | Low level   |    |             High level    |\n   * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n   * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n   * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n   * +----------------------------+ attached to |  |         |     distance and  |\n   *                                 each event |  +---------+     velocity.     |\n   *                                            |                                |\n   *                                            |                                |\n   *                                            +--------------------------------+\n   *\n   *\n   *\n   * Gesture that calculates cumulative movement over time in a way that just\n   * \"does the right thing\" for multiple touches. The \"right thing\" is very\n   * nuanced. When moving two touches in opposite directions, the cumulative\n   * distance is zero in each dimension. When two touches move in parallel five\n   * pixels in the same direction, the cumulative distance is five, not ten. If\n   * two touches start, one moves five in a direction, then stops and the other\n   * touch moves fives in the same direction, the cumulative distance is ten.\n   *\n   * This logic requires a kind of processing of time \"clusters\" of touch events\n   * so that two touch moves that essentially occur in parallel but move every\n   * other frame respectively, are considered part of the same movement.\n   *\n   * Explanation of some of the non-obvious fields:\n   *\n   * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n   *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n   *   centroid of the most recently moved \"cluster\" of active touches.\n   *   (Currently all move have the same timeStamp, but later we should add some\n   *   threshold for what is considered to be \"moving\"). If a palm is\n   *   accidentally counted as a touch, but a finger is moving greatly, the palm\n   *   will move slightly, but we only want to count the single moving touch.\n   * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n   *   responder.\n   * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n   *   distance. Accounts for touch moves that are clustered together in time,\n   *   moving the same direction. Only valid when currently responder (otherwise,\n   *   it only represents the drag distance below the threshold).\n   * - vx/vy: Velocity.\n   */\n\n  _initializeGestureState: function (gestureState) {\n    gestureState.moveX = 0;\n    gestureState.moveY = 0;\n    gestureState.x0 = 0;\n    gestureState.y0 = 0;\n    gestureState.dx = 0;\n    gestureState.dy = 0;\n    gestureState.vx = 0;\n    gestureState.vy = 0;\n    gestureState.numberActiveTouches = 0;\n    // All `gestureState` accounts for timeStamps up until:\n    gestureState._accountsForMovesUpTo = 0;\n  },\n\n  /**\n   * This is nuanced and is necessary. It is incorrect to continuously take all\n   * active *and* recently moved touches, find the centroid, and track how that\n   * result changes over time. Instead, we must take all recently moved\n   * touches, and calculate how the centroid has changed just for those\n   * recently moved touches, and append that change to an accumulator. This is\n   * to (at least) handle the case where the user is moving three fingers, and\n   * then one of the fingers stops but the other two continue.\n   *\n   * This is very different than taking all of the recently moved touches and\n   * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n   * changes* in the centroid of recently moved touches.\n   *\n   * There is also some nuance with how we handle multiple moved touches in a\n   * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n   * individual events, multiple touches generate two 'move' events, each of\n   * them triggering `onResponderMove`. But with the way `PanResponder` works,\n   * all of the gesture inference is performed on the first dispatch, since it\n   * looks at all of the touches (even the ones for which there hasn't been a\n   * native dispatch yet). Therefore, `PanResponder` does not call\n   * `onResponderMove` passed the first dispatch. This diverges from the\n   * typical responder callback pattern (without using `PanResponder`), but\n   * avoids more dispatches than necessary.\n   */\n  _updateGestureStateOnMove: function (gestureState, touchHistory) {\n    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n    const movedAfter = gestureState._accountsForMovesUpTo;\n    const prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n    const prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n    const nextDX = gestureState.dx + (x - prevX);\n    const nextDY = gestureState.dy + (y - prevY);\n\n    // TODO: This must be filtered intelligently.\n    const dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n    gestureState.vx = (nextDX - gestureState.dx) / dt;\n    gestureState.vy = (nextDY - gestureState.dy) / dt;\n\n    gestureState.dx = nextDX;\n    gestureState.dy = nextDY;\n    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n  },\n\n  /**\n   * @param {object} config Enhanced versions of all of the responder callbacks\n   * that provide not only the typical `ResponderSyntheticEvent`, but also the\n   * `PanResponder` gesture state.  Simply replace the word `Responder` with\n   * `PanResponder` in each of the typical `onResponder*` callbacks. For\n   * example, the `config` object would look like:\n   *\n   *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n   *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n   *  - `onPanResponderReject: (e, gestureState) => {...}`\n   *  - `onPanResponderGrant: (e, gestureState) => {...}`\n   *  - `onPanResponderStart: (e, gestureState) => {...}`\n   *  - `onPanResponderEnd: (e, gestureState) => {...}`\n   *  - `onPanResponderRelease: (e, gestureState) => {...}`\n   *  - `onPanResponderMove: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n   *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n   *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n   *\n   *  In general, for events that have capture equivalents, we update the\n   *  gestureState once in the capture phase and can use it in the bubble phase\n   *  as well.\n   *\n   *  Be careful with onStartShould* callbacks. They only reflect updated\n   *  `gestureState` for start/end events that bubble/capture to the Node.\n   *  Once the node is the responder, you can rely on every start/end event\n   *  being processed by the gesture and `gestureState` being updated\n   *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n   *  are the responder.\n   */\n  create: function (config) {\n    const interactionState = {\n      handle: (null: ?number),\n    };\n    const gestureState = {\n      // Useful for debugging\n      stateID: Math.random(),\n    };\n    PanResponder._initializeGestureState(gestureState);\n    const panHandlers = {\n      onStartShouldSetResponder: function (e) {\n        return config.onStartShouldSetPanResponder === undefined ?\n          false :\n          config.onStartShouldSetPanResponder(e, gestureState);\n      },\n      onMoveShouldSetResponder: function (e) {\n        return config.onMoveShouldSetPanResponder === undefined ?\n          false :\n          config.onMoveShouldSetPanResponder(e, gestureState);\n      },\n      onStartShouldSetResponderCapture: function (e) {\n        // TODO: Actually, we should reinitialize the state any time\n        // touches.length increases from 0 active to > 0 active.\n        if (e.nativeEvent.touches.length === 1) {\n          PanResponder._initializeGestureState(gestureState);\n        }\n        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;\n        return config.onStartShouldSetPanResponderCapture !== undefined ?\n          config.onStartShouldSetPanResponderCapture(e, gestureState) :\n          false;\n      },\n\n      onMoveShouldSetResponderCapture: function (e) {\n        const touchHistory = e.touchHistory;\n        // Responder system incorrectly dispatches should* to current responder\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return false;\n        }\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        return config.onMoveShouldSetPanResponderCapture ?\n          config.onMoveShouldSetPanResponderCapture(e, gestureState) :\n          false;\n      },\n\n      onResponderGrant: function (e) {\n        if (!interactionState.handle) {\n          interactionState.handle = InteractionManager.createInteractionHandle();\n        }\n        gestureState.x0 = currentCentroidX(e.touchHistory);\n        gestureState.y0 = currentCentroidY(e.touchHistory);\n        gestureState.dx = 0;\n        gestureState.dy = 0;\n        if (config.onPanResponderGrant) {\n          config.onPanResponderGrant(e, gestureState);\n        }\n        // TODO: t7467124 investigate if this can be removed\n        return config.onShouldBlockNativeResponder === undefined ?\n          true :\n          config.onShouldBlockNativeResponder();\n      },\n\n      onResponderReject: function (e) {\n        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);\n      },\n\n      onResponderRelease: function (e) {\n        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderStart: function (e) {\n        const touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        if (config.onPanResponderStart) {\n          config.onPanResponderStart(e, gestureState);\n        }\n      },\n\n      onResponderMove: function (e) {\n        const touchHistory = e.touchHistory;\n        // Guard against the dispatch of two touch moves when there are two\n        // simultaneously changed touches.\n        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n          return;\n        }\n        // Filter out any touch moves past the first one - we would have\n        // already processed multi-touch geometry during the first event.\n        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n        if (config.onPanResponderMove) {\n          config.onPanResponderMove(e, gestureState);\n        }\n      },\n\n      onResponderEnd: function (e) {\n        const touchHistory = e.touchHistory;\n        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);\n      },\n\n      onResponderTerminate: function (e) {\n        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);\n        PanResponder._initializeGestureState(gestureState);\n      },\n\n      onResponderTerminationRequest: function (e) {\n        return config.onPanResponderTerminationRequest === undefined ?\n          true :\n          config.onPanResponderTerminationRequest(e, gestureState);\n      }\n    };\n    return {\n      panHandlers,\n      getInteractionHandle(): ?number {\n        return interactionState.handle;\n      },\n    };\n  }\n};\n\nfunction clearInteractionHandle(\n  interactionState: {handle: ?number},\n  callback: Function,\n  event: Object,\n  gestureState: Object\n) {\n  if (interactionState.handle) {\n    InteractionManager.clearInteractionHandle(interactionState.handle);\n    interactionState.handle = null;\n  }\n  if (callback) {\n    callback(event, gestureState);\n  }\n}\n\nmodule.exports = PanResponder;\n"]}]